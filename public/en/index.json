[
{
	"uri": "https://pirl.live/ipns/QmVKFJs81erni4KV6Hzt2xVwGtC2P1WtE9A4MxNThFVFVh/en/bounty-contributions/article-bounty/",
	"title": "Article Bounty",
	"tags": [],
	"description": "",
	"content": " \u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt; HEAD\n \u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt; local_version\nIntroduction Bounty Reward - 100-200 PIRL Many writing talents have being showing around the Pirl lands.\nSharing their written pieces about the project and its related technology.\nWe would like reward your contribution on raising awareness and educating people interested in Pirl and anything related!\nRequirements  Articles must be longer than 200 words\n Articles must be posted on a 3rd party media - Blog/Medium/Website/Steemit\n Any subject accepted as long as its related to blockchain technology and Pirl\n Any language articles accepted\n  How  Write an article related to Pirl\n Contact @Fawkes on Discord to submit! Join Discord\n Receive your bounty!\n  Disclaimer Pirl Team has the right to disapprove:\n Low quality articles.\n Articles with incorrect information.\n Articles that do not comply with the requirements.\n  Author(s):\n@Fawkes\nContributor(s):\n@Dptelecom\n"
},
{
	"uri": "https://pirl.live/ipns/QmVKFJs81erni4KV6Hzt2xVwGtC2P1WtE9A4MxNThFVFVh/en/pirlcloud/pirl-app/pirl-app-guide/changelog/",
	"title": "Changelog",
	"tags": [],
	"description": "",
	"content": " \u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt; HEAD\n \u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt; local_version\nAll notable changes to this project will be documented in this file. Version Pre Beta 1.0.3-2 2019-1-30: Update and improvement of PirlApp \u0026amp; PirlTube from @Is_Nikolova\nWindows: pre Beta 1.0.3-2\nMacOs we are on: pre Beta 1.0.3-2\nAdded 2018-10-29: Added Channel links to search results.\n2018-10-30: Added progresses bars of video uploads.\n2018-11-02: Added button for cancel playing the next video.\n2018-11-02: Added hide/show menu options of APP with \u0026lsquo;alt\u0026rsquo; key.\n2018-11-02: Added auto-updater.\n2018-11-09: Added a dynamic listing of the videos.\n2018-11-13: Added a listener for key-enter event for search button.\n2018-11-19: Added reload button and update edit page.\n2018-12-06: Added new service compile/deploy smart contracts.\n2018-12-06: Added set new cookie and updated terms of use.\n2018-12-22: Added share buttons in video details page.\n2019-01-14: Added new function - watch smart contract.\nChanged 2018-10-31: Update functionality with double-click for play/pause video and could be more smoothly.\n2018-10-31: Fixed the descriptions don\u0026rsquo;t go behind the suggested videos.\n2018-10-31: Fixed timeline of video style.\n2018-11-01: Fixed marlin stop in windows.\n2018-11-02: Fixed problem with - text stays when reporting a bug.\n2018-11-02: Put \u0026lsquo;Most Popular\u0026rsquo; on top instead of starting category listings at the top.\n2018-11-02: Fixed audio control function previous version audio control has when click to slider, now when we move slider . 2018-11-05: Fixed encoding problem with text of descriptions, tag or title.\n2018-11-06: Fixed bug with no fire events from left new suggestion videos.\n2018-11-06: Fixed balance update after tip and take confirmations.\n2019-01-21: Fixed unique user-name register.\n-\nUnreleased -\nVersion Pre Beta 1.0.3-1 2018-10-12:\nUpdate and improvement of PirlTube from @Is_Nikolova\nWindows:\nApp Version:pre Beta 1.0.3-1\nMacOs:\nApp Version:pre Beta 1.0.3-1\nAdded 2018-10-07: Added text editor to description input at upload panel and edit panel.\n2018-10-07: Added Greek and Macedonian languages.json.\n2018-10-08: Uploading a custom thumbnail functionality.\n2018-10-08: Added guest view for PirlTube (layout, page and video listing in guest view).\n2018-10-09: Upgrade Tip contract functionality.\n2018-10-12: Add help menu, change version.\n2018-10-12: Add search video by user-name functionality.\n2018-10-12: Added copy video\u0026rsquo;s unique key functionality and search by key of video functionality.\n2018-10-17: Added MVC pattern.\n2018-10-18: Added profile-image to list of videos and details video.\n2018-10-19: Added pagination of list videos page.\n2018-10-23: Added back-forward buttons to layouts.\n2018-10-23: Added avatar to video-layout and route navigate to profile page.\n2018-10-24: Added speed to video player.\n2018-10-27: Added \u0026ldquo;Space-bar\u0026rdquo; hot key for play/pause functionality.\nChanged 2018-10-08: Fixing tip functionality to display error in case “Wrong password!”.\n2018-10-10:Optimize and fix errors messages.\n2018-10-18: Sorted listing of videos by date (first factor) and likes (second factor)\n2018-10-25: Fixing overlapping of the language the middle of description.\n2018-10-25: Change \u0026ldquo;the subject sections to be click-able\u0026rdquo;.\n2018-10-25: Fix thumbnail\u0026rsquo;s size.\n2018-10-25: The new Suggestion function when watching a clip is scroll-able\n2018-10-26: Fixed full screen the top tool bar is hide.\n2018-10-27: Fixed bug with double upload same video.\nRemoved -\nUnreleased -\nVersion Pre Beta 1.0.2 2018-10-05:\nUpdate and improvement of PirlTube from @Is_Nikolova\nWindows:\nApp Version: Pre Beta 1.0.2\nMacOs:\nApp Version: Pre Beta 1.0.2\nAdded 2018-10-05: Add auto approve for upload and fix play video.\nChanged 2018-10-05: Fix list all videos.\nRemoved -\nUnreleased -\nAuthor(s):\n@dptelecom\nContributor():\n@Is_Nikolova\n"
},
{
	"uri": "https://pirl.live/ipns/QmVKFJs81erni4KV6Hzt2xVwGtC2P1WtE9A4MxNThFVFVh/en/pirlcloud/pirl-app/pirl-tube/changelog/",
	"title": "Changelog",
	"tags": [],
	"description": "",
	"content": " \u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt; HEAD\n \u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt; local_version\nAll notable changes to this project will be documented in this file. Version Pre Beta 1.0.3-2 2019-01-30: Update and improvement of PirlApp \u0026amp; PirlTube from @Is_Nikolova\nWindows: pre Beta 1.0.3-2\nMacOs we are on: pre Beta 1.0.3-2\nAdded 2018-10-29: Added Channel links to search results.\n2018-10-30: Added progresses bars of video uploads.\n2018-11-02: Added button for cancel playing the next video.\n2018-11-02: Added hide/show menu options of APP with \u0026lsquo;alt\u0026rsquo; key.\n2018-11-02: Added auto-updater.\n2018-11-09: Added a dynamic listing of the videos.\n2018-11-13: Added a listener for key-enter event for search button.\n2018-11-19: Added reload button and update edit page.\n2018-12-06: Added new service compile/deploy smart contracts.\n2018-12-06: Added set new cookie and updated terms of use.\n2018-12-22: Added share buttons in video details page.\n2019-01-14: Added new function - watch smart contract.\nChanged 2018-10-31: Update functionality with double-click for play/pause video and could be more smoothly.\n2018-10-31: Fixed the descriptions don\u0026rsquo;t go behind the suggested videos.\n2018-10-31: Fixed timeline of video style.\n2018-11-01: Fixed marlin stop in windows.\n2018-11-02: Fixed problem with - text stays when reporting a bug.\n2018-11-02: Put \u0026lsquo;Most Popular\u0026rsquo; on top instead of starting category listings at the top.\n2018-11-02: Fixed audio control function previous version audio control has when click to slider, now when we move slider . 2018-11-05: Fixed encoding problem with text of descriptions, tag or title.\n2018-11-06: Fixed bug with no fire events from left new suggestion videos.\n2018-11-06: Fixed balance update after tip and take confirmations.\n2019-01-21: Fixed unique user-name register. Unreleased -\nVersion Pre Beta 1.0.3-1 2018-10-12:\nUpdate and improvement of PirlApp \u0026amp; PirlTube from @Is_Nikolova\nWindows:\nApp Version:pre Beta 1.0.3-1\nMacOs:\nApp Version:pre Beta 1.0.3-1\nAdded 2018-10-07: Added text editor to description input at upload panel and edit panel.\n2018-10-07: Added Greek and Macedonian languages.json.\n2018-10-08: Uploading a custom thumbnail functionality.\n2018-10-08: Added guest view for PirlTube (layout, page and video listing in guest view).\n2018-10-09: Upgrade Tip contract functionality.\n2018-10-12: Add help menu, change version.\n2018-10-12: Add search video by user-name functionality.\n2018-10-12: Added copy video\u0026rsquo;s unique key functionality and search by key of video functionality.\n2018-10-17: Added MVC pattern.\n2018-10-18: Added profile-image to list of videos and details video.\n2018-10-19: Added pagination of list videos page.\n2018-10-23: Added back-forward buttons to layouts.\n2018-10-23: Added avatar to video-layout and route navigate to profile page.\n2018-10-24: Added speed to video player.\n2018-10-27: Added \u0026ldquo;Space-bar\u0026rdquo; hot key for play/pause functionality.\nChanged 2018-10-08: Fixing tip functionality to display error in case “Wrong password!”.\n2018-10-10:Optimize and fix errors messages.\n2018-10-18: Sorted listing of videos by date (first factor) and likes (second factor)\n2018-10-25: Fixing overlapping of the language the middle of description.\n2018-10-25: Change \u0026ldquo;the subject sections to be click-able\u0026rdquo;.\n2018-10-25: Fix thumbnail\u0026rsquo;s size.\n2018-10-25: The new Suggestion function when watching a clip is scroll-able\n2018-10-26: Fixed full screen the top tool bar is hide.\n2018-10-27: Fixed bug with double upload same video.\nRemoved -\nUnreleased -\nVersion Pre Beta 1.0.2 2018-10-05:\nUpdate and improvement of PirlTube from @Is_Nikolova\nWindows:\nApp Version: Pre Beta 1.0.2\nMacOs:\nApp Version: Pre Beta 1.0.2\nAdded 2018-10-05: Add auto approve for upload and fix play video.\nChanged 2018-10-05: Fix list all videos.\nRemoved -\nUnreleased -\nAuthor(s):\n@dptelecom\nContributor():\n@Is_Nikolova\n"
},
{
	"uri": "https://pirl.live/ipns/QmVKFJs81erni4KV6Hzt2xVwGtC2P1WtE9A4MxNThFVFVh/en/development/core/changelog/",
	"title": "Changelog Core",
	"tags": [],
	"description": "",
	"content": " \u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt; HEAD\n        local_version\n       All notable changes to this project will be documented in this file. Version v\u0026mdash;\u0026mdash;\u0026mdash; Added Changed Removed -\nUnreleased -\nAuthor(s):\n@dptelecom\nContributor():\n"
},
{
	"uri": "https://pirl.live/ipns/QmVKFJs81erni4KV6Hzt2xVwGtC2P1WtE9A4MxNThFVFVh/en/development/core/",
	"title": "Core",
	"tags": [],
	"description": "",
	"content": " \u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt; HEAD\n \u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt; local_version\nUpdates about development for PirlCore Updates about development for PirlCore can be found on the next pages.\n1.) Changelog Core 2.) 51% attack on the Pirl network 3.) TestNetwork 4.) Attack Aftermath \u0026amp; Securing Funds 5.) Hard Fork 2018-11-20 6.) PirlGuard \u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt; HEAD\n \u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt; local_version\nAuthor(s):\n@dptelecom\nContributor():\n"
},
{
	"uri": "https://pirl.live/ipns/QmVKFJs81erni4KV6Hzt2xVwGtC2P1WtE9A4MxNThFVFVh/en/faq/",
	"title": "FAQ",
	"tags": [],
	"description": "",
	"content": " What is PIRL?  Pirl is a 3-layered Masternode network blockchain that harnesses the power of Smart Contracts, EVM, Web3 and service masternode networks to provide decentralized storage and immutable (read: unchangeable -secure) content. The main goal of the project is to improve the functionality and performance of Decentralized applications and set new standards for user experience and to provide a real use for blockchain technology. PIRL is using the already laid technological foundation to develop a unique all-in-one platform with easy-to-use features for file storage, communication, entertainment and p2p marketplace trading.\n How does PIRL innovate?  The Pirl team has developed the first masternode capable of working on a DAG structured Ethash blockchain. In addition to this, Pirl brings with it a unique 3-layered Masternode service which offers a number of unique functionalities for its users. The infrastructure developed by the Pirl team brings the most complete DApp hosting solution developed to date to the table and offers dramatically improved performance and endless possibilities for developers and users alike.\n What are the benefits of hosting a DApp on PIRL?  The currently available platforms for DApps leave a lot to be desired. Not only have these networks proved slow and expensive to use in practice, they are severely limited in their utility because they only support the transfer and processing of text data. This means that they all rely on centralized storage for DApps data. We can do better.\nBy introducing a network of IPFS (InterPlanetary File System) masternodes, Pirl is able to host completely decentralised apps without centralized storage. This means high volumes of data processed and stored with high efficiency, zero duplication, and with extreme resilience. Natural disasters? Systems offline? Consolidation of control of the internet? Let’s say no to all of that.\n What are PIRL\u0026rsquo;s coin specifications?  Algorithm: Dagger\nTime between blocks : 13 sec\nTotal block reward : 10 PIRL\nPIRL Miner reward : 6 PIRL / block\nMasternodes : 3 PIRL / block\nDev fund : 1 PIRL / block\nThe future Block reward distribution can be found in PIRL Monetary Policy!\n What is a PIRL masternode?  Masternodes are a series of servers that underpin a blockchain’s network. They are responsible for enabling specific services that cannot be accomplished by miners using a Proof of Work system alone.\nMuch like with Proof of Stake, masternodes rely on “staking” (or locking up) a certain amount of the currency within the currency’s network. Masternodes protect blockchains from network attacks in much the same way as traditional proof of stake algorithms. It’s expensive to accumulate enough currency to create a masternode, and prohibitively expensive to accumulate enough currency to have a monopoly on the entire masternode network. This cost of operation also helps to keep operators honest and invested in the future of the coin, incentivising them to properly maintain their masternodes.\nOnce it is live, the masternode accommodates a unique series of functions. For Pirl, these functions include Content Storage, Communication, Entertainment products, and P2P market trading.\n What is the 3-layer PIRL masternode network?  Pirl will run 3 separate Masternode types. Each of these serves a different purpose. Premium masternodes encompass the features of both of the other masternodes, while also supporting aspects of the Pirl Network such as peering, and consensus.\nStorage Masternodes provide digital downloads for the marketplace, and can be used as a backup file server for individuals and organizations.\nContent Masternodes provide publicly accessible file storage for the media needed for dApps and the marketplace to function.\nFor more information see the PIRL whitepaper\n What will be traded on the PIRL masterplace?  The possibilities for the market are nearly endless. You will be able to buy and sell almost any product or service (provided it’s legal, of course!).\nThe marketplace will also allow dApps, smart contract developers, and artists to sell their intellectual property.\n How will the PIRL marketplace protect traders?  Trades in the marketplace will be protected through escrow smart-contracts, which enable trustless transactions with no risk of loss to the parties involved. Assigned moderators will also be able to verify that everything is running smoothly.\n What is PirlPoseidon?  Poseidon is an all-in-one platform that gives users access to all of Pirl’s unique features and capabilities in one web location.\n What is PirlTube?  PirlTube is the distributed video sharing hosted on the Pirl masternode networks and backed up via smart contracts to the blockchain.\n What is the PIRL max supply?  The maximum supply of Pirl is approximately 157,000,000 coins. See the Pirl Monetary Policy for more information: PIRL Monetary Policy\n Did PIRL have an ICO or a premine?  Absolutely not. Pirl strives to not be considered security by broadly avoiding actions which may lead to confusing that distinction.\n Will PIRL ever change from Proof of Work (PoW) to Proof of Stake (PoS)?  The main PIRL chain will forever remain PoW. Side chains may utilize the benefits of PoS where it makes sense for the design.\n "
},
{
	"uri": "https://pirl.live/ipns/QmVKFJs81erni4KV6Hzt2xVwGtC2P1WtE9A4MxNThFVFVh/en/getting-started/",
	"title": "Getting Started",
	"tags": [],
	"description": "",
	"content": " \u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt; HEAD\n \u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt; local_version\nAuthor(s):\n@Dptelecom\nContributor():\n"
},
{
	"uri": "https://pirl.live/ipns/QmVKFJs81erni4KV6Hzt2xVwGtC2P1WtE9A4MxNThFVFVh/en/solidity/create-token/",
	"title": "How To Create A Token",
	"tags": [],
	"description": "",
	"content": " \u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt; HEAD\n \u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt; local_version\nThe Coin We are going to create a digital token. Tokens in the Pirl ecosystem can represent any fungible tradable good: coins, loyalty points, gold certificates, IOUs, in-game items, etc. Since all tokens implement some basic features in a standard way, this also means that your token will be instantly compatible with the Pirl wallet and any other client or contract that uses the same standards.\nMINIMUM VIABLE TOKEN The standard token contract can be quite complex. But in essence a very basic token boils down to this:\ncontract MyToken { /* This creates an array with all balances */ mapping (address =\u0026gt; uint256) public balanceOf; /* Initializes contract with initial supply tokens to the creator of the contract */ function MyToken( uint256 initialSupply ) { balanceOf[msg.sender] = initialSupply; // Give the creator all initial tokens } /* Send coins */ function transfer(address _to, uint256 _value) { require(balanceOf[msg.sender] \u0026gt;= _value); // Check if the sender has enough require(balanceOf[_to] + _value \u0026gt;= balanceOf[_to]); // Check for overflows balanceOf[msg.sender] -= _value; // Subtract from the sender balanceOf[_to] += _value; // Add the same to the recipient }  }\nTHE CODE But if you just want to copy paste a more complete code, then use this: pragma solidity ^0.4.16;\ninterface tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) public; } contract TokenERC20 { // Public variables of the token string public name; string public symbol; uint8 public decimals = 18; // 18 decimals is the strongly suggested default, avoid changing it uint256 public totalSupply; // This creates an array with all balances mapping (address =\u0026gt; uint256) public balanceOf; mapping (address =\u0026gt; mapping (address =\u0026gt; uint256)) public allowance; // This generates a public event on the blockchain that will notify clients event Transfer(address indexed from, address indexed to, uint256 value); // This notifies clients about the amount burnt event Burn(address indexed from, uint256 value); /** * Constructor function * * Initializes contract with initial supply tokens to the creator of the contract */ function TokenERC20( uint256 initialSupply, string tokenName, string tokenSymbol ) public { totalSupply = initialSupply * 10 ** uint256(decimals); // Update total supply with the decimal amount balanceOf[msg.sender] = totalSupply; // Give the creator all initial tokens name = tokenName; // Set the name for display purposes symbol = tokenSymbol; // Set the symbol for display purposes } /** * Internal transfer, only can be called by this contract */ function _transfer(address _from, address _to, uint _value) internal { // Prevent transfer to 0x0 address. Use burn() instead require(_to != 0x0); // Check if the sender has enough require(balanceOf[_from] \u0026gt;= _value); // Check for overflows require(balanceOf[_to] + _value \u0026gt; balanceOf[_to]); // Save this for an assertion in the future uint previousBalances = balanceOf[_from] + balanceOf[_to]; // Subtract from the sender balanceOf[_from] -= _value; // Add the same to the recipient balanceOf[_to] += _value; Transfer(_from, _to, _value); // Asserts are used to use static analysis to find bugs in your code. They should never fail assert(balanceOf[_from] + balanceOf[_to] == previousBalances); } /** * Transfer tokens * * Send `_value` tokens to `_to` from your account * * @param _to The address of the recipient * @param _value the amount to send */ function transfer(address _to, uint256 _value) public { _transfer(msg.sender, _to, _value); } /** * Transfer tokens from other address * * Send `_value` tokens to `_to` on behalf of `_from` * * @param _from The address of the sender * @param _to The address of the recipient * @param _value the amount to send */ function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) { require(_value \u0026lt;= allowance[_from][msg.sender]); // Check allowance allowance[_from][msg.sender] -= _value; _transfer(_from, _to, _value); return true; } /** * Set allowance for other address * * Allows `_spender` to spend no more than `_value` tokens on your behalf * * @param _spender The address authorized to spend * @param _value the max amount they can spend */ function approve(address _spender, uint256 _value) public returns (bool success) { allowance[msg.sender][_spender] = _value; return true; } /** * Set allowance for other address and notify * * Allows `_spender` to spend no more than `_value` tokens on your behalf, and then ping the contract about it * * @param _spender The address authorized to spend * @param _value the max amount they can spend * @param _extraData some extra information to send to the approved contract */ function approveAndCall(address _spender, uint256 _value, bytes _extraData) public returns (bool success) { tokenRecipient spender = tokenRecipient(_spender); if (approve(_spender, _value)) { spender.receiveApproval(msg.sender, _value, this, _extraData); return true; } } /** * Destroy tokens * * Remove `_value` tokens from the system irreversibly * * @param _value the amount of money to burn */ function burn(uint256 _value) public returns (bool success) { require(balanceOf[msg.sender] \u0026gt;= _value); // Check if the sender has enough balanceOf[msg.sender] -= _value; // Subtract from the sender totalSupply -= _value; // Updates totalSupply Burn(msg.sender, _value); return true; } /** * Destroy tokens from other account * * Remove `_value` tokens from the system irreversibly on behalf of `_from`. * * @param _from the address of the sender * @param _value the amount of money to burn */ function burnFrom(address _from, uint256 _value) public returns (bool success) { require(balanceOf[_from] \u0026gt;= _value); // Check if the targeted balance is enough require(_value \u0026lt;= allowance[_from][msg.sender]); // Check allowance balanceOf[_from] -= _value; // Subtract from the targeted balance allowance[_from][msg.sender] -= _value; // Subtract from the sender's allowance totalSupply -= _value; // Update totalSupply Burn(_from, _value); return true; }  }\nUNDERSTANDING THE CODE \u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt; HEAD\n \u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt; local_version\nSo let\u0026rsquo;s start with the basics. Open the Wallet app, go to the Contracts tab and then Deploy New Contract. On the Solidity Contract Source code text field, type the code below:\ncontract MyToken { /* This creates an array with all balances */ mapping (address =\u0026gt; uint256) public balanceOf; }  A mapping means an associative array, where you associate addresses with balances. The addresses are in the basic hexadecimal Pirl format, while the balances are integers, ranging from 0 to 115 quattuorvigintillion. If you don\u0026rsquo;t know how much a quattuorvigintillion is, it\u0026rsquo;s many vigintillions more than anything you are planning to use your tokens for. The public keyword, means that this variable will be accessible by anyone on the blockchain, meaning all balances are public (as they need to be, in order for clients to display them).\n\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt; HEAD\n \u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt; local_version\nIf you published your contract right away, it would work but wouldn\u0026rsquo;t be very useful: it would be a contract that could query the balance of your coin for any address–but since you never created a single coin, every one of them would return 0. So we are going to create a few tokens on startup. Add this code before the last closing bracket, just under the mapping.. line.\nfunction MyToken() { balanceOf[msg.sender] = 21000000; }  Notice that the function MyToken has the same name as the contract MyToken. This is very important and if you rename one, you have to rename the other too: this is a special, startup function that runs only once and once only when the contract is first uploaded to the network. This function will set the balance of msg.sender, the user which deployed the contract, with a balance of 21 million.\nThe choice of 21 million was rather arbitrary, and you can change it to anything you want in the code, but there\u0026rsquo;s a better way: instead, supply it as a parameter for the function, like this:\nfunction MyToken(uint256 initialSupply) public { balanceOf[msg.sender] = initialSupply; }  Take a look at the right column beside the contract and you\u0026rsquo;ll see a drop-down list, written pick a contract. Select the \u0026ldquo;MyToken\u0026rdquo; contract and you\u0026rsquo;ll see that now it shows a section called Constructor parameters. These are changeable parameters for your token, so you can reuse the same code and only change these variables in the future.\n\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt; HEAD\n \u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt; local_version\nRight now you have a functional contract that created balances of tokens but since there isn\u0026rsquo;t any function to move it, all it does is stay on the same account. So we are going to implement that now. Write the following code before the last bracket.\n /* Send coins */ function transfer(address _to, uint256 _value) { /* Add and subtract new balances */ balanceOf[msg.sender] -= _value; balanceOf[_to] += _value; }  This is a very straightforward function: it has a recipient and a value as the parameter and whenever someone calls it, it will subtract the _value from their balance and add it to the _to balance. Right away there\u0026rsquo;s an obvious problem: what happens if the person wants to send more than it owns? Since we don\u0026rsquo;t want to handle debt in this particular contract, we are simply going to make a quick check and if the sender doesn\u0026rsquo;t have enough funds the contract execution will simply stop. It\u0026rsquo;s also to check for overflows, to avoid having a number so big that it becomes zero again.\nTo stop a contract execution mid-execution you can either return or throw The former will cost less gas but it can be more headache as any changes you did to the contract so far will be kept. In the other hand, \u0026lsquo;throw\u0026rsquo; will cancel all contract execution, revert any changes that transaction could have made and the sender will lose all Pirl he sent for gas. But since the Wallet can detect that a contract will throw, it always shows an alert, therefore preventing any Pirl to be spent at all.\nfunction transfer(address _to, uint256 _value) { /* Check if sender has balance and for overflows */ require(balanceOf[msg.sender] \u0026gt;= _value \u0026amp;\u0026amp; balanceOf[_to] + _value \u0026gt;= balanceOf[_to]); /* Add and subtract new balances */ balanceOf[msg.sender] -= _value; balanceOf[_to] += _value; }  Now all that is missing is having some basic information about the contract. In the near future this can be handled by a token registry, but for now we\u0026rsquo;ll add them directly to the contract:\nstring public name; string public symbol; uint8 public decimals;\nAnd now we update the constructor function to allow all those variables to be set up at the start:\n /* Initializes contract with initial supply tokens to the creator of the contract */ function MyToken(uint256 initialSupply, string tokenName, string tokenSymbol, uint8 decimalUnits) { balanceOf[msg.sender] = initialSupply; // Give the creator all initial tokens name = tokenName; // Set the name for display purposes symbol = tokenSymbol; // Set the symbol for display purposes decimals = decimalUnits; // Amount of decimals for display purposes }  Finally, we now need somPirling called Events. These are special, empty functions that you call to help clients like the Pirl Wallet keep track of activities happening in the contract. Events should start with a capital letter. Add this line at the beginning of the contract to declare the event:\nevent Transfer(address indexed from, address indexed to, uint256 value);  And then you just need to add these two lines inside the \u0026ldquo;transfer\u0026rdquo; function: /* Notify anyone listening that this transfer took place */ Transfer(msg.sender, _to, _value);\nAnd now your token is ready!\nNOTICED THE COMMENTS? What are those @notice and @param comments, you might ask? That\u0026rsquo;s Natspec an emerging standard for a natural language specification, which allows wallets to show the user a natural language description of what the contract is about to do. While not currently supported by many wallets, this will change in the future, so it\u0026rsquo;s nice to be prepared.\nHOW TO DEPLOY If you aren\u0026rsquo;t there already, open the Pirl Wallet, go to the contracts tab and then click \u0026ldquo;deploy new contract\u0026rdquo;. Now get the token source from above and paste it into the \u0026ldquo;Solidity source field\u0026rdquo;. If the code compiles without any error, you should see a \u0026ldquo;pick a contract\u0026rdquo; drop-down list on the right. Get it and select the \u0026ldquo;MyToken\u0026rdquo; contract. On the right column, you\u0026rsquo;ll see all the parameters you need to personalize your own token. You can tweak them as you please.\n\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt; HEAD Scroll to the end of the page and you\u0026rsquo;ll see an estimate of the computation cost of that contract and you can select a fee on how much Pirl you are willing to pay for it. Any excess Pirl you don\u0026rsquo;t spend will be returned to you so you can leave the default settings if you wish. Press \u0026ldquo;deploy\u0026rdquo;, type your account password and wait a few seconds for your transaction to be picked up.\nYou\u0026rsquo;ll be redirected to the front page where you can see your transaction waiting for confirmations. Click the account and after no more than a minute you should see that your account will show that you have 100% of the shares you just created. To send some to a few friends: select \u0026ldquo;send\u0026rdquo;, and then choose which currency you want to send (Pirl or your newly created share), paste your friend\u0026rsquo;s address on the \u0026ldquo;to\u0026rdquo; field and press \u0026ldquo;send\u0026rdquo;.\n Scroll to the end of the page and you\u0026rsquo;ll see an estimate of the computation cost of that contract and you can select a fee on how much Pirl you are willing to pay for it. Any excess Pirl you don\u0026rsquo;t spend will be returned to you so you can leave the default settings if you wish. Press \u0026ldquo;deploy\u0026rdquo;, type your account password and wait a few seconds for your transaction to be picked up.\nYou\u0026rsquo;ll be redirected to the front page where you can see your transaction waiting for confirmations. Click the account and after no more than a minute you should see that your account will show that you have 100% of the shares you just created. To send some to a few friends: select \u0026ldquo;send\u0026rdquo;, and then choose which currency you want to send (Pirl or your newly created share), paste your friend\u0026rsquo;s address on the \u0026ldquo;to\u0026rdquo; field and press \u0026ldquo;send\u0026rdquo;.\n\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt; local_version\nIf you send it to a friend, they will not see anything in their wallet yet. This is because the wallet only tracks tokens it knows about, and you have to add these manually. Now go to the \u0026ldquo;Contracts\u0026rdquo; tab and you should see a link to your newly created contract. Click on it to go to its page. Since this is a very simple contract page there isn\u0026rsquo;t much to do here, just click \u0026ldquo;copy address\u0026rdquo; and paste the contract address into a text editor, you\u0026rsquo;ll need it shortly.\nTo add a token to watch, go to the contracts page and then click \u0026ldquo;Watch Token\u0026rdquo;. A pop-up will appear and you only need to paste the contract address. The token name, symbol and decimal number should be automatically filled but if it\u0026rsquo;s not you can put anything you want (it will only affect how it displays on your wallet). Once you do this, you\u0026rsquo;ll automatically be shown any balance you have of that token and you\u0026rsquo;ll be able to send it to anyone else.\n\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt; HEAD\n \u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt; local_version\nAnd now you have your own crypto token! Tokens by themselves can be useful as value exchange on local communities, ways to keep track of worked hours or other loyalty programs. But can we make a currency have an intrinsic value by making it useful?\nImprove your token You can deploy your whole crypto token without ever touching a line of code, but the real magic happens when you start customizing it. The following sections will be suggestions on functions you can add to your token to make it fit your needs more.\nMORE BASIC FUNCTIONS You\u0026rsquo;ll notice that there some more functions in your basic token contract, like approve, sendFrom and others. These functions are there for your token to interact with other contracts: if you want, say, sell tokens to a decentralized exchange, just sending them to an address will not be enough as the exchange will not be aware of the new tokens or who sent them, because contracts aren\u0026rsquo;t able to subscribe to Events only to function calls. So for contracts, you should first approve an amount of tokens they can move from your account and then ping them to let them know they should do their thing - or do the two actions in one, with approveAndCall.\nBecause many of these functions are having to reimplement the transferring of tokens, it makes sense to change them to an internal function, which can only be called by the contract itself:\n/* Internal transfer, can only be called by this contract */ function _transfer(address _from, address _to, uint _value) internal { require (_to != 0x0); // Prevent transfer to 0x0 address. Use burn() instead require (balanceOf[_from] \u0026gt;= _value); // Check if the sender has enough require (balanceOf[_to] + _value \u0026gt; balanceOf[_to]); // Check for overflows require(!frozenAccount[_from]); // Check if sender is frozen require(!frozenAccount[_to]); // Check if recipient is frozen balanceOf[_from] -= _value; // Subtract from the sender balanceOf[_to] += _value; // Add the same to the recipient Transfer(_from, _to, _value); }  Now all your functions that result in the transfer of coins, can do their own checks and then call transfer with the correct parameters. Notice that this function will move coins from any account to any other, without requiring anyone\u0026rsquo;s permission to do so: that\u0026rsquo;s why it\u0026rsquo;s an internal function, only called by the contract: if you add any function calling it, make sure it properly verifies if the caller should be have permission to move those.\nCENTRALIZED ADMINISTRATOR All dapps are fully decentralized by default, but that doesn\u0026rsquo;t mean they can\u0026rsquo;t have some sort of central manager, if you want them to. Maybe you want the ability to mint more coins, maybe you want to ban some people from using your currency. You can add any of those features, but the catch is that you can only add them at the beginning, so all the token holders will always know exactly the rules of the game before they decide to own one.\nFor that to happen, you need a central controller of currency. This could be a simple account, but could also be a contract and therefore the decision on creating more tokens will depend on the contract: if it\u0026rsquo;s a democratic organization that can be up to vote, or maybe it can be just a way to limit the power of the token owner.\nIn order to do that we\u0026rsquo;ll learn a very useful property of contracts: inheritance. Inheritance allows a contract to acquire properties of a parent contract, without having to redefine all of them. This makes the code cleaner and easier to reuse. Add this code to the first line of your code, before contract MyToken {. contract owned { address public owner;\n function owned() { owner = msg.sender; } modifier onlyOwner { require(msg.sender == owner); _; } function transferOwnership(address newOwner) onlyOwner { owner = newOwner; } }  This creates a very basic contract that doesn\u0026rsquo;t do anything except define some generic functions about a contract that can be \u0026ldquo;owned\u0026rdquo;. Now the next step is just to add the text is owned to your contract: contract MyToken is owned { /* the rest of the contract as usual */\nThis means that all the functions inside MyToken now can access the variable owner and the modifier onlyOwner. The contract also gets a function to transfer ownership. Since it might be interesting to set the owner of the contract at startup, you can also add this to the constructor function:\n function MyToken( uint256 initialSupply, string tokenName, uint8 decimalUnits, string tokenSymbol, address centralMinter ) { if(centralMinter != 0 ) owner = centralMinter; }  CENTRAL MINT Suppose you want the amount of coins in circulation to change. This is the case when your tokens actually represent an off blockchain asset (like gold certificates or government currencies) and you want the virtual inventory to reflect the real one. This might also be the case when the currency holders expect some control of the price of the token, and want to issue or remove tokens from circulation.\nFirst, we need to add a variable to store the totalSupply and assign it to our constructor function. contract MyToken { uint256 public totalSupply;\n function MyToken(...) { totalSupply = initialSupply; ... } ... }  Now let\u0026rsquo;s add a new function finally that will enable the owner to create new tokens:\nfunction mintToken(address target, uint256 mintedAmount) onlyOwner { balanceOf[target] += mintedAmount; totalSupply += mintedAmount; Transfer(0, owner, mintedAmount); Transfer(owner, target, mintedAmount); }  Notice the modifier onlyOwner on the end of the function name. This means that this function will be rewritten at compilation to inherit the code from the modifier onlyOwner we had defined before. This function\u0026rsquo;s code will be inserted where there\u0026rsquo;s an underline on the modifier function, meaning that this particular function can only be called by the account that is set as the owner. Just add this to a contract with an owner modifier and you\u0026rsquo;ll be able to create more coins.\nFREEZING OF ASSETS Depending on your use case, you might need to have some regulatory hurdles on who can and cannot use your tokens. For that to happen, you can add a parameter that enables the contract owner to freeze or unfreeze assets. Add this variable and function anywhere inside the contract. You can put them anywhere but for good practice we recommend you put the mappings with the other mappings and events with the other events. mapping (address =\u0026gt; bool) public frozenAccount; event FrozenFunds(address target, bool frozen);\nfunction freezeAccount(address target, bool freeze) onlyOwner { frozenAccount[target] = freeze; FrozenFunds(target, freeze); }  With this code, all accounts are unfrozen by default but the owner can set any of them into a freeze state by calling Freeze Account. Unfortunately, freezing has no practical effect because we haven\u0026rsquo;t added anything to the transfer function. We are changing that now:\nfunction transfer(address _to, uint256 _value) { require(!frozenAccount[msg.sender]);  Now any account that is frozen will still have their funds intact, but won\u0026rsquo;t be able to move them. All accounts are unfrozen by default until you freeze them, but you can easily revert that behavior into a whitelist where you need to manually approve every account. Just rename frozenAccount into approvedAccount and change the last line to: require(approvedAccount[msg.sender]);\nAUTOMATIC SELLING AND BUYING So far, you\u0026rsquo;ve relied on utility and trust to value your token. But if you want you can make the token\u0026rsquo;s value be backed by Pirl (or other tokens) by creating a fund that automatically sells and buys them at market value. First, let\u0026rsquo;s set the price for buying and selling: uint256 public sellPrice; uint256 public buyPrice;\nfunction setPrices(uint256 newSellPrice, uint256 newBuyPrice) onlyOwner { sellPrice = newSellPrice; buyPrice = newBuyPrice; }  This is acceptable for a price that doesn\u0026rsquo;t change very often, as every new price change will require you to execute a transaction and spend a bit of Pirl. If you want to have a constant floating price we recommend investigating standard data feeds The next step is making the buy and sell functions:\nfunction buy() payable returns (uint amount){ amount = msg.value / buyPrice; // calculates the amount require(balanceOf[this] \u0026gt;= amount); // checks if it has enough to sell balanceOf[msg.sender] += amount; // adds the amount to buyer's balance balanceOf[this] -= amount; // subtracts amount from seller's balance Transfer(this, msg.sender, amount); // execute an event reflecting the change return amount; // ends function and returns } function sell(uint amount) returns (uint revenue){ require(balanceOf[msg.sender] \u0026gt;= amount); // checks if the sender has enough to sell balanceOf[this] += amount; // adds the amount to owner's balance balanceOf[msg.sender] -= amount; // subtracts the amount from seller's balance revenue = amount * sellPrice; msg.sender.transfer(revenue); // sends Pirl to the seller: it's important to do this last to prevent recursion attacks Transfer(msg.sender, this, amount); // executes an event reflecting on the change return revenue; // ends function and returns }  Notice that this will not create new tokens but change the balance the contract owns. The contract can hold both its own tokens and Pirl and the owner of the contract, while it can set prices or in some cases create new tokens (if applicable) it cannot touch the bank\u0026rsquo;s tokens or Pirl. The only way this contract can move funds is by selling and buying them.\nNote Buy and sell \u0026ldquo;prices\u0026rdquo; are not set in Pirl, but in wei the minimum currency of the system (equivalent to the cent in the Euro and Dollar, or the Satoshi in Bitcoin). One Pirl is 1000000000000000000 wei. So when setting prices for your token in Pirl, add 18 zeros at the end.\nWhen creating the contract, send enough Pirl to it so that it can buy back all the tokens on the market otherwise your contract will be insolvent and your users won\u0026rsquo;t be able to sell their tokens.\nThe previous examples, of course, describe a contract with a single central buyer and seller, a much more interesting contract would allow a market where anyone can bid different prices, or maybe it would load the prices directly from an external source.\nAUTOREFILL Everytime, you make a transaction on Pirl you need to pay a fee to the miner of the block that will calculate the result of your smart contract. While this might change in the future, for the moment fees can only be paid in Pirl and therefore all users of your tokens need it. Tokens in accounts with a balance smaller than the fee are stuck until the owner can pay for the necessary fee. But in some use cases, you might not want your users to think about Pirl, blockchain or how to obtain Pirl, so one possible approach would have your coin automatically refill the user balance as soon as it detects the balance is dangerously low.\n\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt; HEAD\nIn order to do that, first you need to create a variable that will hold the threshold amount and a function to change it. In order to do that, first you need to create a variable that will hold the threshold amount and a function to change it. \u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt; local_version uint minBalanceForAccounts;\nfunction setMinBalance(uint minimumBalanceInFinney) onlyOwner { minBalanceForAccounts = minimumBalanceInFinney * 1 finney; }  Then, add this line to the transfer function so that the sender is refunded: /* Send coins */ function transfer(address _to, uint256 _value) { \u0026hellip; if(msg.sender.balance \u0026lt; minBalanceForAccounts) sell((minBalanceForAccounts - msg.sender.balance) / sellPrice); }\nYou can also instead change it so that the fee is paid forward to the receiver by the sender:\n /* Send coins */ function transfer(address _to, uint256 _value) { ... if(_to.balance\u0026lt;minBalanceForAccounts) _to.send(sell((minBalanceForAccounts - _to.balance) / sellPrice)); }  This will ensure that no account receiving the token has less than the necessary Pirl to pay the fees.\nPROOF OF WORK There are some ways to tie your coin supply to a mathematical formula. One of the simplest ways would be to make it a \u0026ldquo;merged mining\u0026rdquo; with Pirl, meaning that anyone who finds a block on Pirl would also get a reward from your coin, given that anyone calls the reward function on that block. You can do it using the special keyword coinbase that refers to the miner who finds the block.\nfunction giveBlockReward() { balanceOf[block.coinbase] += 1; }  It\u0026rsquo;s also possible to add a mathematical formula, so that anyone who can do math can win a reward. On this next example you have to calculate the cubic root of the current challenge gets a point and the right to set the next challenge: uint currentChallenge = 1; // Can you figure out the cubic root of this number?\nfunction rewardMathGeniuses(uint answerToCurrentReward, uint nextChallenge) { require(answerToCurrentReward**3 == currentChallenge); // If answer is wrong do not continue balanceOf[msg.sender] += 1; // Reward the player currentChallenge = nextChallenge; // Set the next challenge }  Of course, while calculating cubic roots can be hard for someone to do on their heads, they are very easy with a calculator, so this game could be easily broken by a computer. Also since the last winner can choose the next challenge, they could pick somPirling they know and therefore would not be a very fair game to other players. There are tasks that are easy for humans but hard for computers but they are usually very hard to code in simple scripts like these. Instead, a fairer system should be one that is very hard for a computer to do, but isn\u0026rsquo;t very hard for a computer to verify. A great candidate would be to create a hash challenge where the challenger has to generate hashes from multiple numbers until they find one that is lower than a given difficulty.\n\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt; HEAD\nThis process was first proposed by Adam Back in 1997 as Hashcash and then was implemented in Bitcoin by Satoshi Nakamoto as Proof of work in 2008. This process was first proposed by Adam Back in 1997 as Hashcash and then was implemented in Bitcoin by Satoshi Nakamoto as Proof of work in 2008. \u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt; local_version\nIf you like Hashing as a form of random issuance of coins, you can still create your own Pirl based currency that has a proof of work issuance: bytes32 public currentChallenge; // The coin starts with a challenge uint public timeOfLastProof; // Variable to keep track of when rewards were given uint public difficulty = 10**32; // Difficulty starts reasonably low\nfunction proofOfWork(uint nonce){ bytes8 n = bytes8(sha3(nonce, currentChallenge)); // Generate a random hash based on input require(n \u0026gt;= bytes8(difficulty)); // Check if it's under the difficulty uint timeSinceLastProof = (now - timeOfLastProof); // Calculate time since last reward was given require(timeSinceLastProof \u0026gt;= 5 seconds); // Rewards cannot be given too quickly balanceOf[msg.sender] += timeSinceLastProof / 60 seconds; // The reward to the winner grows by the minute difficulty = difficulty * 10 minutes / timeSinceLastProof + 1; // Adjusts the difficulty timeOfLastProof = now; // Reset the counter currentChallenge = sha3(nonce, currentChallenge, block.blockhash(block.number - 1)); // Save a hash that will be used as the next proof }  Also change the Constructor function (the one that has the same name as the contract, which is called at first upload) to add this line, so the difficulty adjustment will not go crazy: timeOfLastProof = now;\nOnce the contract is online, select the function \u0026ldquo;Proof of work\u0026rdquo;, add your favorite number on the nonce field and try to execute it. If the confirmation window gives a red warning saying \u0026ldquo;Data can\u0026rsquo;t be execute\u0026rdquo; go back and pick another number until you find one that allows the transaction to go forward: this process is random. If you find one you will be awarded 1 token for every minute that has passed since the last reward was given, and then the challenge difficulty will be adjusted up or down to target an average of 10 minutes per reward.\nThis process of trying to find the number that will give you a reward is what is called mining: if difficulty rises it can be very hard to find a lucky number, but it will always be easy to verify that you found one.\nImproved Coin FULL COIN CODE If you add all the advanced options, this is how the final code should look like: \u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt; HEAD\n=======\n       local_version pragma solidity ^0.4.16;\n       contract owned { address public owner; function owned() public { owner = msg.sender; } modifier onlyOwner { require(msg.sender == owner); _; } function transferOwnership(address newOwner) onlyOwner public { owner = newOwner; }  }\ninterface tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) public; } contract TokenERC20 { // Public variables of the token string public name; string public symbol; uint8 public decimals = 18; // 18 decimals is the strongly suggested default, avoid changing it uint256 public totalSupply; // This creates an array with all balances mapping (address =\u0026gt; uint256) public balanceOf; mapping (address =\u0026gt; mapping (address =\u0026gt; uint256)) public allowance; // This generates a public event on the blockchain that will notify clients event Transfer(address indexed from, address indexed to, uint256 value); // This notifies clients about the amount burnt event Burn(address indexed from, uint256 value); /** * Constrctor function * * Initializes contract with initial supply tokens to the creator of the contract */ function TokenERC20( uint256 initialSupply, string tokenName, string tokenSymbol ) public { totalSupply = initialSupply * 10 ** uint256(decimals); // Update total supply with the decimal amount balanceOf[msg.sender] = totalSupply; // Give the creator all initial tokens name = tokenName; // Set the name for display purposes symbol = tokenSymbol; // Set the symbol for display purposes } /** * Internal transfer, only can be called by this contract */ function _transfer(address _from, address _to, uint _value) internal { // Prevent transfer to 0x0 address. Use burn() instead require(_to != 0x0); // Check if the sender has enough require(balanceOf[_from] \u0026gt;= _value); // Check for overflows require(balanceOf[_to] + _value \u0026gt; balanceOf[_to]); // Save this for an assertion in the future uint previousBalances = balanceOf[_from] + balanceOf[_to]; // Subtract from the sender balanceOf[_from] -= _value; // Add the same to the recipient balanceOf[_to] += _value; Transfer(_from, _to, _value); // Asserts are used to use static analysis to find bugs in your code. They should never fail assert(balanceOf[_from] + balanceOf[_to] == previousBalances); } /** * Transfer tokens * * Send `_value` tokens to `_to` from your account * * @param _to The address of the recipient * @param _value the amount to send */ function transfer(address _to, uint256 _value) public { _transfer(msg.sender, _to, _value); } /** * Transfer tokens from other address * * Send `_value` tokens to `_to` in behalf of `_from` * * @param _from The address of the sender * @param _to The address of the recipient * @param _value the amount to send */ function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) { require(_value \u0026lt;= allowance[_from][msg.sender]); // Check allowance allowance[_from][msg.sender] -= _value; _transfer(_from, _to, _value); return true; } /** * Set allowance for other address * * Allows `_spender` to spend no more than `_value` tokens in your behalf * * @param _spender The address authorized to spend * @param _value the max amount they can spend */ function approve(address _spender, uint256 _value) public returns (bool success) { allowance[msg.sender][_spender] = _value; return true; } /** * Set allowance for other address and notify * * Allows `_spender` to spend no more than `_value` tokens in your behalf, and then ping the contract about it * * @param _spender The address authorized to spend * @param _value the max amount they can spend * @param _extraData some extra information to send to the approved contract */ function approveAndCall(address _spender, uint256 _value, bytes _extraData) public returns (bool success) { tokenRecipient spender = tokenRecipient(_spender); if (approve(_spender, _value)) { spender.receiveApproval(msg.sender, _value, this, _extraData); return true; } } /** * Destroy tokens * * Remove `_value` tokens from the system irreversibly * * @param _value the amount of money to burn */ function burn(uint256 _value) public returns (bool success) { require(balanceOf[msg.sender] \u0026gt;= _value); // Check if the sender has enough balanceOf[msg.sender] -= _value; // Subtract from the sender totalSupply -= _value; // Updates totalSupply Burn(msg.sender, _value); return true; } /** * Destroy tokens from other account * * Remove `_value` tokens from the system irreversibly on behalf of `_from`. * * @param _from the address of the sender * @param _value the amount of money to burn */ function burnFrom(address _from, uint256 _value) public returns (bool success) { require(balanceOf[_from] \u0026gt;= _value); // Check if the targeted balance is enough require(_value \u0026lt;= allowance[_from][msg.sender]); // Check allowance balanceOf[_from] -= _value; // Subtract from the targeted balance allowance[_from][msg.sender] -= _value; // Subtract from the sender's allowance totalSupply -= _value; // Update totalSupply Burn(_from, _value); return true; }  }\n/****************************************/ /* ADVANCED TOKEN STARTS HERE */ /****************************************/\ncontract MyAdvancedToken is owned, TokenERC20 { uint256 public sellPrice; uint256 public buyPrice; mapping (address =\u0026gt; bool) public frozenAccount; /* This generates a public event on the blockchain that will notify clients */ event FrozenFunds(address target, bool frozen); /* Initializes contract with initial supply tokens to the creator of the contract */ function MyAdvancedToken( uint256 initialSupply, string tokenName, string tokenSymbol ) TokenERC20(initialSupply, tokenName, tokenSymbol) public {} /* Internal transfer, only can be called by this contract */ function _transfer(address _from, address _to, uint _value) internal { require (_to != 0x0); // Prevent transfer to 0x0 address. Use burn() instead require (balanceOf[_from] \u0026gt;= _value); // Check if the sender has enough require (balanceOf[_to] + _value \u0026gt; balanceOf[_to]); // Check for overflows require(!frozenAccount[_from]); // Check if sender is frozen require(!frozenAccount[_to]); // Check if recipient is frozen balanceOf[_from] -= _value; // Subtract from the sender balanceOf[_to] += _value; // Add the same to the recipient Transfer(_from, _to, _value); } /// @notice Create `mintedAmount` tokens and send it to `target` /// @param target Address to receive the tokens /// @param mintedAmount the amount of tokens it will receive function mintToken(address target, uint256 mintedAmount) onlyOwner public { balanceOf[target] += mintedAmount; totalSupply += mintedAmount; Transfer(0, this, mintedAmount); Transfer(this, target, mintedAmount); } /// @notice `freeze? Prevent | Allow` `target` from sending \u0026amp; receiving tokens /// @param target Address to be frozen /// @param freeze either to freeze it or not function freezeAccount(address target, bool freeze) onlyOwner public { frozenAccount[target] = freeze; FrozenFunds(target, freeze); } /// @notice Allow users to buy tokens for `newBuyPrice` Pirl and sell tokens for `newSellPrice` Pirl /// @param newSellPrice Price the users can sell to the contract /// @param newBuyPrice Price users can buy from the contract function setPrices(uint256 newSellPrice, uint256 newBuyPrice) onlyOwner public { sellPrice = newSellPrice; buyPrice = newBuyPrice; } /// @notice Buy tokens from contract by sending Pirl function buy() payable public { uint amount = msg.value / buyPrice; // calculates the amount _transfer(this, msg.sender, amount); // makes the transfers } /// @notice Sell `amount` tokens to contract /// @param amount amount of tokens to be sold function sell(uint256 amount) public { require(this.balance \u0026gt;= amount * sellPrice); // checks if the contract has enough Pirl to buy _transfer(msg.sender, this, amount); // makes the transfers msg.sender.transfer(amount * sellPrice); // sends Pirl to the seller. It's important to do this last to avoid recursion attacks }  }\nDEPLOYING Scroll down and you\u0026rsquo;ll see an estimated cost for deployment. If you want you can change the slider to set a smaller fee, but if the price is too below the average market rate your transaction might take longer to pick up. Click Deploy and type your password. After a few seconds you\u0026rsquo;ll be redirected to the dashboard and under Latest transactions you\u0026rsquo;ll see a line saying \u0026ldquo;creating contract\u0026rdquo;. Wait for a few seconds for someone to pick your transaction and then you\u0026rsquo;ll see a slow blue rectangle representing how many other nodes have seen your transaction and confirmed them. The more confirmations you have, the more assurance you have that your code has been deployed.\nClick on the link that says Admin page and you\u0026rsquo;ll be taken the simplest central bank dashboard in the world, where you can do anything you want with your newly created currency.\nOn the left side under Read from contract you have all the options and functions you can use to read information from the contract, for free. If your token has an owner, it will display its address here. Copy that address and paste it into Balance of and it will show you the balance of any account (the balance is also automatically shown on any account page that has tokens). On the right side, under Write to Contract you\u0026rsquo;ll see all the functions you can use to alter or change the blockchain in any way. These will cost gas. If you created a contract that allows you to mint new coins, you should have a function called \u0026ldquo;Mint Token\u0026rdquo;. Select it.\nSelect the address where those new currencies will be created and then the amount (if you have decimals set at 2, then add 2 zeros after the amount, to create the correct quantity). On Execute from select the account that set as owner, leave the Pirl amount at zero and then press execute.\nAfter a few confirmations, the recipient balance will be updated to reflect the new amount. But your recipient wallet might not show it automatically: in order to be aware of custom tokens, the wallet must add them manually to a watch list. Copy your token address (at the admin page, press copy address) and send that to your recipient. If they haven\u0026rsquo;t already they should go to the contracts tab, press Watch Token and then add the address there. Name, symbols and decimal amounts displayed can be customized by the end user, especially if they have other tokens with similar (or the same) name. The main icon is not changeable and users should pay attention to them when sending and receiving tokens to ensure they are dealing with the real deal and not some copycat token. \u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt; HEAD\n=======\n       local_version\nUsing your coin        Once you\u0026rsquo;ve deployed your tokens, they will be added to your list of watched tokens, and the total balance will be shown on your account. In order to send tokens, just go to the Send tab and select an account that contains tokens. The tokens the account has will be listed just under Pirl. Select them and then type the amount of tokens you want to send. If you want to add someone else\u0026rsquo;s token, just go to the Contracts tab and click Watch token. For example, to add the Pirl Vortex token to your watch list, just add the address 0x0489A975393A1cD0330740040141D702C35180cb\n\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt; HEAD =======        local_version\nNow what?        You just learned how you can use Pirl to issue a token, that can represent anything you want. But what can you do with the tokens? You can use, for instance, the tokens to represent a share in a company or you can use a central committee to vote on when to issue new coins to control inflation. You can also use them to raise money for a cause, via a crowdsale. What will you build next?\nAuthor(s):\n@Fawkes\nContributor(s):\n\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt; HEAD\n@Dptelecom @Dptelecom \u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt; local_version\n"
},
{
	"uri": "https://pirl.live/ipns/QmVKFJs81erni4KV6Hzt2xVwGtC2P1WtE9A4MxNThFVFVh/en/pirlcloud/cloudacess/overview/",
	"title": "How host/share content",
	"tags": [],
	"description": "",
	"content": " Introduction This Kb article will explain how to host content on PirlCloud. It will also explain how to share your content you have stored in PirlCloud.\nTo access PirlCloud you will need a Poseidon account.\n Go to Poseidon.pirl.io   Log into Poseidon. (make sure you use your username) Password. Click next.   Enter your 2Fa code Next   Drag and drop any files into this space. Once the files are uploaded they will appear in MY STORAGE Every file will be given HASH address. This address can be shared.  Author(s):\n@numnah\nContributor(s):\n"
},
{
	"uri": "https://pirl.live/ipns/QmVKFJs81erni4KV6Hzt2xVwGtC2P1WtE9A4MxNThFVFVh/en/getting-started/how-to-contribute/",
	"title": "How to Contribute",
	"tags": [],
	"description": "",
	"content": "The Pirl Docs website runs on the Hugo platform. To get started you have to clone the Gitlab linked on step 2.\n Download the latest version of Hugo binary (\u0026gt; 0.25) for your OS (Windows, Linux, Mac) Clone the pirl-docs repo frome here: Pirl-docs Run \u0026ldquo;hugo server\u0026rdquo; from within the site directory Use the Style Guide Use the Markdown Guide \u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt; HEAD The results will be nothing short of\u0026hellip; ======= The results will be nothing short of\u0026hellip;          local_version\n       Author(s): @Dptelecom\nContributor(s):\n"
},
{
	"uri": "https://pirl.live/ipns/QmVKFJs81erni4KV6Hzt2xVwGtC2P1WtE9A4MxNThFVFVh/en/press-releases/altlook/",
	"title": "In Depth Review by the Altlook",
	"tags": [],
	"description": "",
	"content": " \u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt; HEAD This browser does not support PDFs. Please download the PDF to view it: Download PDF.\n This browser does not support PDFs. Please download the PDF to view it: Download PDF.\n\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt; local_version  \nAuthor(s):\n@dptelecom\nContributor():\n\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt; HEAD        local_version\n       "
},
{
	"uri": "https://pirl.live/ipns/QmVKFJs81erni4KV6Hzt2xVwGtC2P1WtE9A4MxNThFVFVh/en/wallets/install-windows/",
	"title": "Nautilus Wallet Windows Installation",
	"tags": [],
	"description": "",
	"content": " \u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt; HEAD\n \u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt; local_version\nOverview. This guide will explain how to download, register, and backup your:\n\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt; HEAD\n \u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt; local_version\nPrerequisites. For granting the success of this operation, you will need these requirements:\n Internet connection Download here the Nautilus Wallet Downloads 10 Minutes of your time  Action!  As always, start with visiting our site and download your Nautilus \u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt; HEAD  Go for Windows version and wait till download will be done  Go into your download folder and locate the zipped folder Unzip downloaded folder  Dive in and find Nautilus Wallet application file and run the installation.  Allow this installation in your Windows defender (Windows10)  Allow Nautilus wallet to communicate in your network( but not at airports and stuff; for your safety)  When the installation begins, wait for download manager until he reaches the last Block. This will take a while.  Create your Account by entering your password  Repeat your password as a verification  Read Nautilus instructions and make a note for yourself to create a backup of your wallet later  That\u0026rsquo;s it my friend. You are in.  Don\u0026rsquo;t forget to backup your wallet. Its the only way how to restore your wallet. Go to File/Backup/Accounts and copy paste everything you find there into a safe place. You can USB Flash Drive or External HarDisk and keep it safe, offline and away of your computer =======  Go for Windows version and wait till download will be done  Go into your download folder and locate the zipped folder Unzip downloaded folder  Dive in and find Nautilus Wallet application file and run the installation.  Allow this installation in your Windows defender (Windows10)  Allow Nautilus wallet to communicate in your network( but not at airports and stuff; for your safety)  When the installation begins, wait for download manager until he reaches the last Block. This will take a while.  Create your Account by entering your password  Repeat your password as a verification  Read Nautilus instructions and make a note for yourself to create a backup of your wallet later  That\u0026rsquo;s it my friend. You are in.  Don\u0026rsquo;t forget to backup your wallet. Its the only way how to restore your wallet. Go to File/Backup/Accounts and copy paste everything you find there into a safe place. You can USB Flash Drive or External HarDisk and keep it safe, offline and away of your computer \u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt; local_version Go to File/Backup/Application data and do the same here.\nDone.  Author(s):\nTest.Object. 001 (Also know as Mickey Maler)\nContributor():\n@dptelecom\n"
},
{
	"uri": "https://pirl.live/ipns/QmVKFJs81erni4KV6Hzt2xVwGtC2P1WtE9A4MxNThFVFVh/en/pirlcloud/pirl-app/pirl-app-windows-instal/",
	"title": "PirlApp windows install",
	"tags": [],
	"description": "",
	"content": " \u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt; HEAD\n \u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt; local_version\nOverview. This guide will explain how to download, setup and register your:\n\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt; HEAD\n \u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt; local_version\nPrerequisites. For granting the success of this operation, you will need these requirements:\n Internet connection Download here the PirlApp for Windows Downloads Download here the PirlApp for MAC Downloads At least 0,25 PIRL (we will be sending 0,2 as an activation fee, required as a gas) at your Nautilus wallet, or any other wallet of your choice, even a wallet from exchange like Cryptopia.  Action!  GO to the location where you just downloaded installation package for PirlApp Unzip/Extract downloaded package to your desired destination \u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt; HEAD  Take a look into downloaded unzipped folder and Search for PirApp.exe  Create your account right on the first screen by writing down your Password  Confirm password by rewriting him once more time and hit Create button And Green Rectangle with an Key icon will pop up above an area where did you just put your password. Nice. This is your nameless Account  Click on the created account (don\u0026rsquo;t click on create button again) and fill down your Account name (For example \u0026ldquo;IamKing\u0026rdquo; or \u0026ldquo;Mickey\u0026rdquo;) and sign down by typing your Password again  If you write everything correctly, your account will be registered by your account name, but a red warning label will pop up in the lower section of your screen. Don\u0026rsquo;t worry, its ok. This error only lets you know that you have no funds in your app and you are low on gas, which is a need for successful running  Click on the Copy Address button right next to your created account or highlight it with Left mouse slide and use CTRL+C  Go into your Nautilus wallet (or any wallet you have some Pirl loaded in) and do a \u0026ldquo;registration\u0026rdquo; micro transaction  Manage to send PIRL into your wallet. I will show you how to do it from Nautilus Pirl Wallet. If you are in; hit Send  Use address you have copied for sending 0,2 PIRL from your Nautilus(or any) wallet into your PirlApp. Generate transaction and Send  Check if it is everything all right in your books and confirm with your password  Everything will be done in a few minutes, so take a break and relax for a while in your chair  * \u0026hellip;3 minutes later and few blocks higher\u0026hellip; * Yes, right now you can go to your PirlApp and Get in  Enter your Account and write down the Login name and password. Hit the Register button  Congratulation, you have just joined the future. Enjoy PirlTube and all that nasty stuff from PIRL which will be knocking on your browser soon!\n  Take a look into downloaded unzipped folder and Search for PirApp.exe  Create your account right on the first screen by writing down your Password  Confirm password by rewriting him once more time and hit Create button\n And Green Rectangle with an Key icon will pop up above an area where did you just put your password. Nice. This is your nameless Account  Click on the created account (don\u0026rsquo;t click on create button again) and fill down your Account name (For example \u0026ldquo;IamKing\u0026rdquo; or \u0026ldquo;Mickey\u0026rdquo;) and sign down by typing your Password again  If you write everything correctly, your account will be registered by your account name, but a red warning label will pop up in the lower section of your screen. Don\u0026rsquo;t worry, its ok. This error only lets you know that you have no funds in your app and you are low on gas, which is a need for successful running  Click on the Copy Address button right next to your created account or highlight it with Left mouse slide and use CTRL+C  Go into your Nautilus wallet (or any wallet you have some Pirl loaded in) and do a \u0026ldquo;registration\u0026rdquo; micro transaction  Manage to send PIRL into your wallet. I will show you how to do it from Nautilus Pirl Wallet. If you are in; hit Send  Use address you have copied for sending 0,2 PIRL from your Nautilus(or any) wallet into your PirlApp. Generate transaction and Send  Check if it is everything all right in your books and confirm with your password  Everything will be done in a few minutes, so take a break and relax for a while in your chair  * \u0026hellip;3 minutes later and few blocks higher\u0026hellip; * Yes, right now you can go to your PirlApp and Get in  Enter your Account and write down the Login name and password. Hit the Register button  Congratulation, you have just joined the future. Enjoy PirlTube and all that nasty stuff from PIRL which will be knocking on your browser soon! \u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt; local_version\n  Author(s):\nTest.Object. 001 (Also know as Mickey Maler)\nContributor():\n@dptelecom\n"
},
{
	"uri": "https://pirl.live/ipns/QmVKFJs81erni4KV6Hzt2xVwGtC2P1WtE9A4MxNThFVFVh/en/pirlcloud/poseidon/",
	"title": "Poseidon",
	"tags": [],
	"description": "",
	"content": " \u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt; HEAD\n \u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt; local_version\nThe whole new Poseidon V2 Poseidon is a unique all-in-one platform,\nwhere, with a single point of entry,\na user can gain access to many of Pirl unique features and capabilities.\nPoseidon will grant users access to:\n• Blockchain Explorer\n• Masternodes Control Panel\n• 1-click Masternode installation\n• Poseidon Wallet\n• PirlCloud\n• PirlMarket\n• PirlPay\n• And More\nPoseidon.\nPoseidon Development.\n1.) Overview 2.) Register 3.) First Login and setup Two-factor authentication 4.) Poseidon unique all-in-one platform 10.) Poseidon changelog Author(s):\n@Dptelecom\nContributor(s):\n"
},
{
	"uri": "https://pirl.live/ipns/QmVKFJs81erni4KV6Hzt2xVwGtC2P1WtE9A4MxNThFVFVh/en/pirlcloud/poseidon/overview/",
	"title": "Poseidon overview",
	"tags": [],
	"description": "",
	"content": " \u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt; HEAD\n \u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt; local_version\nPoseidon starting page. On the first page of Poseidon we see a nice overview of all the running Masternodes, And the rewards they are making, and an overview about the locations where they are:\n\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt; HEAD\n \u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt; local_version\nPoseidon register for an account. If you look at the left side of the page you see the option to register for an account, or login to your account if you already got one:\n\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt; HEAD\n \u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt; local_version\nGo ahead to the next page to see how you create an account: next page Register\nOr ahead to the this page to see how you login the first time to account and setup the Two-factor authentication: First Login and setup Two-factor authentication\nAuthor(s):\n@Dptelecom\nContributor(s): \u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt; HEAD\n======= \u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt; local_version\n"
},
{
	"uri": "https://pirl.live/ipns/QmVKFJs81erni4KV6Hzt2xVwGtC2P1WtE9A4MxNThFVFVh/en/pirlcloud/masternodes/premium-masternodes/",
	"title": "Premium Masternodes",
	"tags": [],
	"description": "",
	"content": " \u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt; HEAD  \u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt; local_version\nPremium Masternodes Premium Masternodes are the top-tier masternodes in the ecosystem. They provide network security by storing the blockchain data and relaying transaction in the blockchain as well as serving as content and storage masternodes. The premium masternodes will be additionally rewarded with % of the fees of Poseidon platform.\n1.) Setup Pirl Masternode Using Nautilus Wallet and OneClick (Recommended) 2.) Disabling Masternode and Retrieving Stake Author(s): @Dptelecom\nContributor(s):\n"
},
{
	"uri": "https://pirl.live/ipns/QmVKFJs81erni4KV6Hzt2xVwGtC2P1WtE9A4MxNThFVFVh/en/pirlcloud/masternodes/content-masternodes/setup-pirl-masternode-using-nautilus-wallet-and-oneclick-recommended/",
	"title": "Setup Content Masternode",
	"tags": [],
	"description": "",
	"content": " \u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt; HEAD\n \u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt; local_version\n Overview Prerequisites Poseidon Wallet Identity Verification Nautilus Contract Execution Create/Launch CentOS Linux server Create Masternode in Poseidon One-Click Masternode Setup Monitoring  Overview Running a PIRL masternode requires the use of a Virtual Private Server (VPS) with a static public IP address directly assigned to an interface.\nNAT (address translation) is not supported. And only have pirl running on the server, no other nodes or whatever cause it will cause conflict!!\nOnce you have the funds in place, you send a small 1 PIRL transaction to your Poseidon wallet (your account will come with a wallet) to prove that you control the Nautilus wallet with the 10K PIRL capital for Content MN.\nYou use the txid from the 1 PIRL transaction as part of the masternode setup, along with your Nautilus address. When the masternode is added, you go back to your Nautilus wallet and add the masternode contract address in the “contracts” tab.\nWith the masternode contract address in place, you execute the node registration function.\nAt this point you can utilize the Poseidon one-click functionality which will automatically setup your server and keep it updated.\nThis guide uses the one-click-masternode setup feature. This Poseidon feature automatically configures your CentOS 7 linux server to be a Pirl Masternode. Updates will be applied automatically. All you have to do is monitor your server to ensure it stays operational. This is as simple as rebooting the server, should it go offline.\nPrerequisites  A VPS with minimum 4GB Total OS RAM minimum (more is recommended), enough storage to run the masternode (Minimum 20GB, Recommended 60GB+), and a static public IP address directly assigned to an interface. NAT (address translation) is not supported.  The official MINIMUM requirements are: 4GB RAM, 20GB space, 3TB transfer, public IPv4 IP. Once you order your VPS, you will receive its root credentials. The easiest path forward is to only use this VPS for your Pirl Masternode and give Poseidon your root credentials so it can manage and update your VPS.  A Poseidon account on https://poseidon.pirl.io  Navigate over to https://poseidon.pirl.io and register for an account. Keep in mind that you will be logging in with your username and not email.  Nautilus wallet  Nautilus is the official desktop wallet for Pirl. You will need it in order to add and execute “Register Node” from the smart contract needed to run the Pirl masternode. You can use the desktop wallet to create your Pirl wallet Downloads Nautilus or you can use the web wallet at: https://wallet.pirl.io/.\n Whichever method you choose to create your wallet, always make sure you save your UTC file, the password needed to decrypt the UTC file as well as your private key.\n You can use your Nautilus created UTC file and password to extract your private key.\n You can use your private key instead of the UTC file + Password to access your wallet and withdraw your funds in case of an emergency.  10,001 Pirl available in your wallet for Content MN  There’s no getting around it, you will need to somehow get ten thousand PIRL into a wallet. And 1 or 0,5 for gas to interact with the contract. You can mine Pirl by using one of the official pools available here: https://pirl.io/en/pools/. You can also buy Pirl on one of the Pirl exchanges. I recommend https://www.stex.com as a safe and reliable exchange.   Poseidon Wallet Identity Verification The first step in the masternode setup process is to send a transaction from your Nautilus wallet (you can also use the web wallet here if needed) to your Poseidon wallet located here: https://poseidon.pirl.io/dashboard/accounting/wallet/.\nThis is just like sending Pirl to any other wallet, except in this case it’s your unique Poseidon wallet.\nWhat this does is it proves to Poseidon that you control your Nautilus wallet. Do not send anymore then 1 or .5 pirl to this address for verfication, this is not the address you will send the 10k pirls to. that comes later.\nNavigate over to https://poseidon.pirl.io/ and paste your Nautilus wallet address at the top.\nThis will show all transactions in and out of your Nautilus wallet.\nThe latest outgoing transaction will show that it’s going into the address of your Poseidon wallet.\nTo the very left of the page, the txid (i.e. transaction hash) will be displayed.\nOr In the nautilus wallet you click once on the sent transaction and you see this Tx-id: Take and safe this txid and copy it because you’ll need it later.\nVERY IMPORTANT: There are 2 hashes for every transaction.\nThere is the transaction hash (txid) and the block hash.\nYou need to use the transaction hash (txid) for the masternode setup process to work.\nThere’s a very easy way to know which one is the txid.\nThe txid is on the left side of the general transaction list of your wallet.\nOnce you click on the txid itself, you will see the block hash displayed.\no not use the block hash.\nUse the txid on the left most side of your wallet transaction list on Poseidon\nIn the nautilus wallet you click once on the sent transaction and you see this Tx-id:\n\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt; HEAD\n \u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt; local_version\nNautilus Contract Execution Now that we have the hardest part out of the way, let’s move on Nautilus and adding the Pirl Masternode contract.\nOpen Nautilus and navigate to the Contract tab located at the top right corner.\nOnce there, click on the Watch Contract button.\nThere are two contracts 1 for each type of node, the JSON is for all the Masternodes the same\nContent MN: For Contract Address fill in 0x6c042141C302C354509d2bff30EEFDEF24dE1047. The Contract Name contract name for this is content even though it can be anything you’d like.\nAnd lastly, the JSON Interface field needs to be populated with:\n[{\u0026quot;constant\u0026quot;:false,\u0026quot;inputs\u0026quot;:[],\u0026quot;name\u0026quot;:\u0026quot;nodeRegistration\u0026quot;,\u0026quot;outputs\u0026quot;:[{\u0026quot;name\u0026quot;:\u0026quot;paid\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;bool\u0026quot;}],\u0026quot;payable\u0026quot;:true,\u0026quot;stateMutability\u0026quot;:\u0026quot;payable\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;function\u0026quot;},{\u0026quot;constant\u0026quot;:true,\u0026quot;inputs\u0026quot;:[{\u0026quot;name\u0026quot;:\u0026quot;_pirlAddress\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;address\u0026quot;}],\u0026quot;name\u0026quot;:\u0026quot;getNodeAddress\u0026quot;,\u0026quot;outputs\u0026quot;:[{\u0026quot;name\u0026quot;:\u0026quot;\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;address\u0026quot;}],\u0026quot;payable\u0026quot;:false,\u0026quot;stateMutability\u0026quot;:\u0026quot;view\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;function\u0026quot;},{\u0026quot;constant\u0026quot;:true,\u0026quot;inputs\u0026quot;:[{\u0026quot;name\u0026quot;:\u0026quot;\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;address\u0026quot;}],\u0026quot;name\u0026quot;:\u0026quot;moderators\u0026quot;,\u0026quot;outputs\u0026quot;:[{\u0026quot;name\u0026quot;:\u0026quot;\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;bool\u0026quot;}],\u0026quot;payable\u0026quot;:false,\u0026quot;stateMutability\u0026quot;:\u0026quot;view\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;function\u0026quot;},{\u0026quot;constant\u0026quot;:true,\u0026quot;inputs\u0026quot;:[{\u0026quot;name\u0026quot;:\u0026quot;\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;address\u0026quot;}],\u0026quot;name\u0026quot;:\u0026quot;nodes\u0026quot;,\u0026quot;outputs\u0026quot;:[{\u0026quot;name\u0026quot;:\u0026quot;pirlAddress\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;address\u0026quot;},{\u0026quot;name\u0026quot;:\u0026quot;nodeStake\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;uint256\u0026quot;},{\u0026quot;name\u0026quot;:\u0026quot;nodeHash\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;bytes20\u0026quot;},{\u0026quot;name\u0026quot;:\u0026quot;stakeLocked\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;bool\u0026quot;},{\u0026quot;name\u0026quot;:\u0026quot;nodeEnabled\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;bool\u0026quot;}],\u0026quot;payable\u0026quot;:false,\u0026quot;stateMutability\u0026quot;:\u0026quot;view\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;function\u0026quot;},{\u0026quot;constant\u0026quot;:false,\u0026quot;inputs\u0026quot;:[],\u0026quot;name\u0026quot;:\u0026quot;disableNodeRegistration\u0026quot;,\u0026quot;outputs\u0026quot;:[{\u0026quot;name\u0026quot;:\u0026quot;disabled\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;bool\u0026quot;}],\u0026quot;payable\u0026quot;:false,\u0026quot;stateMutability\u0026quot;:\u0026quot;nonpayable\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;function\u0026quot;},{\u0026quot;constant\u0026quot;:true,\u0026quot;inputs\u0026quot;:[],\u0026quot;name\u0026quot;:\u0026quot;nodeCost\u0026quot;,\u0026quot;outputs\u0026quot;:[{\u0026quot;name\u0026quot;:\u0026quot;\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;uint256\u0026quot;}],\u0026quot;payable\u0026quot;:false,\u0026quot;stateMutability\u0026quot;:\u0026quot;view\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;function\u0026quot;},{\u0026quot;constant\u0026quot;:true,\u0026quot;inputs\u0026quot;:[{\u0026quot;name\u0026quot;:\u0026quot;_pirlAddress\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;address\u0026quot;}],\u0026quot;name\u0026quot;:\u0026quot;getStakeLockedStatus\u0026quot;,\u0026quot;outputs\u0026quot;:[{\u0026quot;name\u0026quot;:\u0026quot;\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;bool\u0026quot;}],\u0026quot;payable\u0026quot;:false,\u0026quot;stateMutability\u0026quot;:\u0026quot;view\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;function\u0026quot;},{\u0026quot;constant\u0026quot;:true,\u0026quot;inputs\u0026quot;:[],\u0026quot;name\u0026quot;:\u0026quot;nodeCount\u0026quot;,\u0026quot;outputs\u0026quot;:[{\u0026quot;name\u0026quot;:\u0026quot;\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;uint256\u0026quot;}],\u0026quot;payable\u0026quot;:false,\u0026quot;stateMutability\u0026quot;:\u0026quot;view\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;function\u0026quot;},{\u0026quot;constant\u0026quot;:false,\u0026quot;inputs\u0026quot;:[{\u0026quot;name\u0026quot;:\u0026quot;_admin\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;address\u0026quot;}],\u0026quot;name\u0026quot;:\u0026quot;setAdmin\u0026quot;,\u0026quot;outputs\u0026quot;:[{\u0026quot;name\u0026quot;:\u0026quot;set\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;bool\u0026quot;}],\u0026quot;payable\u0026quot;:false,\u0026quot;stateMutability\u0026quot;:\u0026quot;nonpayable\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;function\u0026quot;},{\u0026quot;constant\u0026quot;:true,\u0026quot;inputs\u0026quot;:[],\u0026quot;name\u0026quot;:\u0026quot;owner\u0026quot;,\u0026quot;outputs\u0026quot;:[{\u0026quot;name\u0026quot;:\u0026quot;\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;address\u0026quot;}],\u0026quot;payable\u0026quot;:false,\u0026quot;stateMutability\u0026quot;:\u0026quot;view\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;function\u0026quot;},{\u0026quot;constant\u0026quot;:false,\u0026quot;inputs\u0026quot;:[],\u0026quot;name\u0026quot;:\u0026quot;enableNode\u0026quot;,\u0026quot;outputs\u0026quot;:[{\u0026quot;name\u0026quot;:\u0026quot;enabled\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;bool\u0026quot;}],\u0026quot;payable\u0026quot;:false,\u0026quot;stateMutability\u0026quot;:\u0026quot;nonpayable\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;function\u0026quot;},{\u0026quot;constant\u0026quot;:true,\u0026quot;inputs\u0026quot;:[],\u0026quot;name\u0026quot;:\u0026quot;nodeRegistrationEnabled\u0026quot;,\u0026quot;outputs\u0026quot;:[{\u0026quot;name\u0026quot;:\u0026quot;\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;bool\u0026quot;}],\u0026quot;payable\u0026quot;:false,\u0026quot;stateMutability\u0026quot;:\u0026quot;view\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;function\u0026quot;},{\u0026quot;constant\u0026quot;:false,\u0026quot;inputs\u0026quot;:[],\u0026quot;name\u0026quot;:\u0026quot;disableNode\u0026quot;,\u0026quot;outputs\u0026quot;:[{\u0026quot;name\u0026quot;:\u0026quot;disabled\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;bool\u0026quot;}],\u0026quot;payable\u0026quot;:false,\u0026quot;stateMutability\u0026quot;:\u0026quot;nonpayable\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;function\u0026quot;},{\u0026quot;constant\u0026quot;:false,\u0026quot;inputs\u0026quot;:[],\u0026quot;name\u0026quot;:\u0026quot;withdrawStake\u0026quot;,\u0026quot;outputs\u0026quot;:[{\u0026quot;name\u0026quot;:\u0026quot;withdrawn\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;bool\u0026quot;}],\u0026quot;payable\u0026quot;:false,\u0026quot;stateMutability\u0026quot;:\u0026quot;nonpayable\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;function\u0026quot;},{\u0026quot;constant\u0026quot;:true,\u0026quot;inputs\u0026quot;:[{\u0026quot;name\u0026quot;:\u0026quot;\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;uint256\u0026quot;}],\u0026quot;name\u0026quot;:\u0026quot;nodeAddresses\u0026quot;,\u0026quot;outputs\u0026quot;:[{\u0026quot;name\u0026quot;:\u0026quot;\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;address\u0026quot;}],\u0026quot;payable\u0026quot;:false,\u0026quot;stateMutability\u0026quot;:\u0026quot;view\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;function\u0026quot;},{\u0026quot;constant\u0026quot;:true,\u0026quot;inputs\u0026quot;:[{\u0026quot;name\u0026quot;:\u0026quot;_pirlAddress\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;address\u0026quot;}],\u0026quot;name\u0026quot;:\u0026quot;getNodeEnabledStatus\u0026quot;,\u0026quot;outputs\u0026quot;:[{\u0026quot;name\u0026quot;:\u0026quot;\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;bool\u0026quot;}],\u0026quot;payable\u0026quot;:false,\u0026quot;stateMutability\u0026quot;:\u0026quot;view\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;function\u0026quot;},{\u0026quot;constant\u0026quot;:true,\u0026quot;inputs\u0026quot;:[{\u0026quot;name\u0026quot;:\u0026quot;_pirlAddress\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;address\u0026quot;}],\u0026quot;name\u0026quot;:\u0026quot;getNodeStake\u0026quot;,\u0026quot;outputs\u0026quot;:[{\u0026quot;name\u0026quot;:\u0026quot;\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;uint256\u0026quot;}],\u0026quot;payable\u0026quot;:false,\u0026quot;stateMutability\u0026quot;:\u0026quot;view\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;function\u0026quot;},{\u0026quot;constant\u0026quot;:false,\u0026quot;inputs\u0026quot;:[],\u0026quot;name\u0026quot;:\u0026quot;enableNodeRegistration\u0026quot;,\u0026quot;outputs\u0026quot;:[{\u0026quot;name\u0026quot;:\u0026quot;enabled\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;bool\u0026quot;}],\u0026quot;payable\u0026quot;:false,\u0026quot;stateMutability\u0026quot;:\u0026quot;nonpayable\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;function\u0026quot;},{\u0026quot;constant\u0026quot;:true,\u0026quot;inputs\u0026quot;:[{\u0026quot;name\u0026quot;:\u0026quot;_pirlAddress\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;address\u0026quot;}],\u0026quot;name\u0026quot;:\u0026quot;getNodeHash\u0026quot;,\u0026quot;outputs\u0026quot;:[{\u0026quot;name\u0026quot;:\u0026quot;\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;bytes20\u0026quot;}],\u0026quot;payable\u0026quot;:false,\u0026quot;stateMutability\u0026quot;:\u0026quot;view\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;function\u0026quot;},{\u0026quot;constant\u0026quot;:true,\u0026quot;inputs\u0026quot;:[],\u0026quot;name\u0026quot;:\u0026quot;nodeFee\u0026quot;,\u0026quot;outputs\u0026quot;:[{\u0026quot;name\u0026quot;:\u0026quot;\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;uint256\u0026quot;}],\u0026quot;payable\u0026quot;:false,\u0026quot;stateMutability\u0026quot;:\u0026quot;view\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;function\u0026quot;},{\u0026quot;constant\u0026quot;:true,\u0026quot;inputs\u0026quot;:[],\u0026quot;name\u0026quot;:\u0026quot;admin\u0026quot;,\u0026quot;outputs\u0026quot;:[{\u0026quot;name\u0026quot;:\u0026quot;\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;address\u0026quot;}],\u0026quot;payable\u0026quot;:false,\u0026quot;stateMutability\u0026quot;:\u0026quot;view\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;function\u0026quot;},{\u0026quot;inputs\u0026quot;:[],\u0026quot;payable\u0026quot;:false,\u0026quot;stateMutability\u0026quot;:\u0026quot;nonpayable\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;constructor\u0026quot;},{\u0026quot;payable\u0026quot;:true,\u0026quot;stateMutability\u0026quot;:\u0026quot;payable\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;fallback\u0026quot;},{\u0026quot;anonymous\u0026quot;:false,\u0026quot;inputs\u0026quot;:[{\u0026quot;indexed\u0026quot;:true,\u0026quot;name\u0026quot;:\u0026quot;_pirlAddress\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;address\u0026quot;},{\u0026quot;indexed\u0026quot;:true,\u0026quot;name\u0026quot;:\u0026quot;_nodeHash\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;bytes20\u0026quot;},{\u0026quot;indexed\u0026quot;:true,\u0026quot;name\u0026quot;:\u0026quot;_nodeRegistered\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;bool\u0026quot;},{\u0026quot;indexed\u0026quot;:false,\u0026quot;name\u0026quot;:\u0026quot;_dateRegistered\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;uint256\u0026quot;}],\u0026quot;name\u0026quot;:\u0026quot;MasterNodeRegistered\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;event\u0026quot;},{\u0026quot;anonymous\u0026quot;:false,\u0026quot;inputs\u0026quot;:[{\u0026quot;indexed\u0026quot;:true,\u0026quot;name\u0026quot;:\u0026quot;_pirlAddress\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;address\u0026quot;},{\u0026quot;indexed\u0026quot;:true,\u0026quot;name\u0026quot;:\u0026quot;_nodeHash\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;bytes20\u0026quot;},{\u0026quot;indexed\u0026quot;:true,\u0026quot;name\u0026quot;:\u0026quot;_nodeDisabled\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;bool\u0026quot;},{\u0026quot;indexed\u0026quot;:false,\u0026quot;name\u0026quot;:\u0026quot;_dateDisabled\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;uint256\u0026quot;}],\u0026quot;name\u0026quot;:\u0026quot;MasterNodeDisabled\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;event\u0026quot;},{\u0026quot;anonymous\u0026quot;:false,\u0026quot;inputs\u0026quot;:[{\u0026quot;indexed\u0026quot;:true,\u0026quot;name\u0026quot;:\u0026quot;_pirlAddress\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;address\u0026quot;},{\u0026quot;indexed\u0026quot;:true,\u0026quot;name\u0026quot;:\u0026quot;_nodeHash\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;bytes20\u0026quot;},{\u0026quot;indexed\u0026quot;:true,\u0026quot;name\u0026quot;:\u0026quot;_nodeEnabled\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;bool\u0026quot;},{\u0026quot;indexed\u0026quot;:false,\u0026quot;name\u0026quot;:\u0026quot;_dateEnabled\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;uint256\u0026quot;}],\u0026quot;name\u0026quot;:\u0026quot;MasterNodeEnabled\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;event\u0026quot;},{\u0026quot;anonymous\u0026quot;:false,\u0026quot;inputs\u0026quot;:[{\u0026quot;indexed\u0026quot;:true,\u0026quot;name\u0026quot;:\u0026quot;_pirlAddress\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;address\u0026quot;},{\u0026quot;indexed\u0026quot;:true,\u0026quot;name\u0026quot;:\u0026quot;_nodeHash\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;bytes20\u0026quot;},{\u0026quot;indexed\u0026quot;:true,\u0026quot;name\u0026quot;:\u0026quot;_nodePaid\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;bool\u0026quot;},{\u0026quot;indexed\u0026quot;:false,\u0026quot;name\u0026quot;:\u0026quot;_datePaid\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;uint256\u0026quot;}],\u0026quot;name\u0026quot;:\u0026quot;MasterNodeRewarded\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;event\u0026quot;},{\u0026quot;anonymous\u0026quot;:false,\u0026quot;inputs\u0026quot;:[{\u0026quot;indexed\u0026quot;:true,\u0026quot;name\u0026quot;:\u0026quot;_pirlAddress\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;address\u0026quot;},{\u0026quot;indexed\u0026quot;:true,\u0026quot;name\u0026quot;:\u0026quot;_nodeHash\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;bytes20\u0026quot;},{\u0026quot;indexed\u0026quot;:true,\u0026quot;name\u0026quot;:\u0026quot;_stakeWithdrawn\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;bool\u0026quot;},{\u0026quot;indexed\u0026quot;:false,\u0026quot;name\u0026quot;:\u0026quot;_dateWithdrawn\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;uint256\u0026quot;}],\u0026quot;name\u0026quot;:\u0026quot;StakeWithdrawn\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;event\u0026quot;},{\u0026quot;anonymous\u0026quot;:false,\u0026quot;inputs\u0026quot;:[{\u0026quot;indexed\u0026quot;:true,\u0026quot;name\u0026quot;:\u0026quot;_invoker\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;address\u0026quot;},{\u0026quot;indexed\u0026quot;:false,\u0026quot;name\u0026quot;:\u0026quot;_dateEnabled\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;uint256\u0026quot;},{\u0026quot;indexed\u0026quot;:true,\u0026quot;name\u0026quot;:\u0026quot;_registrationEnabled\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;bool\u0026quot;}],\u0026quot;name\u0026quot;:\u0026quot;MasterNodeRegistrationEnabled\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;event\u0026quot;},{\u0026quot;anonymous\u0026quot;:false,\u0026quot;inputs\u0026quot;:[{\u0026quot;indexed\u0026quot;:true,\u0026quot;name\u0026quot;:\u0026quot;_invoker\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;address\u0026quot;},{\u0026quot;indexed\u0026quot;:false,\u0026quot;name\u0026quot;:\u0026quot;_dateDisabled\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;uint256\u0026quot;},{\u0026quot;indexed\u0026quot;:true,\u0026quot;name\u0026quot;:\u0026quot;_registrationDisabled\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;bool\u0026quot;}],\u0026quot;name\u0026quot;:\u0026quot;MasterNodeRegistrationDisabled\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;event\u0026quot;},{\u0026quot;anonymous\u0026quot;:false,\u0026quot;inputs\u0026quot;:[{\u0026quot;indexed\u0026quot;:true,\u0026quot;name\u0026quot;:\u0026quot;_invoker\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;address\u0026quot;},{\u0026quot;indexed\u0026quot;:true,\u0026quot;name\u0026quot;:\u0026quot;_admin\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;address\u0026quot;},{\u0026quot;indexed\u0026quot;:true,\u0026quot;name\u0026quot;:\u0026quot;_adminSet\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;bool\u0026quot;}],\u0026quot;name\u0026quot;:\u0026quot;SetAdmin\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;event\u0026quot;},{\u0026quot;anonymous\u0026quot;:false,\u0026quot;inputs\u0026quot;:[{\u0026quot;indexed\u0026quot;:true,\u0026quot;name\u0026quot;:\u0026quot;_invoker\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;address\u0026quot;},{\u0026quot;indexed\u0026quot;:true,\u0026quot;name\u0026quot;:\u0026quot;_newOwner\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;address\u0026quot;},{\u0026quot;indexed\u0026quot;:true,\u0026quot;name\u0026quot;:\u0026quot;_ownerChanged\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;bool\u0026quot;}],\u0026quot;name\u0026quot;:\u0026quot;TransferOwnership\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;event\u0026quot;}]  Select the newly address Masternode contract and you will see available functions for it as a dropdown menu on the right side under the Write to Contract heading. Under available functions select Node Registration and select the wallet containing your 10,000 Pirl for Content MN. Underneath that, fill in 10,000 Pirl for Content MN to send the stake to the contract.\n\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt; HEAD\n \u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt; local_version\nOnce you hit execute, fill in your UTC file password and make sure you’re providing at least 121,000 gas for the transaction.\nThis is a good time to get some coffee or tea and let everything sync. 3-5 minutes should do the trick.\nCreate/Launch CentOS Linux server Verify that the server meets the appropriate specifications as noted in the Pirl Masternode Setup Tutorial\nThe server must run the CentOS 7 Linux distribution if you plan to use the One-Click Masternode Setup.\nRecord of the static public IP address of the server as well as the root password. We do recommend logging into that server once to ensure the root credentials work. It is not necessary to take any other actions on the server after that. In fact, it\u0026rsquo;s preferred that you don\u0026rsquo;t make any other adjustments, at all.\nCreate Masternode in Poseidon Login to Poseidon and navigate to the page which adds a masternode located here:\nhttps://poseidon.pirl.io/dashboard/masternodes/\nand hit the:\n\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt; HEAD\n \u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt; local_version\nthen you get this nice popup screen:\n\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt; HEAD\n \u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt; local_version\nThe Name can be anything you’d like.\nThe Masternode Wallet id is the address of your Nautilus wallet, the one which contains 10,000 Pirl at present.\nAnd, remember, the Tx hash validation field needs the txid (not block hash, see above!) of the transaction you send to your Poseidon wallet.\nOn the bottom of the screenshot above, you will have to select that the MN is Content (10K stake)\nHit Save changes and then you will see the next screen.\n\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt; HEAD\n \u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt; local_version\nOne-Click Masternode Setup Ensure that you know the public static IP address and root credentials before proceeding.\n\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt; HEAD\n \u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt; local_version\nwe go and complete all fields. ssh default is port: 22 Hit Save changes and then you will see the next screen.\n\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt; HEAD After returning to the My Masternodes screen, observe that the masternode\u0026rsquo;s Managed by Poseidon field is set to True\n After returning to the My Masternodes screen, observe that the masternode\u0026rsquo;s Managed by Poseidon field is set to True\n\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt; local_version\nPlease allow 30 minutes for the process to complete. You may click the details button to monitor the status.\nWatch the masternode process synchronize with the blockchain:\njournalctl -f  Once messages like the following are displayed, your masternode is now synchronized and contributing to the network.\n\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt; HEAD\n \u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt; local_version\nMonitoring We don\u0026rsquo;t encourage active access on the server. If, however, you wish to check the status, log into your server and issue the following command:\njournalctl -f  your masternode is contributing to the network if it looks like this:.\n\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt; HEAD\n \u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt; local_version\nMonitor the status of your masternode by checking the Poseidon Masternode Details page by clicking on the 🔍.\nA functioning node should appear as follows:\n\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt; HEAD\n \u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt; local_version\nAuthor(s):\nThe Pirl Team\nContributor(s):\n@Dptelecom\n"
},
{
	"uri": "https://pirl.live/ipns/QmVKFJs81erni4KV6Hzt2xVwGtC2P1WtE9A4MxNThFVFVh/en/pirlcloud/masternodes/premium-masternodes/setup-pirl-masternode-using-nautilus-wallet-and-oneclick-recommended/",
	"title": "Setup Premium Masternode",
	"tags": [],
	"description": "",
	"content": " \u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt; HEAD\n \u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt; local_version\n Overview Prerequisites Poseidon Wallet Identity Verification Nautilus Contract Execution Create/Launch CentOS Linux server Create Masternode in Poseidon One-Click Masternode Setup Monitoring  Overview Running a PIRL masternode requires the use of a Virtual Private Server (VPS) with a static public IP address directly assigned to an interface.\nNAT (address translation) is not supported.\nAnd only have pirl running on the server, no other nodes or whatever cause it will cause conflict!!\nOnce you have the funds in place, you send a small 1 PIRL transaction to your Poseidon wallet (your account will come with a wallet) to prove that you control the Nautilus wallet with the 20K PIRL capital for Premium MN.\nYou use the txid from the 1 PIRL transaction as part of the masternode setup, along with your Nautilus address. When the masternode is added, you go back to your Nautilus wallet and add the masternode contract address in the “contracts” tab.\nWith the masternode contract address in place, you execute the node registration function.\nAt this point you can utilize the Poseidon one-click functionality which will automatically setup your server and keep it updated.\nThis guide uses the one-click-masternode setup feature. This Poseidon feature automatically configures your CentOS 7 linux server to be a Pirl Masternode. Updates will be applied automatically. All you have to do is monitor your server to ensure it stays operational. This is as simple as rebooting the server, should it go offline.\nPrerequisites  A VPS with minimum 4GB Total OS RAM minimum (more is recommended), enough storage to run the masternode (Minimum 20GB, Recommended 60GB+), and a static public IP address directly assigned to an interface. NAT (address translation) is not supported.  The official MINIMUM requirements are: 4GB RAM, 20GB space, 3TB transfer, public IPv4 IP. Once you order your VPS, you will receive its root credentials. The easiest path forward is to only use this VPS for your Pirl Masternode and give Poseidon your root credentials so it can manage and update your VPS.  A Poseidon account on https://poseidon.pirl.io  Navigate over to https://poseidon.pirl.io and register for an account. Keep in mind that you will be logging in with your username and not email.  Nautilus wallet  Nautilus is the official desktop wallet for Pirl. You will need it in order to add and execute “Register Node” from the smart contract needed to run the Pirl masternode. You can use the desktop wallet to create your Pirl wallet Downloads Nautilus or you can use the web wallet at: https://wallet.pirl.io/.\n Whichever method you choose to create your wallet, always make sure you save your UTC file, the password needed to decrypt the UTC file as well as your private key.\n You can use your Nautilus created UTC file and password to extract your private key.\n You can use your private key instead of the UTC file + Password to access your wallet and withdraw your funds in case of an emergency.  20,001 Pirl available in your wallet for Premium MN  There’s no getting around it, you will need to somehow get twenty thousand PIRL into a wallet. And 1 or 0,5 for gas to interact with the contract. You can mine Pirl by using one of the official pools available here: https://pirl.io/en/pools/. You can also buy Pirl on one of the Pirl exchanges. I recommend https://www.stex.com as a safe and reliable exchange.   Poseidon Wallet Identity Verification The first step in the masternode setup process is to send a transaction from your Nautilus wallet (you can also use the web wallet here if needed) to your Poseidon wallet located here: https://poseidon.pirl.io/dashboard/accounting/wallet/.\nThis is just like sending Pirl to any other wallet, except in this case it’s your unique Poseidon wallet.\nWhat this does is it proves to Poseidon that you control your Nautilus wallet. Do not send anymore then 1 or .5 pirl to this address for verfication, this is not the address you will send the 20k pirls to. that comes later.\nNavigate over to https://poseidon.pirl.io/ and paste your Nautilus wallet address at the top.\nThis will show all transactions in and out of your Nautilus wallet.\nThe latest outgoing transaction will show that it’s going into the address of your Poseidon wallet.\nTo the very left of the page, the txid (i.e. transaction hash) will be displayed.\nOr In the nautilus wallet you click once on the sent transaction and you see this Tx-id: Take and safe this txid and copy it because you’ll need it later.\nVERY IMPORTANT: There are 2 hashes for every transaction.\nThere is the transaction hash (txid) and the block hash.\nYou need to use the transaction hash (txid) for the masternode setup process to work.\nThere’s a very easy way to know which one is the txid.\nThe txid is on the left side of the general transaction list of your wallet.\nOnce you click on the txid itself, you will see the block hash displayed.\no not use the block hash.\nUse the txid on the left most side of your wallet transaction list on Poseidon\nIn the nautilus wallet you click once on the sent transaction and you see this Tx-id:\n\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt; HEAD\n \u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt; local_version\nNautilus Contract Execution Now that we have the hardest part out of the way, let’s move on Nautilus and adding the Pirl Masternode contract.\nOpen Nautilus and navigate to the Contract tab located at the top right corner.\nOnce there, click on the Watch Contract button.\nThere are two contracts 1 for each type of node, the JSON is for all the Masternodes the same\nPremium MN: For Contract Address fill in 0x256b2b26Fe8eCAd201103946F8C603b401cE16EC. The Contract Name contract name for this is premium even though it can be anything you’d like.\nAnd lastly, the JSON Interface field needs to be populated with:\n[{\u0026quot;constant\u0026quot;:false,\u0026quot;inputs\u0026quot;:[],\u0026quot;name\u0026quot;:\u0026quot;nodeRegistration\u0026quot;,\u0026quot;outputs\u0026quot;:[{\u0026quot;name\u0026quot;:\u0026quot;paid\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;bool\u0026quot;}],\u0026quot;payable\u0026quot;:true,\u0026quot;stateMutability\u0026quot;:\u0026quot;payable\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;function\u0026quot;},{\u0026quot;constant\u0026quot;:true,\u0026quot;inputs\u0026quot;:[{\u0026quot;name\u0026quot;:\u0026quot;_pirlAddress\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;address\u0026quot;}],\u0026quot;name\u0026quot;:\u0026quot;getNodeAddress\u0026quot;,\u0026quot;outputs\u0026quot;:[{\u0026quot;name\u0026quot;:\u0026quot;\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;address\u0026quot;}],\u0026quot;payable\u0026quot;:false,\u0026quot;stateMutability\u0026quot;:\u0026quot;view\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;function\u0026quot;},{\u0026quot;constant\u0026quot;:true,\u0026quot;inputs\u0026quot;:[{\u0026quot;name\u0026quot;:\u0026quot;\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;address\u0026quot;}],\u0026quot;name\u0026quot;:\u0026quot;moderators\u0026quot;,\u0026quot;outputs\u0026quot;:[{\u0026quot;name\u0026quot;:\u0026quot;\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;bool\u0026quot;}],\u0026quot;payable\u0026quot;:false,\u0026quot;stateMutability\u0026quot;:\u0026quot;view\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;function\u0026quot;},{\u0026quot;constant\u0026quot;:true,\u0026quot;inputs\u0026quot;:[{\u0026quot;name\u0026quot;:\u0026quot;\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;address\u0026quot;}],\u0026quot;name\u0026quot;:\u0026quot;nodes\u0026quot;,\u0026quot;outputs\u0026quot;:[{\u0026quot;name\u0026quot;:\u0026quot;pirlAddress\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;address\u0026quot;},{\u0026quot;name\u0026quot;:\u0026quot;nodeStake\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;uint256\u0026quot;},{\u0026quot;name\u0026quot;:\u0026quot;nodeHash\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;bytes20\u0026quot;},{\u0026quot;name\u0026quot;:\u0026quot;stakeLocked\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;bool\u0026quot;},{\u0026quot;name\u0026quot;:\u0026quot;nodeEnabled\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;bool\u0026quot;}],\u0026quot;payable\u0026quot;:false,\u0026quot;stateMutability\u0026quot;:\u0026quot;view\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;function\u0026quot;},{\u0026quot;constant\u0026quot;:false,\u0026quot;inputs\u0026quot;:[],\u0026quot;name\u0026quot;:\u0026quot;disableNodeRegistration\u0026quot;,\u0026quot;outputs\u0026quot;:[{\u0026quot;name\u0026quot;:\u0026quot;disabled\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;bool\u0026quot;}],\u0026quot;payable\u0026quot;:false,\u0026quot;stateMutability\u0026quot;:\u0026quot;nonpayable\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;function\u0026quot;},{\u0026quot;constant\u0026quot;:true,\u0026quot;inputs\u0026quot;:[],\u0026quot;name\u0026quot;:\u0026quot;nodeCost\u0026quot;,\u0026quot;outputs\u0026quot;:[{\u0026quot;name\u0026quot;:\u0026quot;\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;uint256\u0026quot;}],\u0026quot;payable\u0026quot;:false,\u0026quot;stateMutability\u0026quot;:\u0026quot;view\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;function\u0026quot;},{\u0026quot;constant\u0026quot;:true,\u0026quot;inputs\u0026quot;:[{\u0026quot;name\u0026quot;:\u0026quot;_pirlAddress\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;address\u0026quot;}],\u0026quot;name\u0026quot;:\u0026quot;getStakeLockedStatus\u0026quot;,\u0026quot;outputs\u0026quot;:[{\u0026quot;name\u0026quot;:\u0026quot;\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;bool\u0026quot;}],\u0026quot;payable\u0026quot;:false,\u0026quot;stateMutability\u0026quot;:\u0026quot;view\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;function\u0026quot;},{\u0026quot;constant\u0026quot;:true,\u0026quot;inputs\u0026quot;:[],\u0026quot;name\u0026quot;:\u0026quot;nodeCount\u0026quot;,\u0026quot;outputs\u0026quot;:[{\u0026quot;name\u0026quot;:\u0026quot;\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;uint256\u0026quot;}],\u0026quot;payable\u0026quot;:false,\u0026quot;stateMutability\u0026quot;:\u0026quot;view\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;function\u0026quot;},{\u0026quot;constant\u0026quot;:false,\u0026quot;inputs\u0026quot;:[{\u0026quot;name\u0026quot;:\u0026quot;_admin\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;address\u0026quot;}],\u0026quot;name\u0026quot;:\u0026quot;setAdmin\u0026quot;,\u0026quot;outputs\u0026quot;:[{\u0026quot;name\u0026quot;:\u0026quot;set\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;bool\u0026quot;}],\u0026quot;payable\u0026quot;:false,\u0026quot;stateMutability\u0026quot;:\u0026quot;nonpayable\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;function\u0026quot;},{\u0026quot;constant\u0026quot;:true,\u0026quot;inputs\u0026quot;:[],\u0026quot;name\u0026quot;:\u0026quot;owner\u0026quot;,\u0026quot;outputs\u0026quot;:[{\u0026quot;name\u0026quot;:\u0026quot;\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;address\u0026quot;}],\u0026quot;payable\u0026quot;:false,\u0026quot;stateMutability\u0026quot;:\u0026quot;view\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;function\u0026quot;},{\u0026quot;constant\u0026quot;:false,\u0026quot;inputs\u0026quot;:[],\u0026quot;name\u0026quot;:\u0026quot;enableNode\u0026quot;,\u0026quot;outputs\u0026quot;:[{\u0026quot;name\u0026quot;:\u0026quot;enabled\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;bool\u0026quot;}],\u0026quot;payable\u0026quot;:false,\u0026quot;stateMutability\u0026quot;:\u0026quot;nonpayable\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;function\u0026quot;},{\u0026quot;constant\u0026quot;:true,\u0026quot;inputs\u0026quot;:[],\u0026quot;name\u0026quot;:\u0026quot;nodeRegistrationEnabled\u0026quot;,\u0026quot;outputs\u0026quot;:[{\u0026quot;name\u0026quot;:\u0026quot;\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;bool\u0026quot;}],\u0026quot;payable\u0026quot;:false,\u0026quot;stateMutability\u0026quot;:\u0026quot;view\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;function\u0026quot;},{\u0026quot;constant\u0026quot;:false,\u0026quot;inputs\u0026quot;:[],\u0026quot;name\u0026quot;:\u0026quot;disableNode\u0026quot;,\u0026quot;outputs\u0026quot;:[{\u0026quot;name\u0026quot;:\u0026quot;disabled\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;bool\u0026quot;}],\u0026quot;payable\u0026quot;:false,\u0026quot;stateMutability\u0026quot;:\u0026quot;nonpayable\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;function\u0026quot;},{\u0026quot;constant\u0026quot;:false,\u0026quot;inputs\u0026quot;:[],\u0026quot;name\u0026quot;:\u0026quot;withdrawStake\u0026quot;,\u0026quot;outputs\u0026quot;:[{\u0026quot;name\u0026quot;:\u0026quot;withdrawn\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;bool\u0026quot;}],\u0026quot;payable\u0026quot;:false,\u0026quot;stateMutability\u0026quot;:\u0026quot;nonpayable\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;function\u0026quot;},{\u0026quot;constant\u0026quot;:true,\u0026quot;inputs\u0026quot;:[{\u0026quot;name\u0026quot;:\u0026quot;\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;uint256\u0026quot;}],\u0026quot;name\u0026quot;:\u0026quot;nodeAddresses\u0026quot;,\u0026quot;outputs\u0026quot;:[{\u0026quot;name\u0026quot;:\u0026quot;\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;address\u0026quot;}],\u0026quot;payable\u0026quot;:false,\u0026quot;stateMutability\u0026quot;:\u0026quot;view\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;function\u0026quot;},{\u0026quot;constant\u0026quot;:true,\u0026quot;inputs\u0026quot;:[{\u0026quot;name\u0026quot;:\u0026quot;_pirlAddress\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;address\u0026quot;}],\u0026quot;name\u0026quot;:\u0026quot;getNodeEnabledStatus\u0026quot;,\u0026quot;outputs\u0026quot;:[{\u0026quot;name\u0026quot;:\u0026quot;\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;bool\u0026quot;}],\u0026quot;payable\u0026quot;:false,\u0026quot;stateMutability\u0026quot;:\u0026quot;view\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;function\u0026quot;},{\u0026quot;constant\u0026quot;:true,\u0026quot;inputs\u0026quot;:[{\u0026quot;name\u0026quot;:\u0026quot;_pirlAddress\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;address\u0026quot;}],\u0026quot;name\u0026quot;:\u0026quot;getNodeStake\u0026quot;,\u0026quot;outputs\u0026quot;:[{\u0026quot;name\u0026quot;:\u0026quot;\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;uint256\u0026quot;}],\u0026quot;payable\u0026quot;:false,\u0026quot;stateMutability\u0026quot;:\u0026quot;view\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;function\u0026quot;},{\u0026quot;constant\u0026quot;:false,\u0026quot;inputs\u0026quot;:[],\u0026quot;name\u0026quot;:\u0026quot;enableNodeRegistration\u0026quot;,\u0026quot;outputs\u0026quot;:[{\u0026quot;name\u0026quot;:\u0026quot;enabled\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;bool\u0026quot;}],\u0026quot;payable\u0026quot;:false,\u0026quot;stateMutability\u0026quot;:\u0026quot;nonpayable\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;function\u0026quot;},{\u0026quot;constant\u0026quot;:true,\u0026quot;inputs\u0026quot;:[{\u0026quot;name\u0026quot;:\u0026quot;_pirlAddress\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;address\u0026quot;}],\u0026quot;name\u0026quot;:\u0026quot;getNodeHash\u0026quot;,\u0026quot;outputs\u0026quot;:[{\u0026quot;name\u0026quot;:\u0026quot;\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;bytes20\u0026quot;}],\u0026quot;payable\u0026quot;:false,\u0026quot;stateMutability\u0026quot;:\u0026quot;view\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;function\u0026quot;},{\u0026quot;constant\u0026quot;:true,\u0026quot;inputs\u0026quot;:[],\u0026quot;name\u0026quot;:\u0026quot;nodeFee\u0026quot;,\u0026quot;outputs\u0026quot;:[{\u0026quot;name\u0026quot;:\u0026quot;\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;uint256\u0026quot;}],\u0026quot;payable\u0026quot;:false,\u0026quot;stateMutability\u0026quot;:\u0026quot;view\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;function\u0026quot;},{\u0026quot;constant\u0026quot;:true,\u0026quot;inputs\u0026quot;:[],\u0026quot;name\u0026quot;:\u0026quot;admin\u0026quot;,\u0026quot;outputs\u0026quot;:[{\u0026quot;name\u0026quot;:\u0026quot;\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;address\u0026quot;}],\u0026quot;payable\u0026quot;:false,\u0026quot;stateMutability\u0026quot;:\u0026quot;view\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;function\u0026quot;},{\u0026quot;inputs\u0026quot;:[],\u0026quot;payable\u0026quot;:false,\u0026quot;stateMutability\u0026quot;:\u0026quot;nonpayable\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;constructor\u0026quot;},{\u0026quot;payable\u0026quot;:true,\u0026quot;stateMutability\u0026quot;:\u0026quot;payable\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;fallback\u0026quot;},{\u0026quot;anonymous\u0026quot;:false,\u0026quot;inputs\u0026quot;:[{\u0026quot;indexed\u0026quot;:true,\u0026quot;name\u0026quot;:\u0026quot;_pirlAddress\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;address\u0026quot;},{\u0026quot;indexed\u0026quot;:true,\u0026quot;name\u0026quot;:\u0026quot;_nodeHash\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;bytes20\u0026quot;},{\u0026quot;indexed\u0026quot;:true,\u0026quot;name\u0026quot;:\u0026quot;_nodeRegistered\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;bool\u0026quot;},{\u0026quot;indexed\u0026quot;:false,\u0026quot;name\u0026quot;:\u0026quot;_dateRegistered\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;uint256\u0026quot;}],\u0026quot;name\u0026quot;:\u0026quot;MasterNodeRegistered\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;event\u0026quot;},{\u0026quot;anonymous\u0026quot;:false,\u0026quot;inputs\u0026quot;:[{\u0026quot;indexed\u0026quot;:true,\u0026quot;name\u0026quot;:\u0026quot;_pirlAddress\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;address\u0026quot;},{\u0026quot;indexed\u0026quot;:true,\u0026quot;name\u0026quot;:\u0026quot;_nodeHash\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;bytes20\u0026quot;},{\u0026quot;indexed\u0026quot;:true,\u0026quot;name\u0026quot;:\u0026quot;_nodeDisabled\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;bool\u0026quot;},{\u0026quot;indexed\u0026quot;:false,\u0026quot;name\u0026quot;:\u0026quot;_dateDisabled\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;uint256\u0026quot;}],\u0026quot;name\u0026quot;:\u0026quot;MasterNodeDisabled\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;event\u0026quot;},{\u0026quot;anonymous\u0026quot;:false,\u0026quot;inputs\u0026quot;:[{\u0026quot;indexed\u0026quot;:true,\u0026quot;name\u0026quot;:\u0026quot;_pirlAddress\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;address\u0026quot;},{\u0026quot;indexed\u0026quot;:true,\u0026quot;name\u0026quot;:\u0026quot;_nodeHash\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;bytes20\u0026quot;},{\u0026quot;indexed\u0026quot;:true,\u0026quot;name\u0026quot;:\u0026quot;_nodeEnabled\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;bool\u0026quot;},{\u0026quot;indexed\u0026quot;:false,\u0026quot;name\u0026quot;:\u0026quot;_dateEnabled\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;uint256\u0026quot;}],\u0026quot;name\u0026quot;:\u0026quot;MasterNodeEnabled\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;event\u0026quot;},{\u0026quot;anonymous\u0026quot;:false,\u0026quot;inputs\u0026quot;:[{\u0026quot;indexed\u0026quot;:true,\u0026quot;name\u0026quot;:\u0026quot;_pirlAddress\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;address\u0026quot;},{\u0026quot;indexed\u0026quot;:true,\u0026quot;name\u0026quot;:\u0026quot;_nodeHash\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;bytes20\u0026quot;},{\u0026quot;indexed\u0026quot;:true,\u0026quot;name\u0026quot;:\u0026quot;_nodePaid\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;bool\u0026quot;},{\u0026quot;indexed\u0026quot;:false,\u0026quot;name\u0026quot;:\u0026quot;_datePaid\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;uint256\u0026quot;}],\u0026quot;name\u0026quot;:\u0026quot;MasterNodeRewarded\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;event\u0026quot;},{\u0026quot;anonymous\u0026quot;:false,\u0026quot;inputs\u0026quot;:[{\u0026quot;indexed\u0026quot;:true,\u0026quot;name\u0026quot;:\u0026quot;_pirlAddress\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;address\u0026quot;},{\u0026quot;indexed\u0026quot;:true,\u0026quot;name\u0026quot;:\u0026quot;_nodeHash\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;bytes20\u0026quot;},{\u0026quot;indexed\u0026quot;:true,\u0026quot;name\u0026quot;:\u0026quot;_stakeWithdrawn\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;bool\u0026quot;},{\u0026quot;indexed\u0026quot;:false,\u0026quot;name\u0026quot;:\u0026quot;_dateWithdrawn\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;uint256\u0026quot;}],\u0026quot;name\u0026quot;:\u0026quot;StakeWithdrawn\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;event\u0026quot;},{\u0026quot;anonymous\u0026quot;:false,\u0026quot;inputs\u0026quot;:[{\u0026quot;indexed\u0026quot;:true,\u0026quot;name\u0026quot;:\u0026quot;_invoker\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;address\u0026quot;},{\u0026quot;indexed\u0026quot;:false,\u0026quot;name\u0026quot;:\u0026quot;_dateEnabled\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;uint256\u0026quot;},{\u0026quot;indexed\u0026quot;:true,\u0026quot;name\u0026quot;:\u0026quot;_registrationEnabled\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;bool\u0026quot;}],\u0026quot;name\u0026quot;:\u0026quot;MasterNodeRegistrationEnabled\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;event\u0026quot;},{\u0026quot;anonymous\u0026quot;:false,\u0026quot;inputs\u0026quot;:[{\u0026quot;indexed\u0026quot;:true,\u0026quot;name\u0026quot;:\u0026quot;_invoker\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;address\u0026quot;},{\u0026quot;indexed\u0026quot;:false,\u0026quot;name\u0026quot;:\u0026quot;_dateDisabled\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;uint256\u0026quot;},{\u0026quot;indexed\u0026quot;:true,\u0026quot;name\u0026quot;:\u0026quot;_registrationDisabled\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;bool\u0026quot;}],\u0026quot;name\u0026quot;:\u0026quot;MasterNodeRegistrationDisabled\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;event\u0026quot;},{\u0026quot;anonymous\u0026quot;:false,\u0026quot;inputs\u0026quot;:[{\u0026quot;indexed\u0026quot;:true,\u0026quot;name\u0026quot;:\u0026quot;_invoker\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;address\u0026quot;},{\u0026quot;indexed\u0026quot;:true,\u0026quot;name\u0026quot;:\u0026quot;_admin\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;address\u0026quot;},{\u0026quot;indexed\u0026quot;:true,\u0026quot;name\u0026quot;:\u0026quot;_adminSet\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;bool\u0026quot;}],\u0026quot;name\u0026quot;:\u0026quot;SetAdmin\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;event\u0026quot;},{\u0026quot;anonymous\u0026quot;:false,\u0026quot;inputs\u0026quot;:[{\u0026quot;indexed\u0026quot;:true,\u0026quot;name\u0026quot;:\u0026quot;_invoker\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;address\u0026quot;},{\u0026quot;indexed\u0026quot;:true,\u0026quot;name\u0026quot;:\u0026quot;_newOwner\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;address\u0026quot;},{\u0026quot;indexed\u0026quot;:true,\u0026quot;name\u0026quot;:\u0026quot;_ownerChanged\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;bool\u0026quot;}],\u0026quot;name\u0026quot;:\u0026quot;TransferOwnership\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;event\u0026quot;}]  Select the newly address Masternode contract and you will see available functions for it as a dropdown menu on the right side under the Write to Contract heading. Under available functions select Node Registration and select the wallet containing your 20,000 Pirl for Premium MN. Underneath that, fill in 20,000 Pirl for Premium MN to send the stake to the contract.\nOnce you hit execute, fill in your UTC file password and make sure you’re providing at least 121,000 gas for the transaction.\nThis is a good time to get some coffee or tea and let everything sync. 3-5 minutes should do the trick.\nCreate/Launch CentOS Linux server Verify that the server meets the appropriate specifications as noted in the Pirl Masternode Setup Tutorial\nThe server must run the CentOS 7 Linux distribution if you plan to use the One-Click Masternode Setup.\nRecord of the static public IP address of the server as well as the root password. We do recommend logging into that server once to ensure the root credentials work. It is not necessary to take any other actions on the server after that. In fact, it\u0026rsquo;s preferred that you don\u0026rsquo;t make any other adjustments, at all.\nCreate Masternode in Poseidon Login to Poseidon and navigate to the page which adds a masternode located here:\nhttps://poseidon.pirl.io/dashboard/masternodes/\nand hit the:\n\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt; HEAD\n \u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt; local_version\nthen you get this nice popup screen:\n\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt; HEAD\n \u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt; local_version\nThe Name can be anything you’d like.\nThe Masternode Wallet id is the address of your Nautilus wallet, the one which contains 20,000 Pirl at present.\nAnd, remember, the Tx hash validation field needs the txid (not block hash, see above!) of the transaction you send to your Poseidon wallet.\nOn the bottom of the screenshot above, you will have to select that the MN is Premium (20K stake)\nHit Save changes and then you will see the next screen.\n\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt; HEAD\n \u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt; local_version\nOne-Click Masternode Setup Ensure that you know the public static IP address and root credentials before proceeding.\n\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt; HEAD\n \u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt; local_version\nwe go and complete all fields. ssh default is port: 22 Hit Save changes and then you will see the next screen.\n\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt; HEAD After returning to the My Masternodes screen, observe that the masternode\u0026rsquo;s Managed by Poseidon field is set to True\n After returning to the My Masternodes screen, observe that the masternode\u0026rsquo;s Managed by Poseidon field is set to True\n\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt; local_version\nPlease allow 30 minutes for the process to complete. You may click the details button to monitor the status.\nWatch the masternode process synchronize with the blockchain:\njournalctl -f  Once messages like the following are displayed, your masternode is now synchronized and contributing to the network.\n\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt; HEAD\n \u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt; local_version\nMonitoring We don\u0026rsquo;t encourage active access on the server. If, however, you wish to check the status, log into your server and issue the following command:\njournalctl -f  your masternode is contributing to the network if it looks like this:.\n\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt; HEAD\n \u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt; local_version\nMonitor the status of your masternode by checking the Poseidon Masternode Details page by clicking on the 🔍.\nA functioning node should appear as follows:\n\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt; HEAD\n \u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt; local_version\nAuthor(s):\nThe Pirl Team\nContributor(s):\n@Dptelecom\n"
},
{
	"uri": "https://pirl.live/ipns/QmVKFJs81erni4KV6Hzt2xVwGtC2P1WtE9A4MxNThFVFVh/en/development/core/hulk/",
	"title": "ATTACK &amp; HULK",
	"tags": [],
	"description": "",
	"content": " \u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt; HEAD\n        local_version\n       Pirl Community!\nA 51% attack on the Pirl network was identified on 10/14/2018. As soon as it was discovered we conducted an investigation to verify the findings and asked exchanges to place their Pirl wallets into maintenance, until a more detailed analysis could be completed.\nOnce the attack was mitigated, we took the necessary steps to completely lock out the attackers and make sure that the exchange wallets were safe. We are now just steps away from deploying our remedial actions to the Pirl Blockchain, which will help prevent this kind of attack from happening in the future.\nHow ? (by using the HULK)\nThe network security solution we code named “Hulk” will be deployed in 2 stages:\nStage 1: Fork -\nRemediate the consequences of the attack and remove all artificially created PIRL while deploying Notary Smart Contracts both on the Pirl and Ethereum chains, adjust validation block count on exchanges, and the setting up of an O.M.S (Orphan Monitoring System) which will invalidate any node attempting an attack on the network.\nStage 2: Masternode update -\nPirl Masternodes will become a firewall against any bad actor. With this new code the masternode network will be an active participant in ensuring the authenticity of transactions on the Pirl Blockchain.\nThe information above is far from detailed but, in order to be safe until “Hulk” first step is implemented, we will keep the blueprints of our security private.\nWe are extremely happy to have your support, reading the messages in discord have done a lot for the team motivation during the entire operation. We shouldn’t forget to mention Cryptopia and STEX as well for their fast and professional reaction which was also a critical factor for a successful outcome.\nThis is just a quick update, more information will follow!\n#PirlTogetherStrong\nYours,\nPirl Team\nAuthor(s):\n@dptelecom\nContributor():\n"
},
{
	"uri": "https://pirl.live/ipns/QmVKFJs81erni4KV6Hzt2xVwGtC2P1WtE9A4MxNThFVFVh/en/pirlcloud/masternodes/content-masternodes/",
	"title": "Content Masternodes",
	"tags": [],
	"description": "",
	"content": " \u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt; HEAD\n \u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt; local_version\nContent Masternodes \u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt; HEAD\n \u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt; local_version\nContent Masternodes Will provide file storage for the publicly accessible media and data needed for dApps and the marketplace.\n1.) Setup Pirl Masternode Using Nautilus Wallet and OneClick (Recommended) 2.) Disabling Masternode and Retrieving Stake Author(s): @Dptelecom\nContributor(s):\n"
},
{
	"uri": "https://pirl.live/ipns/QmVKFJs81erni4KV6Hzt2xVwGtC2P1WtE9A4MxNThFVFVh/en/getting-started/how-to-contribute/pirl-for-kbs/",
	"title": "Getting Pirl for Writing Knowledge Base (KB) Articles",
	"tags": [],
	"description": "",
	"content": " Introduction The PIRL philosophy focuses on involving community participation. We need lots of help writing KBs for PIRL. Many of us use PIRL products on a daily basis and have the know how to help others, who are just getting into the PIRL ecosystem. We can help onboard these people and we can also scratch our own itches by showing the community the correct way things are done. The PIRL project is willing to compensate all technical writers with PIRL for making these amazing contributions to the documentation spine of the project.\nHow Contributing Works  Make sure you\u0026rsquo;re familiar with \u0026ldquo;markdown\u0026rdquo; markup. Also, familiarize yourself with our Style Guide. You can either choose to write a new KB or improve an existing one:  For New KBs you will get between 50 PIRL and 100 PIRL depending on length and quality. For Improving existing KBs with useful details, you will get between 10 PIRL and 50 PIRL, depending on the details of the edit and its quality. (note: all payouts are at editorial discretion)  Once you\u0026rsquo;re ready to write, reference our How to contribute guide to setup your working environment. Depending on your comfort level with GitLab:  You can either request the merging of your article yourself at https://docs.pirl.io You can contact @Dptelecom | Official PirlTeam#7828 in the Pirl Discord with your article submission.  Once you submit the KB, contact same for payment.  This is a community feedback oriented project. Feel free to contact @Dptelecom | Official PirlTeam#7828 in the Pirl Discord should you have any questions or suggestions.\nAuthor(s): @Dptelecom\nContributor(s):\n"
},
{
	"uri": "https://pirl.live/ipns/QmVKFJs81erni4KV6Hzt2xVwGtC2P1WtE9A4MxNThFVFVh/en/wallets/backup-pirl-wallets/",
	"title": "How to Backup Pirl Wallets",
	"tags": [],
	"description": "",
	"content": " \u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt; HEAD Overview This is a guide for best practices in backing up your Pirl wallets, and for keeping your Pirl safe and secure. Overview This is a guide for best practices in backing up your Pirl wallets, and for keeping your Pirl safe and secure. \u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt; local_version\nIntroduction So, you\u0026rsquo;ve just picked up a bundle of Pirl, you\u0026rsquo;re in this for the long haul, and you\u0026rsquo;re going to keep these coins for a long time. How can you make sure you don\u0026rsquo;t lose access through fire/theft/crashes? It\u0026rsquo;s important to back up your Pirl wallets to ensure that any one failure won\u0026rsquo;t result in you losing your Pirl. This guide will walk through best practice for backups and will touch on three platforms/options for doing so.\nImportant to understand: What is a wallet? At its core, the part of the wallet that gives you access to your funds and allows you to spend your coins, are your private keys. Your Pirl is stored on the blockchain, and the private keys are what unlock your funds and allow them to be sent. These private keys can be seen in a number of different forms, with the raw form being a string of 64 hexadecimal characters that looks something like: c6cbd7d76bc5baca530c875663711b947efa6a86a900a9e8645ce32e5821484e\nThe importance of your private keys is two-fold. They give you access to your funds, but they will also give anyone with the key access to your funds too. For that reason it is IMPERATIVE that you take steps to protect these private keys and to keep them backed up. The following section details common methods for storing these private keys, and the best practice for each.\nWallet types and best practice For a transaction to be approved, it always has to be signed with your private key. However, for additional functionality such as protecting the key with a password, there are various formats for storing your private key.\nThe most commonly used wallet types are as follows:\n Private Key (unencrypted) Keystore (UTC/JSON) file. Hardware wallets (e.g. Ledger/Trezor)  Private key (unencrypted) This is the unencrypted text version of your private key. It does not require your password. If someone else has this key, they can access your wallet without a password. This makes this method of storage both the most simple and the most volatile.\nSaving your private key as a Paper Wallet or Keystore file It is typically recommended to use an encrypted version, however you should print a paper wallet and save this key somewhere offline. \u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt; HEAD There is a useful feature on https://wallet.pirl.io that allows you to export your wallet info as either a Keystore (JSON/UTC) file, or to print a paper wallet.\nSimply click on the \u0026ldquo;View Wallet Info\u0026rdquo; tab Input your wallet details in whichever format you have them Your wallet details will then be presented as public/private key, with the option to both generate a Keystore (JSON/UTC) file, or to print a paper wallet. The paper wallet will look like this\n There is a useful feature on https://wallet.pirl.io that allows you to export your wallet info as either a Keystore (JSON/UTC) file, or to print a paper wallet.\nSimply click on the \u0026ldquo;View Wallet Info\u0026rdquo; tab Input your wallet details in whichever format you have them Your wallet details will then be presented as public/private key, with the option to both generate a Keystore (JSON/UTC) file, or to print a paper wallet. The paper wallet will look like this \u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt; local_version\nYou should print the paper wallet twice, and store it in two secure locations. Treat it like cash. You should also download the keystore file and save it to an external medium such as a USB drive or Hard drive. It\u0026rsquo;s best practice to have a backup in multiple physical locations should the worst happen. Always remember the golden rule of backups: \u0026ldquo;Two backups is one, and one is none.\u0026rdquo;\nKeystore (UTC/JSON) file. This is the recommended version to save, and is also the format in which the Pirl Nautilus (Desktop) Wallet stores your wallet. Since the keystore format matches that used by the web wallet at https://wallet.pirl.io, you can easily import in either direction.\n\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt; HEAD\nThis file is encrypted by the password you chose when you create the file. This file is encrypted by the password you chose when you create the file. \u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt; local_version\nYou should save the keystore file to an external medium such as a USB drive or Hard drive. It\u0026rsquo;s best practice to have a backup in multiple physical locations should the worst happen.\nBacking up your Nautilus Wallet To backup your Nautilus Wallet, click File \u0026gt; Backup \u0026gt; Accounts \u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt; HEAD This will open the appdata folder containing your wallet files\n This will open the appdata folder containing your wallet files \u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt; local_version\nHardware Wallets Hardware wallet support for Pirl is available on both Ledger and Trezor devices. These devices present a secure way to store and access your funds, with the private keys being stored in a protected area of the device which prevents them from being transferred out of the device in plaintext format. This method means that even if your computer is compromised, you should be able to sign transactions in a secure fashion. As with all technology, there are advanced means to attack these devices that can potentially expose your funds, but this is beyond the scope of this article and not something the average user needs to concern themselves with.\nOne particular security precaution that should be taken, however, is to only purchase these devices through first-party or trusted stores, and to ensure the device has not been opened or otherwise tampered with when you receive it. \u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt; HEAD\n=======\n       local_version\nSummary In summary, the most important actions to secure your Pirl:\n        Use a hardware wallet if possible, password protected keystore (UTC/JSON) being the next best option. \u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt; HEAD Use the pirl web wallet to save a paper wallet and print this twice, keeping it in two secure locations. ======= Use the pirl web wallet to save a paper wallet and print this twice, keeping it in two secure locations. \u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt; local_version No matter which wallet format you use, make multiple backups in multiple locations. Never expose your private keys to any (untrusted) third party, as this will give them full access to your funds.  Author(s): Bigchrome\n"
},
{
	"uri": "https://pirl.live/ipns/QmVKFJs81erni4KV6Hzt2xVwGtC2P1WtE9A4MxNThFVFVh/en/solidity/json-rpc-api/",
	"title": "JSON RPC API",
	"tags": [],
	"description": "",
	"content": " Contents\n JSON RPC API  JavaScript API JSON-RPC Endpoint Go JSON-RPC support HEX value encoding The default block parameter Curl Examples Explained JSON-RPC methods JSON RPC API Reference  web3_clientVersion Parameters Returns Example web3_sha3 Parameters Returns Example net_version Parameters Returns Example net_listening Parameters Returns Example net_peerCount Parameters Returns Example eth_protocolVersion Parameters Returns Example eth_syncing Parameters Returns Example eth_coinbase Parameters Returns Example eth_mining Parameters Returns Example eth_hashrate Parameters Returns Example eth_gasPrice Parameters Returns Example eth_accounts Parameters Returns Example eth_blockNumber Parameters Returns Example eth_getBalance Parameters Returns Example eth_getStorageAt Parameters Returns Example eth_getTransactionCount Parameters Returns Example eth_getBlockTransactionCountByHash Parameters Returns Example eth_getBlockTransactionCountByNumber Parameters Returns Example eth_getUncleCountByBlockHash Parameters Returns Example eth_getUncleCountByBlockNumber Parameters Returns Example eth_getCode Parameters Returns Example eth_sign Parameters Returns Example eth_sendTransaction Parameters Returns Example eth_sendRawTransaction Parameters Returns Example eth_call Parameters Returns Example eth_estimateGas Parameters Returns Example eth_getBlockByHash Parameters Returns Example eth_getBlockByNumber Parameters Returns Example eth_getTransactionByHash Parameters Returns Example eth_getTransactionByBlockHashAndIndex Parameters Returns Example eth_getTransactionByBlockNumberAndIndex Parameters Returns Example eth_getTransactionReceipt Parameters Returns Example eth_getUncleByBlockHashAndIndex Parameters Returns Example eth_getUncleByBlockNumberAndIndex Parameters Returns Example eth_getCompilers (DEPRECATED) Parameters Returns Example eth_compileSolidity (DEPRECATED) Parameters Returns Example eth_compileLLL (DEPRECATED) Parameters Returns Example eth_compileSerpent (DEPRECATED) Parameters Returns Example eth_newFilter A note on specifying topic filters: Parameters Returns Example eth_newBlockFilter Parameters Returns Example eth_newPendingTransactionFilter Parameters Returns Example eth_uninstallFilter Parameters Returns Example eth_getFilterChanges Parameters Returns Example eth_getFilterLogs Parameters Returns Example eth_getLogs Parameters Returns Example eth_getWork Parameters Returns Example eth_submitWork Parameters Returns Example eth_submitHashrate Parameters Returns Example eth_getProof getProof-Parameters getProof-Returns getProof-Example db_putString Parameters Returns Example db_getString Parameters Returns Example db_putHex Parameters Returns Example db_getHex Parameters Returns Example shh_version Parameters Returns Example shh_post Parameters Returns Example shh_newIdentity Parameters Returns Example shh_hasIdentity Parameters Returns Example shh_newGroup Parameters Returns Example shh_addToGroup Parameters Returns Example shh_newFilter Parameters Returns Example shh_uninstallFilter Parameters Returns Example shh_getFilterChanges Parameters Returns Example shh_getMessages Parameters Returns Example    JSON RPC API JSON is a lightweight data-interchange format. It can represent numbers, strings, ordered sequences of values, and collections of name/value pairs.\nJSON-RPC is a stateless, light-weight remote procedure call (RPC) protocol. Primarily this specification defines several data structures and the rules around their processing. It is transport agnostic in that the concepts can be used within the same process, over sockets, over HTTP, or in many various message passing environments. It uses JSON (RFC 4627) as data format.\nJavaScript API To talk to an Pirl node from inside a JavaScript application use the web3.js library, which gives a convenient interface for the RPC methods.\nJSON-RPC Endpoint Default JSON-RPC endpoints:\n   Client URL     Go http://localhost:8545    Go You can start the HTTP JSON-RPC with the --rpc flag\npirl--rpc  change the default port (8545) and listing address (localhost) with:\npirl--rpc --rpcaddr \u0026lt;ip\u0026gt; --rpcport \u0026lt;portnumber\u0026gt;  If accessing the RPC from a browser, CORS will need to be enabled with the appropriate domain set. Otherwise, JavaScript calls are limit by the same-origin policy and requests will fail:\npirl--rpc --rpccorsdomain \u0026quot;http://localhost:3000\u0026quot;  HEX value encoding At present there are two key datatypes that are passed over JSON: unformatted byte arrays and quantities. Both are passed with a hex encoding, however with different requirements to formatting:\nWhen encoding QUANTITIES (integers, numbers): encode as hex, prefix with \u0026ldquo;0x\u0026rdquo;, the most compact representation (slight exception: zero should be represented as \u0026ldquo;0x0\u0026rdquo;). Examples: - 0x41 (65 in decimal) - 0x400 (1024 in decimal) - WRONG: 0x (should always have at least one digit - zero is \u0026ldquo;0x0\u0026rdquo;) - WRONG: 0x0400 (no leading zeroes allowed) - WRONG: ff (must be prefixed 0x)\nWhen encoding UNFORMATTED DATA (byte arrays, account addresses, hashes, bytecode arrays): encode as hex, prefix with \u0026ldquo;0x\u0026rdquo;, two hex digits per byte. Examples: - 0x41 (size 1, \u0026ldquo;A\u0026rdquo;) - 0x004200 (size 3, \u0026ldquo;\\0B\\0\u0026rdquo;) - 0x (size 0, \u0026ldquo;\u0026rdquo;) - WRONG: 0xf0f0f (must be even number of digits) - WRONG: 004200 (must be prefixed 0x)\nThe default block parameter The following methods have an extra default block parameter:\n eth_getBalance eth_getCode eth_getTransactionCount eth_getStorageAt eth_call  When requests are made that act on the state of Pirl, the last default block parameter determines the height of the block.\nThe following options are possible for the defaultBlock parameter:\n HEX String - an integer block number String \u0026quot;earliest\u0026quot; for the earliest/genesis block String \u0026quot;latest\u0026quot; - for the latest mined block String \u0026quot;pending\u0026quot; - for the pending state/transactions  Curl Examples Explained The curl options below might return a response where the node complains about the content type, this is because the \u0026ndash;data option sets the content type to application/x-www-form-urlencoded . If your node does complain, manually set the header by placing -H \u0026ldquo;Content-Type: application/json\u0026rdquo; at the start of the call.\nThe examples also do not include the URL/IP \u0026amp; port combination which must be the last argument given to curl e.x. 127.0.0.1:8545\nJSON-RPC methods  web3_clientVersion web3_sha3 net_version net_peerCount net_listening eth_protocolVersion eth_syncing eth_coinbase eth_mining eth_hashrate eth_gasPrice eth_accounts eth_blockNumber eth_getBalance eth_getStorageAt eth_getTransactionCount eth_getBlockTransactionCountByHash eth_getBlockTransactionCountByNumber eth_getUncleCountByBlockHash eth_getUncleCountByBlockNumber eth_getCode eth_sign eth_sendTransaction eth_sendRawTransaction eth_call eth_estimateGas eth_getBlockByHash eth_getBlockByNumber eth_getTransactionByHash eth_getTransactionByBlockHashAndIndex eth_getTransactionByBlockNumberAndIndex eth_getTransactionReceipt eth_getUncleByBlockHashAndIndex eth_getUncleByBlockNumberAndIndex eth_getCompilers eth_compileLLL eth_compileSolidity eth_compileSerpent eth_newFilter eth_newBlockFilter eth_newPendingTransactionFilter eth_uninstallFilter eth_getFilterChanges eth_getFilterLogs eth_getLogs eth_getWork eth_submitWork eth_submitHashrate eth_getProof db_putString db_getString db_putHex db_getHex shh_post shh_version shh_newIdentity shh_hasIdentity shh_newGroup shh_addToGroup shh_newFilter shh_uninstallFilter shh_getFilterChanges shh_getMessages  JSON RPC API Reference web3_clientVersion Returns the current client version.\nParameters none\nReturns String - The current client version.\nExample // Request curl -X POST --data '{\u0026quot;jsonrpc\u0026quot;:\u0026quot;2.0\u0026quot;,\u0026quot;method\u0026quot;:\u0026quot;web3_clientVersion\u0026quot;,\u0026quot;params\u0026quot;:[],\u0026quot;id\u0026quot;:67}' // Result { \u0026quot;id\u0026quot;:67, \u0026quot;jsonrpc\u0026quot;:\u0026quot;2.0\u0026quot;, \u0026quot;result\u0026quot;: \u0026quot;Mist/v0.9.3/darwin/go1.4.1\u0026quot; }  web3_sha3 Returns Keccak-256 (not the standardized SHA3-256) of the given data.\nParameters  DATA - the data to convert into a SHA3 hash.  params: [ \u0026quot;0x68656c6c6f20776f726c64\u0026quot; ]  Returns DATA - The SHA3 result of the given string.\nExample // Request curl -X POST --data '{\u0026quot;jsonrpc\u0026quot;:\u0026quot;2.0\u0026quot;,\u0026quot;method\u0026quot;:\u0026quot;web3_sha3\u0026quot;,\u0026quot;params\u0026quot;:[\u0026quot;0x68656c6c6f20776f726c64\u0026quot;],\u0026quot;id\u0026quot;:64}' // Result { \u0026quot;id\u0026quot;:64, \u0026quot;jsonrpc\u0026quot;: \u0026quot;2.0\u0026quot;, \u0026quot;result\u0026quot;: \u0026quot;0x47173285a8d7341e5e972fc677286384f802f8ef42a5ec5f03bbfa254cb01fad\u0026quot; }  net_version Returns the current network id.\nParameters none\nReturns String - The current network id. - \u0026quot;1\u0026quot;: 2 Mainnet\nExample // Request curl -X POST --data '{\u0026quot;jsonrpc\u0026quot;:\u0026quot;2.0\u0026quot;,\u0026quot;method\u0026quot;:\u0026quot;net_version\u0026quot;,\u0026quot;params\u0026quot;:[],\u0026quot;id\u0026quot;:67}' // Result { \u0026quot;id\u0026quot;:67, \u0026quot;jsonrpc\u0026quot;: \u0026quot;2.0\u0026quot;, \u0026quot;result\u0026quot;: \u0026quot;3\u0026quot; }  net_listening Returns true if client is actively listening for network connections.\nParameters none\nReturns Boolean - true when listening, otherwise false.\nExample // Request curl -X POST --data '{\u0026quot;jsonrpc\u0026quot;:\u0026quot;2.0\u0026quot;,\u0026quot;method\u0026quot;:\u0026quot;net_listening\u0026quot;,\u0026quot;params\u0026quot;:[],\u0026quot;id\u0026quot;:67}' // Result { \u0026quot;id\u0026quot;:67, \u0026quot;jsonrpc\u0026quot;:\u0026quot;2.0\u0026quot;, \u0026quot;result\u0026quot;:true }  net_peerCount Returns number of peers currently connected to the client.\nParameters none\nReturns QUANTITY - integer of the number of connected peers.\nExample // Request curl -X POST --data '{\u0026quot;jsonrpc\u0026quot;:\u0026quot;2.0\u0026quot;,\u0026quot;method\u0026quot;:\u0026quot;net_peerCount\u0026quot;,\u0026quot;params\u0026quot;:[],\u0026quot;id\u0026quot;:74}' // Result { \u0026quot;id\u0026quot;:74, \u0026quot;jsonrpc\u0026quot;: \u0026quot;2.0\u0026quot;, \u0026quot;result\u0026quot;: \u0026quot;0x2\u0026quot; // 2 }  eth_protocolVersion Returns the current Pirl protocol version.\nParameters none\nReturns String - The current Pirl protocol version.\nExample // Request curl -X POST --data '{\u0026quot;jsonrpc\u0026quot;:\u0026quot;2.0\u0026quot;,\u0026quot;method\u0026quot;:\u0026quot;eth_protocolVersion\u0026quot;,\u0026quot;params\u0026quot;:[],\u0026quot;id\u0026quot;:67}' // Result { \u0026quot;id\u0026quot;:67, \u0026quot;jsonrpc\u0026quot;: \u0026quot;2.0\u0026quot;, \u0026quot;result\u0026quot;: \u0026quot;54\u0026quot; }  eth_syncing Returns an object with data about the sync status or false.\nParameters none\nReturns Object|Boolean, An object with sync status data or FALSE, when not syncing: - startingBlock: QUANTITY - The block at which the import started (will only be reset, after the sync reached his head) - currentBlock: QUANTITY - The current block, same as eth_blockNumber - highestBlock: QUANTITY - The estimated highest block\nExample // Request curl -X POST --data '{\u0026quot;jsonrpc\u0026quot;:\u0026quot;2.0\u0026quot;,\u0026quot;method\u0026quot;:\u0026quot;eth_syncing\u0026quot;,\u0026quot;params\u0026quot;:[],\u0026quot;id\u0026quot;:1}' // Result { \u0026quot;id\u0026quot;:1, \u0026quot;jsonrpc\u0026quot;: \u0026quot;2.0\u0026quot;, \u0026quot;result\u0026quot;: { startingBlock: '0x384', currentBlock: '0x386', highestBlock: '0x454' } } // Or when not syncing { \u0026quot;id\u0026quot;:1, \u0026quot;jsonrpc\u0026quot;: \u0026quot;2.0\u0026quot;, \u0026quot;result\u0026quot;: false }  eth_coinbase Returns the client coinbase address.\nParameters none\nReturns DATA, 20 bytes - the current coinbase address.\nExample // Request curl -X POST --data '{\u0026quot;jsonrpc\u0026quot;:\u0026quot;2.0\u0026quot;,\u0026quot;method\u0026quot;:\u0026quot;eth_coinbase\u0026quot;,\u0026quot;params\u0026quot;:[],\u0026quot;id\u0026quot;:64}' // Result { \u0026quot;id\u0026quot;:64, \u0026quot;jsonrpc\u0026quot;: \u0026quot;2.0\u0026quot;, \u0026quot;result\u0026quot;: \u0026quot;0xc94770007dda54cF92009BFF0dE90c06F603a09f\u0026quot; }  eth_mining Returns true if client is actively mining new blocks.\nParameters none\nReturns Boolean - returns true of the client is mining, otherwise false.\nExample // Request curl -X POST --data '{\u0026quot;jsonrpc\u0026quot;:\u0026quot;2.0\u0026quot;,\u0026quot;method\u0026quot;:\u0026quot;eth_mining\u0026quot;,\u0026quot;params\u0026quot;:[],\u0026quot;id\u0026quot;:71}' // Result { \u0026quot;id\u0026quot;:71, \u0026quot;jsonrpc\u0026quot;: \u0026quot;2.0\u0026quot;, \u0026quot;result\u0026quot;: true }  eth_hashrate Returns the number of hashes per second that the node is mining with.\nParameters none\nReturns QUANTITY - number of hashes per second.\nExample // Request curl -X POST --data '{\u0026quot;jsonrpc\u0026quot;:\u0026quot;2.0\u0026quot;,\u0026quot;method\u0026quot;:\u0026quot;eth_hashrate\u0026quot;,\u0026quot;params\u0026quot;:[],\u0026quot;id\u0026quot;:71}' // Result { \u0026quot;id\u0026quot;:71, \u0026quot;jsonrpc\u0026quot;: \u0026quot;2.0\u0026quot;, \u0026quot;result\u0026quot;: \u0026quot;0x38a\u0026quot; }  eth_gasPrice Returns the current price per gas in wei.\nParameters none\nReturns QUANTITY - integer of the current gas price in wei.\nExample // Request curl -X POST --data '{\u0026quot;jsonrpc\u0026quot;:\u0026quot;2.0\u0026quot;,\u0026quot;method\u0026quot;:\u0026quot;eth_gasPrice\u0026quot;,\u0026quot;params\u0026quot;:[],\u0026quot;id\u0026quot;:73}' // Result { \u0026quot;id\u0026quot;:73, \u0026quot;jsonrpc\u0026quot;: \u0026quot;2.0\u0026quot;, \u0026quot;result\u0026quot;: \u0026quot;0x09184e72a000\u0026quot; // 10000000000000 }  eth_accounts Returns a list of addresses owned by client.\nParameters none\nReturns Array of DATA, 20 Bytes - addresses owned by the client.\nExample // Request curl -X POST --data '{\u0026quot;jsonrpc\u0026quot;:\u0026quot;2.0\u0026quot;,\u0026quot;method\u0026quot;:\u0026quot;eth_accounts\u0026quot;,\u0026quot;params\u0026quot;:[],\u0026quot;id\u0026quot;:1}' // Result { \u0026quot;id\u0026quot;:1, \u0026quot;jsonrpc\u0026quot;: \u0026quot;2.0\u0026quot;, \u0026quot;result\u0026quot;: [\u0026quot;0xc94770007dda54cF92009BFF0dE90c06F603a09f\u0026quot;] }  eth_blockNumber Returns the number of most recent block.\nParameters none\nReturns QUANTITY - integer of the current block number the client is on.\nExample // Request curl -X POST --data '{\u0026quot;jsonrpc\u0026quot;:\u0026quot;2.0\u0026quot;,\u0026quot;method\u0026quot;:\u0026quot;eth_blockNumber\u0026quot;,\u0026quot;params\u0026quot;:[],\u0026quot;id\u0026quot;:1}' // Result { \u0026quot;id\u0026quot;:83, \u0026quot;jsonrpc\u0026quot;: \u0026quot;2.0\u0026quot;, \u0026quot;result\u0026quot;: \u0026quot;0xc94\u0026quot; // 1207 }  eth_getBalance Returns the balance of the account of given address.\nParameters  DATA, 20 Bytes - address to check for balance. QUANTITY|TAG - integer block number, or the string \u0026quot;latest\u0026quot;, \u0026quot;earliest\u0026quot; or \u0026quot;pending\u0026quot;, see the default block parameter  params: [ '0xc94770007dda54cF92009BFF0dE90c06F603a09f', 'latest' ]  Returns QUANTITY - integer of the current balance in wei.\nExample // Request curl -X POST --data '{\u0026quot;jsonrpc\u0026quot;:\u0026quot;2.0\u0026quot;,\u0026quot;method\u0026quot;:\u0026quot;eth_getBalance\u0026quot;,\u0026quot;params\u0026quot;:[\u0026quot;0xc94770007dda54cF92009BFF0dE90c06F603a09f\u0026quot;, \u0026quot;latest\u0026quot;],\u0026quot;id\u0026quot;:1}' // Result { \u0026quot;id\u0026quot;:1, \u0026quot;jsonrpc\u0026quot;: \u0026quot;2.0\u0026quot;, \u0026quot;result\u0026quot;: \u0026quot;0x0234c8a3397aab58\u0026quot; // 158972490234375000 }  eth_getStorageAt Returns the value from a storage position at a given address.\nParameters  DATA, 20 Bytes - address of the storage. QUANTITY - integer of the position in the storage. QUANTITY|TAG - integer block number, or the string \u0026quot;latest\u0026quot;, \u0026quot;earliest\u0026quot; or \u0026quot;pending\u0026quot;, see the default block parameter  Returns DATA - the value at this storage position.\nExample Calculating the correct position depends on the storage to retrieve. Consider the following contract deployed at 0x295a70b2de5e3953354a6a8344e616ed314d7251 by address 0x391694e7e0b0cce554cb130d723a9d27458f9298.\ncontract Storage { uint pos0; mapping(address =\u0026gt; uint) pos1; function Storage() { pos0 = 1234; pos1[msg.sender] = 5678; } }  Retrieving the value of pos0 is straight forward:\ncurl -X POST --data '{\u0026quot;jsonrpc\u0026quot;:\u0026quot;2.0\u0026quot;, \u0026quot;method\u0026quot;: \u0026quot;eth_getStorageAt\u0026quot;, \u0026quot;params\u0026quot;: [\u0026quot;0x295a70b2de5e3953354a6a8344e616ed314d7251\u0026quot;, \u0026quot;0x0\u0026quot;, \u0026quot;latest\u0026quot;], \u0026quot;id\u0026quot;: 1}' localhost:8545 {\u0026quot;jsonrpc\u0026quot;:\u0026quot;2.0\u0026quot;,\u0026quot;id\u0026quot;:1,\u0026quot;result\u0026quot;:\u0026quot;0x00000000000000000000000000000000000000000000000000000000000004d2\u0026quot;}  Retrieving an element of the map is harder. The position of an element in the map is calculated with:\nkeccack(LeftPad32(key, 0), LeftPad32(map position, 0))  This means to retrieve the storage on pos1[\u0026ldquo;0x391694e7e0b0cce554cb130d723a9d27458f9298\u0026rdquo;] we need to calculate the position with:\nkeccak(decodeHex(\u0026quot;000000000000000000000000391694e7e0b0cce554cb130d723a9d27458f9298\u0026quot; + \u0026quot;0000000000000000000000000000000000000000000000000000000000000001\u0026quot;))  The pirlconsole which comes with the web3 library can be used to make the calculation:\n\u0026gt; var key = \u0026quot;000000000000000000000000391694e7e0b0cce554cb130d723a9d27458f9298\u0026quot; + \u0026quot;0000000000000000000000000000000000000000000000000000000000000001\u0026quot; undefined \u0026gt; web3.sha3(key, {\u0026quot;encoding\u0026quot;: \u0026quot;hex\u0026quot;}) \u0026quot;0x6661e9d6d8b923d5bbaab1b96e1dd51ff6ea2a93520fdc9eb75d059238b8c5e9\u0026quot;  Now to fetch the storage:\ncurl -X POST --data '{\u0026quot;jsonrpc\u0026quot;:\u0026quot;2.0\u0026quot;, \u0026quot;method\u0026quot;: \u0026quot;eth_getStorageAt\u0026quot;, \u0026quot;params\u0026quot;: [\u0026quot;0x295a70b2de5e3953354a6a8344e616ed314d7251\u0026quot;, \u0026quot;0x6661e9d6d8b923d5bbaab1b96e1dd51ff6ea2a93520fdc9eb75d059238b8c5e9\u0026quot;, \u0026quot;latest\u0026quot;], \u0026quot;id\u0026quot;: 1}' localhost:8545 {\u0026quot;jsonrpc\u0026quot;:\u0026quot;2.0\u0026quot;,\u0026quot;id\u0026quot;:1,\u0026quot;result\u0026quot;:\u0026quot;0x000000000000000000000000000000000000000000000000000000000000162e\u0026quot;}  eth_getTransactionCount Returns the number of transactions sent from an address.\nParameters  DATA, 20 Bytes - address. QUANTITY|TAG - integer block number, or the string \u0026quot;latest\u0026quot;, \u0026quot;earliest\u0026quot; or \u0026quot;pending\u0026quot;, see the default block parameter  params: [ '0xc94770007dda54cF92009BFF0dE90c06F603a09f', 'latest' // state at the latest block ]  Returns QUANTITY - integer of the number of transactions send from this address.\nExample // Request curl -X POST --data '{\u0026quot;jsonrpc\u0026quot;:\u0026quot;2.0\u0026quot;,\u0026quot;method\u0026quot;:\u0026quot;eth_getTransactionCount\u0026quot;,\u0026quot;params\u0026quot;:[\u0026quot;0xc94770007dda54cF92009BFF0dE90c06F603a09f\u0026quot;,\u0026quot;latest\u0026quot;],\u0026quot;id\u0026quot;:1}' // Result { \u0026quot;id\u0026quot;:1, \u0026quot;jsonrpc\u0026quot;: \u0026quot;2.0\u0026quot;, \u0026quot;result\u0026quot;: \u0026quot;0x1\u0026quot; // 1 }  eth_getBlockTransactionCountByHash Returns the number of transactions in a block from a block matching the given block hash.\nParameters  DATA, 32 Bytes - hash of a block.  params: [ '0xb903239f8543d04b5dc1ba6579132b143087c68db1b2168786408fcbce568238' ]  Returns QUANTITY - integer of the number of transactions in this block.\nExample // Request curl -X POST --data '{\u0026quot;jsonrpc\u0026quot;:\u0026quot;2.0\u0026quot;,\u0026quot;method\u0026quot;:\u0026quot;eth_getBlockTransactionCountByHash\u0026quot;,\u0026quot;params\u0026quot;:[\u0026quot;0xc94770007dda54cF92009BFF0dE90c06F603a09f\u0026quot;],\u0026quot;id\u0026quot;:1}' // Result { \u0026quot;id\u0026quot;:1, \u0026quot;jsonrpc\u0026quot;: \u0026quot;2.0\u0026quot;, \u0026quot;result\u0026quot;: \u0026quot;0xc\u0026quot; // 11 }  eth_getBlockTransactionCountByNumber   Returns the number of transactions in a block matching the given block number.\n  Parameters  QUANTITY|TAG - integer of a block number, or the string \u0026quot;earliest\u0026quot;, \u0026quot;latest\u0026quot; or \u0026quot;pending\u0026quot;, as in the default block parameter.  params: [ '0xe8', // 232 ]  Returns QUANTITY - integer of the number of transactions in this block.\nExample // Request curl -X POST --data '{\u0026quot;jsonrpc\u0026quot;:\u0026quot;2.0\u0026quot;,\u0026quot;method\u0026quot;:\u0026quot;eth_getBlockTransactionCountByNumber\u0026quot;,\u0026quot;params\u0026quot;:[\u0026quot;0xe8\u0026quot;],\u0026quot;id\u0026quot;:1}' // Result { \u0026quot;id\u0026quot;:1, \u0026quot;jsonrpc\u0026quot;: \u0026quot;2.0\u0026quot;, \u0026quot;result\u0026quot;: \u0026quot;0xa\u0026quot; // 10 }  eth_getUncleCountByBlockHash Returns the number of uncles in a block from a block matching the given block hash.\nParameters  DATA, 32 Bytes - hash of a block.  params: [ '0xc94770007dda54cF92009BFF0dE90c06F603a09f' ]  Returns QUANTITY - integer of the number of uncles in this block.\nExample // Request curl -X POST --data '{\u0026quot;jsonrpc\u0026quot;:\u0026quot;2.0\u0026quot;,\u0026quot;method\u0026quot;:\u0026quot;eth_getUncleCountByBlockHash\u0026quot;,\u0026quot;params\u0026quot;:[\u0026quot;0xc94770007dda54cF92009BFF0dE90c06F603a09f\u0026quot;],\u0026quot;id\u0026quot;:1}' // Result { \u0026quot;id\u0026quot;:1, \u0026quot;jsonrpc\u0026quot;: \u0026quot;2.0\u0026quot;, \u0026quot;result\u0026quot;: \u0026quot;0xc\u0026quot; // 1 }  eth_getUncleCountByBlockNumber Returns the number of uncles in a block from a block matching the given block number.\nParameters  QUANTITY|TAG - integer of a block number, or the string \u0026ldquo;latest\u0026rdquo;, \u0026ldquo;earliest\u0026rdquo; or \u0026ldquo;pending\u0026rdquo;, see the default block parameter.  params: [ '0xe8', // 232 ]  Returns QUANTITY - integer of the number of uncles in this block.\nExample // Request curl -X POST --data '{\u0026quot;jsonrpc\u0026quot;:\u0026quot;2.0\u0026quot;,\u0026quot;method\u0026quot;:\u0026quot;eth_getUncleCountByBlockNumber\u0026quot;,\u0026quot;params\u0026quot;:[\u0026quot;0xe8\u0026quot;],\u0026quot;id\u0026quot;:1}' // Result { \u0026quot;id\u0026quot;:1, \u0026quot;jsonrpc\u0026quot;: \u0026quot;2.0\u0026quot;, \u0026quot;result\u0026quot;: \u0026quot;0x1\u0026quot; // 1 }  eth_getCode Returns code at a given address.\nParameters  DATA, 20 Bytes - address. QUANTITY|TAG - integer block number, or the string \u0026quot;latest\u0026quot;, \u0026quot;earliest\u0026quot; or \u0026quot;pending\u0026quot;, see the default block parameter.  params: [ '0xa94f5374fce5edbc8e2a8697c15331677e6ebf0b', '0x2' // 2 ]  Returns DATA - the code from the given address.\nExample // Request curl -X POST --data '{\u0026quot;jsonrpc\u0026quot;:\u0026quot;2.0\u0026quot;,\u0026quot;method\u0026quot;:\u0026quot;eth_getCode\u0026quot;,\u0026quot;params\u0026quot;:[\u0026quot;0xa94f5374fce5edbc8e2a8697c15331677e6ebf0b\u0026quot;, \u0026quot;0x2\u0026quot;],\u0026quot;id\u0026quot;:1}' // Result { \u0026quot;id\u0026quot;:1, \u0026quot;jsonrpc\u0026quot;: \u0026quot;2.0\u0026quot;, \u0026quot;result\u0026quot;: \u0026quot;0x600160008035811a818181146012578301005b601b6001356025565b8060005260206000f25b600060078202905091905056\u0026quot; }  eth_sign The sign method calculates an Pirl specific signature with: sign(keccak256(\u0026quot;\\x19Pirl Signed Message:\\n\u0026quot; + len(message) + message))).\nBy adding a prefix to the message makes the calculated signature recognisable as an Pirl specific signature. This prevents misuse where a malicious DApp can sign arbitrary data (e.g. transaction) and use the signature to impersonate the victim.\nNote the address to sign with must be unlocked.\nParameters account, message\n DATA, 20 Bytes - address. DATA, N Bytes - message to sign.  Returns DATA: Signature\nExample // Request curl -X POST --data '{\u0026quot;jsonrpc\u0026quot;:\u0026quot;2.0\u0026quot;,\u0026quot;method\u0026quot;:\u0026quot;eth_sign\u0026quot;,\u0026quot;params\u0026quot;:[\u0026quot;0x9b2055d370f73ec7d8a03e965129118dc8f5bf83\u0026quot;, \u0026quot;0xdeadbeaf\u0026quot;],\u0026quot;id\u0026quot;:1}' // Result { \u0026quot;id\u0026quot;:1, \u0026quot;jsonrpc\u0026quot;: \u0026quot;2.0\u0026quot;, \u0026quot;result\u0026quot;: \u0026quot;0xa3f20717a250c2b0b729b7e5becbff67fdaef7e0699da4de7ca5895b02a170a12d887fd3b17bfdce3481f10bea41f45ba9f709d39ce8325427b57afcfc994cee1b\u0026quot; }  An example how to use solidity ecrecover to verify the signature calculated with eth_sign can be found here. The contract is deployed on the testnet Ropsten and Rinkeby.\neth_sendTransaction Creates new message call transaction or a contract creation, if the data field contains code.\nParameters  Object - The transaction object  from: DATA, 20 Bytes - The address the transaction is send from. to: DATA, 20 Bytes - (optional when creating new contract) The address the transaction is directed to. gas: QUANTITY - (optional, default: 90000) Integer of the gas provided for the transaction execution. It will return unused gas. gasPrice: QUANTITY - (optional, default: To-Be-Determined) Integer of the gasPrice used for each paid gas value: QUANTITY - (optional) Integer of the value sent with this transaction data: DATA - The compiled code of a contract OR the hash of the invoked method signature and encoded parameters. nonce: QUANTITY - (optional) Integer of a nonce. This allows to overwrite your own pending transactions that use the same nonce.   params: [{ \u0026quot;from\u0026quot;: \u0026quot;0xb60e8dd61c5d32be8058bb8eb970870f07233155\u0026quot;, \u0026quot;to\u0026quot;: \u0026quot;0xd46e8dd67c5d32be8058bb8eb970870f07244567\u0026quot;, \u0026quot;gas\u0026quot;: \u0026quot;0x76c0\u0026quot;, // 30400 \u0026quot;gasPrice\u0026quot;: \u0026quot;0x9184e72a000\u0026quot;, // 10000000000000 \u0026quot;value\u0026quot;: \u0026quot;0x9184e72a\u0026quot;, // 2441406250 \u0026quot;data\u0026quot;: \u0026quot;0xd46e8dd67c5d32be8d46e8dd67c5d32be8058bb8eb970870f072445675058bb8eb970870f072445675\u0026quot; }]  Returns DATA, 32 Bytes - the transaction hash, or the zero hash if the transaction is not yet available.\nUse eth_getTransactionReceipt to get the contract address, after the transaction was mined, when you created a contract.\nExample // Request curl -X POST --data '{\u0026quot;jsonrpc\u0026quot;:\u0026quot;2.0\u0026quot;,\u0026quot;method\u0026quot;:\u0026quot;eth_sendTransaction\u0026quot;,\u0026quot;params\u0026quot;:[{see above}],\u0026quot;id\u0026quot;:1}' // Result { \u0026quot;id\u0026quot;:1, \u0026quot;jsonrpc\u0026quot;: \u0026quot;2.0\u0026quot;, \u0026quot;result\u0026quot;: \u0026quot;0xe670ec64341771606e55d6b4ca35a1a6b75ee3d5145a99d05921026d1527331\u0026quot; }  eth_sendRawTransaction Creates new message call transaction or a contract creation for signed transactions.\nParameters  DATA, The signed transaction data.  params: [\u0026quot;0xd46e8dd67c5d32be8d46e8dd67c5d32be8058bb8eb970870f072445675058bb8eb970870f072445675\u0026quot;]  Returns DATA, 32 Bytes - the transaction hash, or the zero hash if the transaction is not yet available.\nUse eth_getTransactionReceipt to get the contract address, after the transaction was mined, when you created a contract.\nExample // Request curl -X POST --data '{\u0026quot;jsonrpc\u0026quot;:\u0026quot;2.0\u0026quot;,\u0026quot;method\u0026quot;:\u0026quot;eth_sendRawTransaction\u0026quot;,\u0026quot;params\u0026quot;:[{see above}],\u0026quot;id\u0026quot;:1}' // Result { \u0026quot;id\u0026quot;:1, \u0026quot;jsonrpc\u0026quot;: \u0026quot;2.0\u0026quot;, \u0026quot;result\u0026quot;: \u0026quot;0xe670ec64341771606e55d6b4ca35a1a6b75ee3d5145a99d05921026d1527331\u0026quot; }  eth_call Executes a new message call immediately without creating a transaction on the block chain.\nParameters  Object - The transaction call object  from: DATA, 20 Bytes - (optional) The address the transaction is sent from. to: DATA, 20 Bytes - The address the transaction is directed to. gas: QUANTITY - (optional) Integer of the gas provided for the transaction execution. eth_call consumes zero gas, but this parameter may be needed by some executions. gasPrice: QUANTITY - (optional) Integer of the gasPrice used for each paid gas value: QUANTITY - (optional) Integer of the value sent with this transaction data: DATA - (optional) Hash of the method signature and encoded parameters.  QUANTITY|TAG - integer block number, or the string \u0026quot;latest\u0026quot;, \u0026quot;earliest\u0026quot; or \u0026quot;pending\u0026quot;, see the default block parameter  Returns DATA - the return value of executed contract.\nExample // Request curl -X POST --data '{\u0026quot;jsonrpc\u0026quot;:\u0026quot;2.0\u0026quot;,\u0026quot;method\u0026quot;:\u0026quot;eth_call\u0026quot;,\u0026quot;params\u0026quot;:[{see above}],\u0026quot;id\u0026quot;:1}' // Result { \u0026quot;id\u0026quot;:1, \u0026quot;jsonrpc\u0026quot;: \u0026quot;2.0\u0026quot;, \u0026quot;result\u0026quot;: \u0026quot;0x\u0026quot; }  eth_estimateGas Generates and returns an estimate of how much gas is necessary to allow the transaction to complete. The transaction will not be added to the blockchain. Note that the estimate may be significantly more than the amount of gas actually used by the transaction, for a variety of reasons including EVM mechanics and node performance.\nParameters See eth_call parameters, expect that all properties are optional. If no gas limit is specified pirl uses the block gas limit from the pending block as an upper bound. As a result the returned estimate might not be enough to executed the call/transaction when the amount of gas is higher than the pending block gas limit.\nReturns QUANTITY - the amount of gas used.\nExample // Request curl -X POST --data '{\u0026quot;jsonrpc\u0026quot;:\u0026quot;2.0\u0026quot;,\u0026quot;method\u0026quot;:\u0026quot;eth_estimateGas\u0026quot;,\u0026quot;params\u0026quot;:[{see above}],\u0026quot;id\u0026quot;:1}' // Result { \u0026quot;id\u0026quot;:1, \u0026quot;jsonrpc\u0026quot;: \u0026quot;2.0\u0026quot;, \u0026quot;result\u0026quot;: \u0026quot;0x5208\u0026quot; // 21000 }  eth_getBlockByHash Returns information about a block by hash.\nParameters  DATA, 32 Bytes - Hash of a block. Boolean - If true it returns the full transaction objects, if false only the hashes of the transactions.  params: [ '0xe670ec64341771606e55d6b4ca35a1a6b75ee3d5145a99d05921026d1527331', true ]  Returns Object - A block object, or null when no block was found:\n number: QUANTITY - the block number. null when its pending block. hash: DATA, 32 Bytes - hash of the block. null when its pending block. parentHash: DATA, 32 Bytes - hash of the parent block. nonce: DATA, 8 Bytes - hash of the generated proof-of-work. null when its pending block. sha3Uncles: DATA, 32 Bytes - SHA3 of the uncles data in the block. logsBloom: DATA, 256 Bytes - the bloom filter for the logs of the block. null when its pending block. transactionsRoot: DATA, 32 Bytes - the root of the transaction trie of the block. stateRoot: DATA, 32 Bytes - the root of the final state trie of the block. receiptsRoot: DATA, 32 Bytes - the root of the receipts trie of the block. miner: DATA, 20 Bytes - the address of the beneficiary to whom the mining rewards were given. difficulty: QUANTITY - integer of the difficulty for this block. totalDifficulty: QUANTITY - integer of the total difficulty of the chain until this block. extraData: DATA - the \u0026ldquo;extra data\u0026rdquo; field of this block. size: QUANTITY - integer the size of this block in bytes. gasLimit: QUANTITY - the maximum gas allowed in this block. gasUsed: QUANTITY - the total used gas by all transactions in this block. timestamp: QUANTITY - the unix timestamp for when the block was collated. transactions: Array - Array of transaction objects, or 32 Bytes transaction hashes depending on the last given parameter. uncles: Array - Array of uncle hashes.  Example // Request curl -X POST --data '{\u0026quot;jsonrpc\u0026quot;:\u0026quot;2.0\u0026quot;,\u0026quot;method\u0026quot;:\u0026quot;eth_getBlockByHash\u0026quot;,\u0026quot;params\u0026quot;:[\u0026quot;0xe670ec64341771606e55d6b4ca35a1a6b75ee3d5145a99d05921026d1527331\u0026quot;, true],\u0026quot;id\u0026quot;:1}' // Result { \u0026quot;id\u0026quot;:1, \u0026quot;jsonrpc\u0026quot;:\u0026quot;2.0\u0026quot;, \u0026quot;result\u0026quot;: { \u0026quot;number\u0026quot;: \u0026quot;0x1b4\u0026quot;, // 436 \u0026quot;hash\u0026quot;: \u0026quot;0xe670ec64341771606e55d6b4ca35a1a6b75ee3d5145a99d05921026d1527331\u0026quot;, \u0026quot;parentHash\u0026quot;: \u0026quot;0x9646252be9520f6e71339a8df9c55e4d7619deeb018d2a3f2d21fc165dde5eb5\u0026quot;, \u0026quot;nonce\u0026quot;: \u0026quot;0xe04d296d2460cfb8472af2c5fd05b5a214109c25688d3704aed5484f9a7792f2\u0026quot;, \u0026quot;sha3Uncles\u0026quot;: \u0026quot;0x1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347\u0026quot;, \u0026quot;logsBloom\u0026quot;: \u0026quot;0xe670ec64341771606e55d6b4ca35a1a6b75ee3d5145a99d05921026d1527331\u0026quot;, \u0026quot;transactionsRoot\u0026quot;: \u0026quot;0x56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421\u0026quot;, \u0026quot;stateRoot\u0026quot;: \u0026quot;0xd5855eb08b3387c0af375e9cdb6acfc05eb8f519e419b874b6ff2ffda7ed1dff\u0026quot;, \u0026quot;miner\u0026quot;: \u0026quot;0x4e65fda2159562a496f9f3522f89122a3088497a\u0026quot;, \u0026quot;difficulty\u0026quot;: \u0026quot;0x027f07\u0026quot;, // 163591 \u0026quot;totalDifficulty\u0026quot;: \u0026quot;0x027f07\u0026quot;, // 163591 \u0026quot;extraData\u0026quot;: \u0026quot;0x0000000000000000000000000000000000000000000000000000000000000000\u0026quot;, \u0026quot;size\u0026quot;: \u0026quot;0x027f07\u0026quot;, // 163591 \u0026quot;gasLimit\u0026quot;: \u0026quot;0x9f759\u0026quot;, // 653145 \u0026quot;gasUsed\u0026quot;: \u0026quot;0x9f759\u0026quot;, // 653145 \u0026quot;timestamp\u0026quot;: \u0026quot;0x54e34e8e\u0026quot; // 1424182926 \u0026quot;transactions\u0026quot;: [{...},{ ... }] \u0026quot;uncles\u0026quot;: [\u0026quot;0x1606e5...\u0026quot;, \u0026quot;0xd5145a9...\u0026quot;] } }  eth_getBlockByNumber Returns information about a block by block number.\nParameters  QUANTITY|TAG - integer of a block number, or the string \u0026quot;earliest\u0026quot;, \u0026quot;latest\u0026quot; or \u0026quot;pending\u0026quot;, as in the default block parameter. Boolean - If true it returns the full transaction objects, if false only the hashes of the transactions.  params: [ '0x1b4', // 436 true ]  Returns See eth_getBlockByHash\nExample // Request curl -X POST --data '{\u0026quot;jsonrpc\u0026quot;:\u0026quot;2.0\u0026quot;,\u0026quot;method\u0026quot;:\u0026quot;eth_getBlockByNumber\u0026quot;,\u0026quot;params\u0026quot;:[\u0026quot;0x1b4\u0026quot;, true],\u0026quot;id\u0026quot;:1}'  Result see eth_getBlockByHash\neth_getTransactionByHash Returns the information about a transaction requested by transaction hash.\nParameters  DATA, 32 Bytes - hash of a transaction  params: [ \u0026quot;0x88df016429689c079f3b2f6ad39fa052532c56795b733da78a91ebe6a713944b\u0026quot; ]  Returns Object - A transaction object, or null when no transaction was found:\n blockHash: DATA, 32 Bytes - hash of the block where this transaction was in. null when its pending. blockNumber: QUANTITY - block number where this transaction was in. null when its pending. from: DATA, 20 Bytes - address of the sender. gas: QUANTITY - gas provided by the sender. gasPrice: QUANTITY - gas price provided by the sender in Wei. hash: DATA, 32 Bytes - hash of the transaction. input: DATA - the data send along with the transaction. nonce: QUANTITY - the number of transactions made by the sender prior to this one. to: DATA, 20 Bytes - address of the receiver. null when its a contract creation transaction. transactionIndex: QUANTITY - integer of the transaction\u0026rsquo;s index position in the block. null when its pending. value: QUANTITY - value transferred in Wei. v: QUANTITY - ECDSA recovery id r: DATA, 32 Bytes - ECDSA signature r s: DATA, 32 Bytes - ECDSA signature s  Example // Request curl -X POST --data '{\u0026quot;jsonrpc\u0026quot;:\u0026quot;2.0\u0026quot;,\u0026quot;method\u0026quot;:\u0026quot;eth_getTransactionByHash\u0026quot;,\u0026quot;params\u0026quot;:[\u0026quot;0x88df016429689c079f3b2f6ad39fa052532c56795b733da78a91ebe6a713944b\u0026quot;],\u0026quot;id\u0026quot;:1}' // Result { \u0026quot;jsonrpc\u0026quot;:\u0026quot;2.0\u0026quot;, \u0026quot;id\u0026quot;:1, \u0026quot;result\u0026quot;:{ \u0026quot;blockHash\u0026quot;:\u0026quot;0x1d59ff54b1eb26b013ce3cb5fc9dab3705b415a67127a003c3e61eb445bb8df2\u0026quot;, \u0026quot;blockNumber\u0026quot;:\u0026quot;0x5daf3b\u0026quot;, // 6139707 \u0026quot;from\u0026quot;:\u0026quot;0xa7d9ddbe1f17865597fbd27ec712455208b6b76d\u0026quot;, \u0026quot;gas\u0026quot;:\u0026quot;0xc350\u0026quot;, // 50000 \u0026quot;gasPrice\u0026quot;:\u0026quot;0x4a817c800\u0026quot;, // 20000000000 \u0026quot;hash\u0026quot;:\u0026quot;0x88df016429689c079f3b2f6ad39fa052532c56795b733da78a91ebe6a713944b\u0026quot;, \u0026quot;input\u0026quot;:\u0026quot;0x68656c6c6f21\u0026quot;, \u0026quot;nonce\u0026quot;:\u0026quot;0x15\u0026quot;, // 21 \u0026quot;to\u0026quot;:\u0026quot;0xf02c1c8e6114b1dbe8937a39260b5b0a374432bb\u0026quot;, \u0026quot;transactionIndex\u0026quot;:\u0026quot;0x41\u0026quot;, // 65 \u0026quot;value\u0026quot;:\u0026quot;0xf3dbb76162000\u0026quot;, // 4290000000000000 \u0026quot;v\u0026quot;:\u0026quot;0x25\u0026quot;, // 37 \u0026quot;r\u0026quot;:\u0026quot;0x1b5e176d927f8e9ab405058b2d2457392da3e20f328b16ddabcebc33eaac5fea\u0026quot;, \u0026quot;s\u0026quot;:\u0026quot;0x4ba69724e8f69de52f0125ad8b3c5c2cef33019bac3249e2c0a2192766d1721c\u0026quot; } }  eth_getTransactionByBlockHashAndIndex Returns information about a transaction by block hash and transaction index position.\nParameters  DATA, 32 Bytes - hash of a block. QUANTITY - integer of the transaction index position.  params: [ '0xe670ec64341771606e55d6b4ca35a1a6b75ee3d5145a99d05921026d1527331', '0x0' // 0 ]  Returns See eth_getTransactionByHash\nExample // Request curl -X POST --data '{\u0026quot;jsonrpc\u0026quot;:\u0026quot;2.0\u0026quot;,\u0026quot;method\u0026quot;:\u0026quot;eth_getTransactionByBlockHashAndIndex\u0026quot;,\u0026quot;params\u0026quot;:[\u0026quot;0xc6ef2fc5426d6ad6fd9e2a26abeab0aa2411b7ab17f30a99d3cb96aed1d1055b\u0026quot;, \u0026quot;0x0\u0026quot;],\u0026quot;id\u0026quot;:1}'  Result see eth_getTransactionByHash\neth_getTransactionByBlockNumberAndIndex Returns information about a transaction by block number and transaction index position.\nParameters  QUANTITY|TAG - a block number, or the string \u0026quot;earliest\u0026quot;, \u0026quot;latest\u0026quot; or \u0026quot;pending\u0026quot;, as in the default block parameter. QUANTITY - the transaction index position.  params: [ '0x29c', // 668 '0x0' // 0 ]  Returns See eth_getTransactionByHash\nExample // Request curl -X POST --data '{\u0026quot;jsonrpc\u0026quot;:\u0026quot;2.0\u0026quot;,\u0026quot;method\u0026quot;:\u0026quot;eth_getTransactionByBlockNumberAndIndex\u0026quot;,\u0026quot;params\u0026quot;:[\u0026quot;0x29c\u0026quot;, \u0026quot;0x0\u0026quot;],\u0026quot;id\u0026quot;:1}'  Result see eth_getTransactionByHash\neth_getTransactionReceipt Returns the receipt of a transaction by transaction hash.\nNote That the receipt is not available for pending transactions.\nParameters  DATA, 32 Bytes - hash of a transaction  params: [ '0xb903239f8543d04b5dc1ba6579132b143087c68db1b2168786408fcbce568238' ]  Returns Object - A transaction receipt object, or null when no receipt was found:\n transactionHash: DATA, 32 Bytes - hash of the transaction. transactionIndex: QUANTITY - integer of the transaction\u0026rsquo;s index position in the block. blockHash: DATA, 32 Bytes - hash of the block where this transaction was in. blockNumber: QUANTITY - block number where this transaction was in. from: DATA, 20 Bytes - address of the sender. to: DATA, 20 Bytes - address of the receiver. null when it\u0026rsquo;s a contract creation transaction. cumulativeGasUsed: QUANTITY - The total amount of gas used when this transaction was executed in the block. gasUsed: QUANTITY - The amount of gas used by this specific transaction alone. contractAddress: DATA, 20 Bytes - The contract address created, if the transaction was a contract creation, otherwise null. logs: Array - Array of log objects, which this transaction generated. logsBloom: DATA, 256 Bytes - Bloom filter for light clients to quickly retrieve related logs.   It also returns either :\n root : DATA 32 bytes of post-transaction stateroot (pre Byzantium) status: QUANTITY either 1 (success) or 0 (failure)  Example // Request curl -X POST --data '{\u0026quot;jsonrpc\u0026quot;:\u0026quot;2.0\u0026quot;,\u0026quot;method\u0026quot;:\u0026quot;eth_getTransactionReceipt\u0026quot;,\u0026quot;params\u0026quot;:[\u0026quot;0xb903239f8543d04b5dc1ba6579132b143087c68db1b2168786408fcbce568238\u0026quot;],\u0026quot;id\u0026quot;:1}' // Result { \u0026quot;id\u0026quot;:1, \u0026quot;jsonrpc\u0026quot;:\u0026quot;2.0\u0026quot;, \u0026quot;result\u0026quot;: { transactionHash: '0xb903239f8543d04b5dc1ba6579132b143087c68db1b2168786408fcbce568238', transactionIndex: '0x1', // 1 blockNumber: '0xb', // 11 blockHash: '0xc6ef2fc5426d6ad6fd9e2a26abeab0aa2411b7ab17f30a99d3cb96aed1d1055b', cumulativeGasUsed: '0x33bc', // 13244 gasUsed: '0x4dc', // 1244 contractAddress: '0xb60e8dd61c5d32be8058bb8eb970870f07233155', // or null, if none was created logs: [{ // logs as returned by getFilterLogs, etc. }, ...], logsBloom: \u0026quot;0x00...0\u0026quot;, // 256 byte bloom filter status: '0x1' } }  eth_getUncleByBlockHashAndIndex Returns information about a uncle of a block by hash and uncle index position.\nParameters  DATA, 32 Bytes - hash a block. QUANTITY - the uncle\u0026rsquo;s index position.  params: [ '0xc6ef2fc5426d6ad6fd9e2a26abeab0aa2411b7ab17f30a99d3cb96aed1d1055b', '0x0' // 0 ]  Returns See eth_getBlockByHash\nExample // Request curl -X POST --data '{\u0026quot;jsonrpc\u0026quot;:\u0026quot;2.0\u0026quot;,\u0026quot;method\u0026quot;:\u0026quot;eth_getUncleByBlockHashAndIndex\u0026quot;,\u0026quot;params\u0026quot;:[\u0026quot;0xc6ef2fc5426d6ad6fd9e2a26abeab0aa2411b7ab17f30a99d3cb96aed1d1055b\u0026quot;, \u0026quot;0x0\u0026quot;],\u0026quot;id\u0026quot;:1}'  Result see eth_getBlockByHash\nNote: An uncle doesn\u0026rsquo;t contain individual transactions.\neth_getUncleByBlockNumberAndIndex Returns information about a uncle of a block by number and uncle index position.\nParameters  QUANTITY|TAG - a block number, or the string \u0026quot;earliest\u0026quot;, \u0026quot;latest\u0026quot; or \u0026quot;pending\u0026quot;, as in the default block parameter. QUANTITY - the uncle\u0026rsquo;s index position.  params: [ '0x29c', // 668 '0x0' // 0 ]  Returns See eth_getBlockByHash\nNote: An uncle doesn\u0026rsquo;t contain individual transactions.\nExample // Request curl -X POST --data '{\u0026quot;jsonrpc\u0026quot;:\u0026quot;2.0\u0026quot;,\u0026quot;method\u0026quot;:\u0026quot;eth_getUncleByBlockNumberAndIndex\u0026quot;,\u0026quot;params\u0026quot;:[\u0026quot;0x29c\u0026quot;, \u0026quot;0x0\u0026quot;],\u0026quot;id\u0026quot;:1}'  Result see eth_getBlockByHash\neth_getCompilers (DEPRECATED) Returns a list of available compilers in the client.\nParameters none\nReturns Array - Array of available compilers.\nExample // Request curl -X POST --data '{\u0026quot;jsonrpc\u0026quot;:\u0026quot;2.0\u0026quot;,\u0026quot;method\u0026quot;:\u0026quot;eth_getCompilers\u0026quot;,\u0026quot;params\u0026quot;:[],\u0026quot;id\u0026quot;:1}' // Result { \u0026quot;id\u0026quot;:1, \u0026quot;jsonrpc\u0026quot;: \u0026quot;2.0\u0026quot;, \u0026quot;result\u0026quot;: [\u0026quot;solidity\u0026quot;, \u0026quot;lll\u0026quot;, \u0026quot;serpent\u0026quot;] }  eth_compileSolidity (DEPRECATED) Returns compiled solidity code.\nParameters  String - The source code.  params: [ \u0026quot;contract test { function multiply(uint a) returns(uint d) { return a * 7; } }\u0026quot;, ]  Returns DATA - The compiled source code.\nExample // Request curl -X POST --data '{\u0026quot;jsonrpc\u0026quot;:\u0026quot;2.0\u0026quot;,\u0026quot;method\u0026quot;:\u0026quot;eth_compileSolidity\u0026quot;,\u0026quot;params\u0026quot;:[\u0026quot;contract test { function multiply(uint a) returns(uint d) { return a * 7; } }\u0026quot;],\u0026quot;id\u0026quot;:1}' // Result { \u0026quot;id\u0026quot;:1, \u0026quot;jsonrpc\u0026quot;: \u0026quot;2.0\u0026quot;, \u0026quot;result\u0026quot;: { \u0026quot;code\u0026quot;: \u0026quot;0x605880600c6000396000f3006000357c010000000000000000000000000000000000000000000000000000000090048063c6888fa114602e57005b603d6004803590602001506047565b8060005260206000f35b60006007820290506053565b91905056\u0026quot;, \u0026quot;info\u0026quot;: { \u0026quot;source\u0026quot;: \u0026quot;contract test {\\n function multiply(uint a) constant returns(uint d) {\\n return a * 7;\\n }\\n}\\n\u0026quot;, \u0026quot;language\u0026quot;: \u0026quot;Solidity\u0026quot;, \u0026quot;languageVersion\u0026quot;: \u0026quot;0\u0026quot;, \u0026quot;compilerVersion\u0026quot;: \u0026quot;0.9.19\u0026quot;, \u0026quot;abiDefinition\u0026quot;: [ { \u0026quot;constant\u0026quot;: true, \u0026quot;inputs\u0026quot;: [ { \u0026quot;name\u0026quot;: \u0026quot;a\u0026quot;, \u0026quot;type\u0026quot;: \u0026quot;uint256\u0026quot; } ], \u0026quot;name\u0026quot;: \u0026quot;multiply\u0026quot;, \u0026quot;outputs\u0026quot;: [ { \u0026quot;name\u0026quot;: \u0026quot;d\u0026quot;, \u0026quot;type\u0026quot;: \u0026quot;uint256\u0026quot; } ], \u0026quot;type\u0026quot;: \u0026quot;function\u0026quot; } ], \u0026quot;userDoc\u0026quot;: { \u0026quot;methods\u0026quot;: {} }, \u0026quot;developerDoc\u0026quot;: { \u0026quot;methods\u0026quot;: {} } } }  eth_compileLLL (DEPRECATED) Returns compiled LLL code.\nParameters  String - The source code.  params: [ \u0026quot;(returnlll (suicide (caller)))\u0026quot;, ]  Returns DATA - The compiled source code.\nExample // Request curl -X POST --data '{\u0026quot;jsonrpc\u0026quot;:\u0026quot;2.0\u0026quot;,\u0026quot;method\u0026quot;:\u0026quot;eth_compileLLL\u0026quot;,\u0026quot;params\u0026quot;:[\u0026quot;(returnlll (suicide (caller)))\u0026quot;],\u0026quot;id\u0026quot;:1}' // Result { \u0026quot;id\u0026quot;:1, \u0026quot;jsonrpc\u0026quot;: \u0026quot;2.0\u0026quot;, \u0026quot;result\u0026quot;: \u0026quot;0x603880600c6000396000f3006001600060e060020a600035048063c6888fa114601857005b6021600435602b565b8060005260206000f35b600081600702905091905056\u0026quot; // the compiled source code }  eth_compileSerpent (DEPRECATED) Returns compiled serpent code.\nParameters  String - The source code.  params: [ \u0026quot;/* some serpent */\u0026quot;, ]  Returns DATA - The compiled source code.\nExample // Request curl -X POST --data '{\u0026quot;jsonrpc\u0026quot;:\u0026quot;2.0\u0026quot;,\u0026quot;method\u0026quot;:\u0026quot;eth_compileSerpent\u0026quot;,\u0026quot;params\u0026quot;:[\u0026quot;/* some serpent */\u0026quot;],\u0026quot;id\u0026quot;:1}' // Result { \u0026quot;id\u0026quot;:1, \u0026quot;jsonrpc\u0026quot;: \u0026quot;2.0\u0026quot;, \u0026quot;result\u0026quot;: \u0026quot;0x603880600c6000396000f3006001600060e060020a600035048063c6888fa114601857005b6021600435602b565b8060005260206000f35b600081600702905091905056\u0026quot; // the compiled source code }  eth_newFilter Creates a filter object, based on filter options, to notify when the state changes (logs). To check if the state has changed, call eth_getFilterChanges.\nA note on specifying topic filters: Topics are order-dependent. A transaction with a log with topics [A, B] will be matched by the following topic filters: * [] \u0026ldquo;anything\u0026rdquo; * [A] \u0026ldquo;A in first position (and anything after)\u0026rdquo; * [null, B] \u0026ldquo;anything in first position AND B in second position (and anything after)\u0026rdquo; * [A, B] \u0026ldquo;A in first position AND B in second position (and anything after)\u0026rdquo; * [[A, B], [A, B]] \u0026ldquo;(A OR B) in first position AND (A OR B) in second position (and anything after)\u0026rdquo;\nParameters  Object - The filter options:  fromBlock: QUANTITY|TAG - (optional, default: \u0026quot;latest\u0026quot;) Integer block number, or \u0026quot;latest\u0026quot; for the last mined block or \u0026quot;pending\u0026quot;, \u0026quot;earliest\u0026quot; for not yet mined transactions. toBlock: QUANTITY|TAG - (optional, default: \u0026quot;latest\u0026quot;) Integer block number, or \u0026quot;latest\u0026quot; for the last mined block or \u0026quot;pending\u0026quot;, \u0026quot;earliest\u0026quot; for not yet mined transactions. address: DATA|Array, 20 Bytes - (optional) Contract address or a list of addresses from which logs should originate. topics: Array of DATA, - (optional) Array of 32 Bytes DATA topics. Topics are order-dependent. Each topic can also be an array of DATA with \u0026ldquo;or\u0026rdquo; options.   params: [{ \u0026quot;fromBlock\u0026quot;: \u0026quot;0x1\u0026quot;, \u0026quot;toBlock\u0026quot;: \u0026quot;0x2\u0026quot;, \u0026quot;address\u0026quot;: \u0026quot;0x8888f1f195afa192cfee860698584c030f4c9db1\u0026quot;, \u0026quot;topics\u0026quot;: [\u0026quot;0x000000000000000000000000a94f5374fce5edbc8e2a8697c15331677e6ebf0b\u0026quot;, null, [\u0026quot;0x000000000000000000000000a94f5374fce5edbc8e2a8697c15331677e6ebf0b\u0026quot;, \u0026quot;0x0000000000000000000000000aff3454fce5edbc8cca8697c15331677e6ebccc\u0026quot;]] }]  Returns QUANTITY - A filter id.\nExample // Request curl -X POST --data '{\u0026quot;jsonrpc\u0026quot;:\u0026quot;2.0\u0026quot;,\u0026quot;method\u0026quot;:\u0026quot;eth_newFilter\u0026quot;,\u0026quot;params\u0026quot;:[{\u0026quot;topics\u0026quot;:[\u0026quot;0x0000000000000000000000000000000000000000000000000000000012341234\u0026quot;]}],\u0026quot;id\u0026quot;:73}' // Result { \u0026quot;id\u0026quot;:1, \u0026quot;jsonrpc\u0026quot;: \u0026quot;2.0\u0026quot;, \u0026quot;result\u0026quot;: \u0026quot;0x1\u0026quot; // 1 }  eth_newBlockFilter Creates a filter in the node, to notify when a new block arrives. To check if the state has changed, call eth_getFilterChanges.\nParameters None\nReturns QUANTITY - A filter id.\nExample // Request curl -X POST --data '{\u0026quot;jsonrpc\u0026quot;:\u0026quot;2.0\u0026quot;,\u0026quot;method\u0026quot;:\u0026quot;eth_newBlockFilter\u0026quot;,\u0026quot;params\u0026quot;:[],\u0026quot;id\u0026quot;:73}' // Result { \u0026quot;id\u0026quot;:1, \u0026quot;jsonrpc\u0026quot;: \u0026quot;2.0\u0026quot;, \u0026quot;result\u0026quot;: \u0026quot;0x1\u0026quot; // 1 }  eth_newPendingTransactionFilter Creates a filter in the node, to notify when new pending transactions arrive. To check if the state has changed, call eth_getFilterChanges.\nParameters None\nReturns QUANTITY - A filter id.\nExample // Request curl -X POST --data '{\u0026quot;jsonrpc\u0026quot;:\u0026quot;2.0\u0026quot;,\u0026quot;method\u0026quot;:\u0026quot;eth_newPendingTransactionFilter\u0026quot;,\u0026quot;params\u0026quot;:[],\u0026quot;id\u0026quot;:73}' // Result { \u0026quot;id\u0026quot;:1, \u0026quot;jsonrpc\u0026quot;: \u0026quot;2.0\u0026quot;, \u0026quot;result\u0026quot;: \u0026quot;0x1\u0026quot; // 1 }  eth_uninstallFilter Uninstalls a filter with given id. Should always be called when watch is no longer needed. Additionally Filters timeout when they aren\u0026rsquo;t requested with eth_getFilterChanges for a period of time.\nParameters  QUANTITY - The filter id.  params: [ \u0026quot;0xb\u0026quot; // 11 ]  Returns Boolean - true if the filter was successfully uninstalled, otherwise false.\nExample // Request curl -X POST --data '{\u0026quot;jsonrpc\u0026quot;:\u0026quot;2.0\u0026quot;,\u0026quot;method\u0026quot;:\u0026quot;eth_uninstallFilter\u0026quot;,\u0026quot;params\u0026quot;:[\u0026quot;0xb\u0026quot;],\u0026quot;id\u0026quot;:73}' // Result { \u0026quot;id\u0026quot;:1, \u0026quot;jsonrpc\u0026quot;: \u0026quot;2.0\u0026quot;, \u0026quot;result\u0026quot;: true }  eth_getFilterChanges Polling method for a filter, which returns an array of logs which occurred since last poll.\nParameters  QUANTITY - the filter id.  params: [ \u0026quot;0x16\u0026quot; // 22 ]  Returns Array - Array of log objects, or an empty array if nothing has changed since last poll.\n For filters created with eth_newBlockFilter the return are block hashes (DATA, 32 Bytes), e.g. [\u0026quot;0x3454645634534...\u0026quot;]. For filters created with eth_newPendingTransactionFilter the return are transaction hashes (DATA, 32 Bytes), e.g. [\u0026quot;0x6345343454645...\u0026quot;]. For filters created with eth_newFilter logs are objects with following params:\n removed: TAG - true when the log was removed, due to a chain reorganization. false if its a valid log. logIndex: QUANTITY - integer of the log index position in the block. null when its pending log. transactionIndex: QUANTITY - integer of the transactions index position log was created from. null when its pending log. transactionHash: DATA, 32 Bytes - hash of the transactions this log was created from. null when its pending log. blockHash: DATA, 32 Bytes - hash of the block where this log was in. null when its pending. null when its pending log. blockNumber: QUANTITY - the block number where this log was in. null when its pending. null when its pending log. address: DATA, 20 Bytes - address from which this log originated. data: DATA - contains the non-indexed arguments of the log. topics: Array of DATA - Array of 0 to 4 32 Bytes DATA of indexed log arguments. (In solidity: The first topic is the hash of the signature of the event (e.g. Deposit(address,bytes32,uint256)), except you declared the event with the anonymous specifier.)   Example // Request curl -X POST --data '{\u0026quot;jsonrpc\u0026quot;:\u0026quot;2.0\u0026quot;,\u0026quot;method\u0026quot;:\u0026quot;eth_getFilterChanges\u0026quot;,\u0026quot;params\u0026quot;:[\u0026quot;0x16\u0026quot;],\u0026quot;id\u0026quot;:73}' // Result { \u0026quot;id\u0026quot;:1, \u0026quot;jsonrpc\u0026quot;:\u0026quot;2.0\u0026quot;, \u0026quot;result\u0026quot;: [{ \u0026quot;logIndex\u0026quot;: \u0026quot;0x1\u0026quot;, // 1 \u0026quot;blockNumber\u0026quot;:\u0026quot;0x1b4\u0026quot;, // 436 \u0026quot;blockHash\u0026quot;: \u0026quot;0x8216c5785ac562ff41e2dcfdf5785ac562ff41e2dcfdf829c5a142f1fccd7d\u0026quot;, \u0026quot;transactionHash\u0026quot;: \u0026quot;0xdf829c5a142f1fccd7d8216c5785ac562ff41e2dcfdf5785ac562ff41e2dcf\u0026quot;, \u0026quot;transactionIndex\u0026quot;: \u0026quot;0x0\u0026quot;, // 0 \u0026quot;address\u0026quot;: \u0026quot;0x16c5785ac562ff41e2dcfdf829c5a142f1fccd7d\u0026quot;, \u0026quot;data\u0026quot;:\u0026quot;0x0000000000000000000000000000000000000000000000000000000000000000\u0026quot;, \u0026quot;topics\u0026quot;: [\u0026quot;0x59ebeb90bc63057b6515673c3ecf9438e5058bca0f92585014eced636878c9a5\u0026quot;] },{ ... }] }  eth_getFilterLogs Returns an array of all logs matching filter with given id.\nParameters  QUANTITY - The filter id.  params: [ \u0026quot;0x16\u0026quot; // 22 ]  Returns See eth_getFilterChanges\nExample // Request curl -X POST --data '{\u0026quot;jsonrpc\u0026quot;:\u0026quot;2.0\u0026quot;,\u0026quot;method\u0026quot;:\u0026quot;eth_getFilterLogs\u0026quot;,\u0026quot;params\u0026quot;:[\u0026quot;0x16\u0026quot;],\u0026quot;id\u0026quot;:74}'  Result see eth_getFilterChanges\neth_getLogs Returns an array of all logs matching a given filter object.\nParameters  Object - The filter options:  fromBlock: QUANTITY|TAG - (optional, default: \u0026quot;latest\u0026quot;) Integer block number, or \u0026quot;latest\u0026quot; for the last mined block or \u0026quot;pending\u0026quot;, \u0026quot;earliest\u0026quot; for not yet mined transactions. toBlock: QUANTITY|TAG - (optional, default: \u0026quot;latest\u0026quot;) Integer block number, or \u0026quot;latest\u0026quot; for the last mined block or \u0026quot;pending\u0026quot;, \u0026quot;earliest\u0026quot; for not yet mined transactions. address: DATA|Array, 20 Bytes - (optional) Contract address or a list of addresses from which logs should originate. topics: Array of DATA, - (optional) Array of 32 Bytes DATA topics. Topics are order-dependent. Each topic can also be an array of DATA with \u0026ldquo;or\u0026rdquo; options. blockhash: DATA, 32 Bytes - (optional) With the addition of EIP-234 (pirl\u0026gt;= v1.8.13 or Parity \u0026gt;= v2.1.0), blockHash is a new filter option which restricts the logs returned to the single block with the 32-byte hash blockHash. Using blockHash is equivalent to fromBlock = toBlock = the block number with hash blockHash. If blockHash is present in the filter criteria, then neither fromBlock nor toBlock are allowed.   params: [{ \u0026quot;topics\u0026quot;: [\u0026quot;0x000000000000000000000000a94f5374fce5edbc8e2a8697c15331677e6ebf0b\u0026quot;] }]  Returns See eth_getFilterChanges\nExample // Request curl -X POST --data '{\u0026quot;jsonrpc\u0026quot;:\u0026quot;2.0\u0026quot;,\u0026quot;method\u0026quot;:\u0026quot;eth_getLogs\u0026quot;,\u0026quot;params\u0026quot;:[{\u0026quot;topics\u0026quot;:[\u0026quot;0x000000000000000000000000a94f5374fce5edbc8e2a8697c15331677e6ebf0b\u0026quot;]}],\u0026quot;id\u0026quot;:74}'  Result see eth_getFilterChanges\neth_getWork Returns the hash of the current block, the seedHash, and the boundary condition to be met (\u0026ldquo;target\u0026rdquo;).\nParameters none\nReturns Array - Array with the following properties: 1. DATA, 32 Bytes - current block header pow-hash 2. DATA, 32 Bytes - the seed hash used for the DAG. 3. DATA, 32 Bytes - the boundary condition (\u0026ldquo;target\u0026rdquo;), 2^256 / difficulty.\nExample // Request curl -X POST --data '{\u0026quot;jsonrpc\u0026quot;:\u0026quot;2.0\u0026quot;,\u0026quot;method\u0026quot;:\u0026quot;eth_getWork\u0026quot;,\u0026quot;params\u0026quot;:[],\u0026quot;id\u0026quot;:73}' // Result { \u0026quot;id\u0026quot;:1, \u0026quot;jsonrpc\u0026quot;:\u0026quot;2.0\u0026quot;, \u0026quot;result\u0026quot;: [ \u0026quot;0x1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef\u0026quot;, \u0026quot;0x5EED00000000000000000000000000005EED0000000000000000000000000000\u0026quot;, \u0026quot;0xd1ff1c01710000000000000000000000d1ff1c01710000000000000000000000\u0026quot; ] }  eth_submitWork Used for submitting a proof-of-work solution.\nParameters  DATA, 8 Bytes - The nonce found (64 bits) DATA, 32 Bytes - The header\u0026rsquo;s pow-hash (256 bits) DATA, 32 Bytes - The mix digest (256 bits)  params: [ \u0026quot;0x0000000000000001\u0026quot;, \u0026quot;0x1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef\u0026quot;, \u0026quot;0xD1FE5700000000000000000000000000D1FE5700000000000000000000000000\u0026quot; ]  Returns Boolean - returns true if the provided solution is valid, otherwise false.\nExample // Request curl -X POST --data '{\u0026quot;jsonrpc\u0026quot;:\u0026quot;2.0\u0026quot;, \u0026quot;method\u0026quot;:\u0026quot;eth_submitWork\u0026quot;, \u0026quot;params\u0026quot;:[\u0026quot;0x0000000000000001\u0026quot;, \u0026quot;0x1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef\u0026quot;, \u0026quot;0xD1GE5700000000000000000000000000D1GE5700000000000000000000000000\u0026quot;],\u0026quot;id\u0026quot;:73}' // Result { \u0026quot;id\u0026quot;:73, \u0026quot;jsonrpc\u0026quot;:\u0026quot;2.0\u0026quot;, \u0026quot;result\u0026quot;: true }  eth_submitHashrate Used for submitting mining hashrate.\nParameters  Hashrate, a hexadecimal string representation (32 bytes) of the hash rate ID, String - A random hexadecimal(32 bytes) ID identifying the client  params: [ \u0026quot;0x0000000000000000000000000000000000000000000000000000000000500000\u0026quot;, \u0026quot;0x59daa26581d0acd1fce254fb7e85952f4c09d0915afd33d3886cd914bc7d283c\u0026quot; ]  Returns Boolean - returns true if submitting went through succesfully and false otherwise.\nExample // Request curl -X POST --data '{\u0026quot;jsonrpc\u0026quot;:\u0026quot;2.0\u0026quot;, \u0026quot;method\u0026quot;:\u0026quot;eth_submitHashrate\u0026quot;, \u0026quot;params\u0026quot;:[\u0026quot;0x0000000000000000000000000000000000000000000000000000000000500000\u0026quot;, \u0026quot;0x59daa26581d0acd1fce254fb7e85952f4c09d0915afd33d3886cd914bc7d283c\u0026quot;],\u0026quot;id\u0026quot;:73}' // Result { \u0026quot;id\u0026quot;:73, \u0026quot;jsonrpc\u0026quot;:\u0026quot;2.0\u0026quot;, \u0026quot;result\u0026quot;: true }  eth_getProof Returns the account- and storage-values of the specified account including the Merkle-proof.\ngetProof-Parameters  DATA, 20 bytes - address of the account or contract ARRAY, 32 Bytes - array of storage-keys which should be proofed and included. See eth_getStorageAt QUANTITY|TAG - integer block number, or the string \u0026ldquo;latest\u0026rdquo; or \u0026ldquo;earliest\u0026rdquo;, see the default block parameter  params: [\u0026quot;0x1234567890123456789012345678901234567890\u0026quot;,[\u0026quot;0x0000000000000000000000000000000000000000000000000000000000000000\u0026quot;,\u0026quot;0x0000000000000000000000000000000000000000000000000000000000000001\u0026quot;],\u0026quot;latest\u0026quot;]  getProof-Returns Returns Object - A account object:\nbalance: QUANTITY - the balance of the account. See eth_getBalance\ncodeHash: DATA, 32 Bytes - hash of the code of the account. For a simple Account without code it will return \u0026ldquo;0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470\u0026rdquo;\nnonce: QUANTITY, - nonce of the account. See eth_getTransactionCount\nstorageHash: DATA, 32 Bytes - SHA3 of the StorageRoot. All storage will deliver a MerkleProof starting with this rootHash.\naccountProof: ARRAY - Array of rlp-serialized MerkleTree-Nodes, starting with the stateRoot-Node, following the path of the SHA3 (address) as key.\nstorageProof: ARRAY - Array of storage-entries as requested. Each entry is a object with these properties:\nkey: QUANTITY - the requested storage key value: QUANTITY - the storage value proof: ARRAY - Array of rlp-serialized MerkleTree-Nodes, starting with the storageHash-Node, following the path of the SHA3 (key) as path.\ngetProof-Example // Request curl -X POST --data '{\u0026quot;jsonrpc\u0026quot;:\u0026quot;2.0\u0026quot;,\u0026quot;method\u0026quot;:\u0026quot;eth_getProof\u0026quot;,\u0026quot;params\u0026quot;:[\u0026quot;0x1234567890123456789012345678901234567890\u0026quot;,[\u0026quot;0x0000000000000000000000000000000000000000000000000000000000000000\u0026quot;,\u0026quot;0x0000000000000000000000000000000000000000000000000000000000000001\u0026quot;],\u0026quot;latest\u0026quot;],\u0026quot;id\u0026quot;:1}' -H \u0026quot;Content-type:application/json\u0026quot; http://localhost:8545 // Result { \u0026quot;jsonrpc\u0026quot;: \u0026quot;2.0\u0026quot;, \u0026quot;id\u0026quot;: 1, \u0026quot;result\u0026quot;: { \u0026quot;address\u0026quot;: \u0026quot;0x1234567890123456789012345678901234567890\u0026quot;, \u0026quot;accountProof\u0026quot;: [ \u0026quot;0xf90211a090dcaf88c40c7bbc95a912cbdde67c175767b31173df9ee4b0d733bfdd511c43a0babe369f6b12092f49181ae04ca173fb68d1a5456f18d20fa32cba73954052bda0473ecf8a7e36a829e75039a3b055e51b8332cbf03324ab4af2066bbd6fbf0021a0bbda34753d7aa6c38e603f360244e8f59611921d9e1f128372fec0d586d4f9e0a04e44caecff45c9891f74f6a2156735886eedf6f1a733628ebc802ec79d844648a0a5f3f2f7542148c973977c8a1e154c4300fec92f755f7846f1b734d3ab1d90e7a0e823850f50bf72baae9d1733a36a444ab65d0a6faaba404f0583ce0ca4dad92da0f7a00cbe7d4b30b11faea3ae61b7f1f2b315b61d9f6bd68bfe587ad0eeceb721a07117ef9fc932f1a88e908eaead8565c19b5645dc9e5b1b6e841c5edbdfd71681a069eb2de283f32c11f859d7bcf93da23990d3e662935ed4d6b39ce3673ec84472a0203d26456312bbc4da5cd293b75b840fc5045e493d6f904d180823ec22bfed8ea09287b5c21f2254af4e64fca76acc5cd87399c7f1ede818db4326c98ce2dc2208a06fc2d754e304c48ce6a517753c62b1a9c1d5925b89707486d7fc08919e0a94eca07b1c54f15e299bd58bdfef9741538c7828b5d7d11a489f9c20d052b3471df475a051f9dd3739a927c89e357580a4c97b40234aa01ed3d5e0390dc982a7975880a0a089d613f26159af43616fd9455bb461f4869bfede26f2130835ed067a8b967bfb80\u0026quot;, \u0026quot;0xf90211a0395d87a95873cd98c21cf1df9421af03f7247880a2554e20738eec2c7507a494a0bcf6546339a1e7e14eb8fb572a968d217d2a0d1f3bc4257b22ef5333e9e4433ca012ae12498af8b2752c99efce07f3feef8ec910493be749acd63822c3558e6671a0dbf51303afdc36fc0c2d68a9bb05dab4f4917e7531e4a37ab0a153472d1b86e2a0ae90b50f067d9a2244e3d975233c0a0558c39ee152969f6678790abf773a9621a01d65cd682cc1be7c5e38d8da5c942e0a73eeaef10f387340a40a106699d494c3a06163b53d956c55544390c13634ea9aa75309f4fd866f312586942daf0f60fb37a058a52c1e858b1382a8893eb9c1f111f266eb9e21e6137aff0dddea243a567000a037b4b100761e02de63ea5f1fcfcf43e81a372dafb4419d126342136d329b7a7ba032472415864b08f808ba4374092003c8d7c40a9f7f9fe9cc8291f62538e1cc14a074e238ff5ec96b810364515551344100138916594d6af966170ff326a092fab0a0d31ac4eef14a79845200a496662e92186ca8b55e29ed0f9f59dbc6b521b116fea090607784fe738458b63c1942bba7c0321ae77e18df4961b2bc66727ea996464ea078f757653c1b63f72aff3dcc3f2a2e4c8cb4a9d36d1117c742833c84e20de994a0f78407de07f4b4cb4f899dfb95eedeb4049aeb5fc1635d65cf2f2f4dfd25d1d7a0862037513ba9d45354dd3e36264aceb2b862ac79d2050f14c95657e43a51b85c80\u0026quot;, \u0026quot;0xf90171a04ad705ea7bf04339fa36b124fa221379bd5a38ffe9a6112cb2d94be3a437b879a08e45b5f72e8149c01efcb71429841d6a8879d4bbe27335604a5bff8dfdf85dcea00313d9b2f7c03733d6549ea3b810e5262ed844ea12f70993d87d3e0f04e3979ea0b59e3cdd6750fa8b15164612a5cb6567cdfb386d4e0137fccee5f35ab55d0efda0fe6db56e42f2057a071c980a778d9a0b61038f269dd74a0e90155b3f40f14364a08538587f2378a0849f9608942cf481da4120c360f8391bbcc225d811823c6432a026eac94e755534e16f9552e73025d6d9c30d1d7682a4cb5bd7741ddabfd48c50a041557da9a74ca68da793e743e81e2029b2835e1cc16e9e25bd0c1e89d4ccad6980a041dda0a40a21ade3a20fcd1a4abb2a42b74e9a32b02424ff8db4ea708a5e0fb9a09aaf8326a51f613607a8685f57458329b41e938bb761131a5747e066b81a0a16808080a022e6cef138e16d2272ef58434ddf49260dc1de1f8ad6dfca3da5d2a92aaaadc58080\u0026quot;, \u0026quot;0xf851808080a009833150c367df138f1538689984b8a84fc55692d3d41fe4d1e5720ff5483a6980808080808080808080a0a319c1c415b271afc0adcb664e67738d103ac168e0bc0b7bd2da7966165cb9518080\u0026quot; ], \u0026quot;balance\u0026quot;: \u0026quot;0x0\u0026quot;, \u0026quot;codeHash\u0026quot;: \u0026quot;0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470\u0026quot;, \u0026quot;nonce\u0026quot;: \u0026quot;0x0\u0026quot;, \u0026quot;storageHash\u0026quot;: \u0026quot;0x56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421\u0026quot;, \u0026quot;storageProof\u0026quot;: [ { \u0026quot;key\u0026quot;: \u0026quot;0x0000000000000000000000000000000000000000000000000000000000000000\u0026quot;, \u0026quot;value\u0026quot;: \u0026quot;0x0\u0026quot;, \u0026quot;proof\u0026quot;: [] }, { \u0026quot;key\u0026quot;: \u0026quot;0x0000000000000000000000000000000000000000000000000000000000000001\u0026quot;, \u0026quot;value\u0026quot;: \u0026quot;0x0\u0026quot;, \u0026quot;proof\u0026quot;: [] } ] } }  db_putString Stores a string in the local database.\nNote this function is deprecated and will be removed in the future.\nParameters  String - Database name. String - Key name. String - String to store.  params: [ \u0026quot;testDB\u0026quot;, \u0026quot;myKey\u0026quot;, \u0026quot;myString\u0026quot; ]  Returns Boolean - returns true if the value was stored, otherwise false.\nExample // Request curl -X POST --data '{\u0026quot;jsonrpc\u0026quot;:\u0026quot;2.0\u0026quot;,\u0026quot;method\u0026quot;:\u0026quot;db_putString\u0026quot;,\u0026quot;params\u0026quot;:[\u0026quot;testDB\u0026quot;,\u0026quot;myKey\u0026quot;,\u0026quot;myString\u0026quot;],\u0026quot;id\u0026quot;:73}' // Result { \u0026quot;id\u0026quot;:1, \u0026quot;jsonrpc\u0026quot;:\u0026quot;2.0\u0026quot;, \u0026quot;result\u0026quot;: true }  db_getString Returns string from the local database.\nNote this function is deprecated and will be removed in the future.\nParameters  String - Database name. String - Key name.  params: [ \u0026quot;testDB\u0026quot;, \u0026quot;myKey\u0026quot;, ]  Returns String - The previously stored string.\nExample // Request curl -X POST --data '{\u0026quot;jsonrpc\u0026quot;:\u0026quot;2.0\u0026quot;,\u0026quot;method\u0026quot;:\u0026quot;db_getString\u0026quot;,\u0026quot;params\u0026quot;:[\u0026quot;testDB\u0026quot;,\u0026quot;myKey\u0026quot;],\u0026quot;id\u0026quot;:73}' // Result { \u0026quot;id\u0026quot;:1, \u0026quot;jsonrpc\u0026quot;:\u0026quot;2.0\u0026quot;, \u0026quot;result\u0026quot;: \u0026quot;myString\u0026quot; }  db_putHex Stores binary data in the local database.\nNote this function is deprecated and will be removed in the future.\nParameters  String - Database name. String - Key name. DATA - The data to store.  params: [ \u0026quot;testDB\u0026quot;, \u0026quot;myKey\u0026quot;, \u0026quot;0x68656c6c6f20776f726c64\u0026quot; ]  Returns Boolean - returns true if the value was stored, otherwise false.\nExample // Request curl -X POST --data '{\u0026quot;jsonrpc\u0026quot;:\u0026quot;2.0\u0026quot;,\u0026quot;method\u0026quot;:\u0026quot;db_putHex\u0026quot;,\u0026quot;params\u0026quot;:[\u0026quot;testDB\u0026quot;,\u0026quot;myKey\u0026quot;,\u0026quot;0x68656c6c6f20776f726c64\u0026quot;],\u0026quot;id\u0026quot;:73}' // Result { \u0026quot;id\u0026quot;:1, \u0026quot;jsonrpc\u0026quot;:\u0026quot;2.0\u0026quot;, \u0026quot;result\u0026quot;: true }  db_getHex Returns binary data from the local database.\nNote this function is deprecated and will be removed in the future.\nParameters  String - Database name. String - Key name.  params: [ \u0026quot;testDB\u0026quot;, \u0026quot;myKey\u0026quot;, ]  Returns DATA - The previously stored data.\nExample // Request curl -X POST --data '{\u0026quot;jsonrpc\u0026quot;:\u0026quot;2.0\u0026quot;,\u0026quot;method\u0026quot;:\u0026quot;db_getHex\u0026quot;,\u0026quot;params\u0026quot;:[\u0026quot;testDB\u0026quot;,\u0026quot;myKey\u0026quot;],\u0026quot;id\u0026quot;:73}' // Result { \u0026quot;id\u0026quot;:1, \u0026quot;jsonrpc\u0026quot;:\u0026quot;2.0\u0026quot;, \u0026quot;result\u0026quot;: \u0026quot;0x68656c6c6f20776f726c64\u0026quot; }  shh_version Returns the current whisper protocol version.\nParameters none\nReturns String - The current whisper protocol version\nExample // Request curl -X POST --data '{\u0026quot;jsonrpc\u0026quot;:\u0026quot;2.0\u0026quot;,\u0026quot;method\u0026quot;:\u0026quot;shh_version\u0026quot;,\u0026quot;params\u0026quot;:[],\u0026quot;id\u0026quot;:67}' // Result { \u0026quot;id\u0026quot;:67, \u0026quot;jsonrpc\u0026quot;: \u0026quot;2.0\u0026quot;, \u0026quot;result\u0026quot;: \u0026quot;2\u0026quot; }  shh_post Sends a whisper message.\nParameters  Object - The whisper post object:  from: DATA, 60 Bytes - (optional) The identity of the sender. to: DATA, 60 Bytes - (optional) The identity of the receiver. When present whisper will encrypt the message so that only the receiver can decrypt it. topics: Array of DATA - Array of DATA topics, for the receiver to identify messages. payload: DATA - The payload of the message. priority: QUANTITY - The integer of the priority in a range from \u0026hellip; (?). ttl: QUANTITY - integer of the time to live in seconds.   params: [{ from: \u0026quot;0x04f96a5e25610293e42a73908e93ccc8c4d4dc0edcfa9fa872f50cb214e08ebf61a03e245533f97284d442460f2998cd41858798ddfd4d661997d3940272b717b1\u0026quot;, to: \u0026quot;0x3e245533f97284d442460f2998cd41858798ddf04f96a5e25610293e42a73908e93ccc8c4d4dc0edcfa9fa872f50cb214e08ebf61a0d4d661997d3940272b717b1\u0026quot;, topics: [\u0026quot;0x776869737065722d636861742d636c69656e74\u0026quot;, \u0026quot;0x4d5a695276454c39425154466b61693532\u0026quot;], payload: \u0026quot;0x7b2274797065223a226d6\u0026quot;, priority: \u0026quot;0x64\u0026quot;, ttl: \u0026quot;0x64\u0026quot;, }]  Returns Boolean - returns true if the message was send, otherwise false.\nExample // Request curl -X POST --data '{\u0026quot;jsonrpc\u0026quot;:\u0026quot;2.0\u0026quot;,\u0026quot;method\u0026quot;:\u0026quot;shh_post\u0026quot;,\u0026quot;params\u0026quot;:[{\u0026quot;from\u0026quot;:\u0026quot;0xc931d93e97ab07fe42d923478ba2465f2..\u0026quot;,\u0026quot;topics\u0026quot;: [\u0026quot;0x68656c6c6f20776f726c64\u0026quot;],\u0026quot;payload\u0026quot;:\u0026quot;0x68656c6c6f20776f726c64\u0026quot;,\u0026quot;ttl\u0026quot;:0x64,\u0026quot;priority\u0026quot;:0x64}],\u0026quot;id\u0026quot;:73}' // Result { \u0026quot;id\u0026quot;:1, \u0026quot;jsonrpc\u0026quot;:\u0026quot;2.0\u0026quot;, \u0026quot;result\u0026quot;: true }  shh_newIdentity Creates new whisper identity in the client.\nParameters none\nReturns DATA, 60 Bytes - the address of the new identiy.\nExample // Request curl -X POST --data '{\u0026quot;jsonrpc\u0026quot;:\u0026quot;2.0\u0026quot;,\u0026quot;method\u0026quot;:\u0026quot;shh_newIdentity\u0026quot;,\u0026quot;params\u0026quot;:[],\u0026quot;id\u0026quot;:73}' // Result { \u0026quot;id\u0026quot;:1, \u0026quot;jsonrpc\u0026quot;: \u0026quot;2.0\u0026quot;, \u0026quot;result\u0026quot;: \u0026quot;0xc931d93e97ab07fe42d923478ba2465f283f440fd6cabea4dd7a2c807108f651b7135d1d6ca9007d5b68aa497e4619ac10aa3b27726e1863c1fd9b570d99bbaf\u0026quot; }  shh_hasIdentity Checks if the client hold the private keys for a given identity.\nParameters  DATA, 60 Bytes - The identity address to check.  params: [ \u0026quot;0x04f96a5e25610293e42a73908e93ccc8c4d4dc0edcfa9fa872f50cb214e08ebf61a03e245533f97284d442460f2998cd41858798ddfd4d661997d3940272b717b1\u0026quot; ]  Returns Boolean - returns true if the client holds the privatekey for that identity, otherwise false.\nExample // Request curl -X POST --data '{\u0026quot;jsonrpc\u0026quot;:\u0026quot;2.0\u0026quot;,\u0026quot;method\u0026quot;:\u0026quot;shh_hasIdentity\u0026quot;,\u0026quot;params\u0026quot;:[\u0026quot;0x04f96a5e25610293e42a73908e93ccc8c4d4dc0edcfa9fa872f50cb214e08ebf61a03e245533f97284d442460f2998cd41858798ddfd4d661997d3940272b717b1\u0026quot;],\u0026quot;id\u0026quot;:73}' // Result { \u0026quot;id\u0026quot;:1, \u0026quot;jsonrpc\u0026quot;: \u0026quot;2.0\u0026quot;, \u0026quot;result\u0026quot;: true }  shh_newGroup Creates a new group.\nParameters none\nReturns DATA, 60 Bytes - the address of the new group.\nExample // Request curl -X POST --data '{\u0026quot;jsonrpc\u0026quot;:\u0026quot;2.0\u0026quot;,\u0026quot;method\u0026quot;:\u0026quot;shh_newGroup\u0026quot;,\u0026quot;params\u0026quot;:[],\u0026quot;id\u0026quot;:73}' // Result { \u0026quot;id\u0026quot;:1, \u0026quot;jsonrpc\u0026quot;: \u0026quot;2.0\u0026quot;, \u0026quot;result\u0026quot;: \u0026quot;0xc65f283f440fd6cabea4dd7a2c807108f651b7135d1d6ca90931d93e97ab07fe42d923478ba2407d5b68aa497e4619ac10aa3b27726e1863c1fd9b570d99bbaf\u0026quot; }  shh_addToGroup Adds a whisper identity to the group.\nParameters  DATA, 60 Bytes - The identity address to add to a group.  params: [ \u0026quot;0x04f96a5e25610293e42a73908e93ccc8c4d4dc0edcfa9fa872f50cb214e08ebf61a03e245533f97284d442460f2998cd41858798ddfd4d661997d3940272b717b1\u0026quot; ]  Returns Boolean - returns true if the identity was successfully added to the group, otherwise false.\nExample // Request curl -X POST --data '{\u0026quot;jsonrpc\u0026quot;:\u0026quot;2.0\u0026quot;,\u0026quot;method\u0026quot;:\u0026quot;shh_addToGroup\u0026quot;,\u0026quot;params\u0026quot;:[\u0026quot;0x04f96a5e25610293e42a73908e93ccc8c4d4dc0edcfa9fa872f50cb214e08ebf61a03e245533f97284d442460f2998cd41858798ddfd4d661997d3940272b717b1\u0026quot;],\u0026quot;id\u0026quot;:73}' // Result { \u0026quot;id\u0026quot;:1, \u0026quot;jsonrpc\u0026quot;: \u0026quot;2.0\u0026quot;, \u0026quot;result\u0026quot;: true }  shh_newFilter Creates filter to notify, when client receives whisper message matching the filter options.\nParameters  Object - The filter options:  to: DATA, 60 Bytes - (optional) Identity of the receiver. When present it will try to decrypt any incoming message if the client holds the private key to this identity. topics: Array of DATA - Array of DATA topics which the incoming message\u0026rsquo;s topics should match. You can use the following combinations: [A, B] = A \u0026amp;\u0026amp; B [A, [B, C]] = A \u0026amp;\u0026amp; (B || C) [null, A, B] = ANYTHING \u0026amp;\u0026amp; A \u0026amp;\u0026amp; B null works as a wildcard   params: [{ \u0026quot;topics\u0026quot;: ['0x12341234bf4b564f'], \u0026quot;to\u0026quot;: \u0026quot;0x04f96a5e25610293e42a73908e93ccc8c4d4dc0edcfa9fa872f50cb214e08ebf61a03e245533f97284d442460f2998cd41858798ddfd4d661997d3940272b717b1\u0026quot; }]  Returns QUANTITY - The newly created filter.\nExample // Request curl -X POST --data '{\u0026quot;jsonrpc\u0026quot;:\u0026quot;2.0\u0026quot;,\u0026quot;method\u0026quot;:\u0026quot;shh_newFilter\u0026quot;,\u0026quot;params\u0026quot;:[{\u0026quot;topics\u0026quot;: ['0x12341234bf4b564f'],\u0026quot;to\u0026quot;: \u0026quot;0x2341234bf4b2341234bf4b564f...\u0026quot;}],\u0026quot;id\u0026quot;:73}' // Result { \u0026quot;id\u0026quot;:1, \u0026quot;jsonrpc\u0026quot;:\u0026quot;2.0\u0026quot;, \u0026quot;result\u0026quot;: \u0026quot;0x7\u0026quot; // 7 }  shh_uninstallFilter Uninstalls a filter with given id. Should always be called when watch is no longer needed. Additonally Filters timeout when they aren\u0026rsquo;t requested with shh_getFilterChanges for a period of time.\nParameters  QUANTITY - The filter id.  params: [ \u0026quot;0x7\u0026quot; // 7 ]  Returns Boolean - true if the filter was successfully uninstalled, otherwise false.\nExample // Request curl -X POST --data '{\u0026quot;jsonrpc\u0026quot;:\u0026quot;2.0\u0026quot;,\u0026quot;method\u0026quot;:\u0026quot;shh_uninstallFilter\u0026quot;,\u0026quot;params\u0026quot;:[\u0026quot;0x7\u0026quot;],\u0026quot;id\u0026quot;:73}' // Result { \u0026quot;id\u0026quot;:1, \u0026quot;jsonrpc\u0026quot;:\u0026quot;2.0\u0026quot;, \u0026quot;result\u0026quot;: true }  shh_getFilterChanges Polling method for whisper filters. Returns new messages since the last call of this method.\nNote calling the shh_getMessages method, will reset the buffer for this method, so that you won\u0026rsquo;t receive duplicate messages.\nParameters  QUANTITY - The filter id.  params: [ \u0026quot;0x7\u0026quot; // 7 ]  Returns Array - Array of messages received since last poll:\n hash: DATA, 32 Bytes (?) - The hash of the message. from: DATA, 60 Bytes - The sender of the message, if a sender was specified. to: DATA, 60 Bytes - The receiver of the message, if a receiver was specified. expiry: QUANTITY - Integer of the time in seconds when this message should expire (?). ttl: QUANTITY - Integer of the time the message should float in the system in seconds (?). sent: QUANTITY - Integer of the unix timestamp when the message was sent. topics: Array of DATA - Array of DATA topics the message contained. payload: DATA - The payload of the message. workProved: QUANTITY - Integer of the work this message required before it was send (?).  Example // Request curl -X POST --data '{\u0026quot;jsonrpc\u0026quot;:\u0026quot;2.0\u0026quot;,\u0026quot;method\u0026quot;:\u0026quot;shh_getFilterChanges\u0026quot;,\u0026quot;params\u0026quot;:[\u0026quot;0x7\u0026quot;],\u0026quot;id\u0026quot;:73}' // Result { \u0026quot;id\u0026quot;:1, \u0026quot;jsonrpc\u0026quot;:\u0026quot;2.0\u0026quot;, \u0026quot;result\u0026quot;: [{ \u0026quot;hash\u0026quot;: \u0026quot;0x33eb2da77bf3527e28f8bf493650b1879b08c4f2a362beae4ba2f71bafcd91f9\u0026quot;, \u0026quot;from\u0026quot;: \u0026quot;0x3ec052fc33..\u0026quot;, \u0026quot;to\u0026quot;: \u0026quot;0x87gdf76g8d7fgdfg...\u0026quot;, \u0026quot;expiry\u0026quot;: \u0026quot;0x54caa50a\u0026quot;, // 1422566666 \u0026quot;sent\u0026quot;: \u0026quot;0x54ca9ea2\u0026quot;, // 1422565026 \u0026quot;ttl\u0026quot;: \u0026quot;0x64\u0026quot;, // 100 \u0026quot;topics\u0026quot;: [\u0026quot;0x6578616d\u0026quot;], \u0026quot;payload\u0026quot;: \u0026quot;0x7b2274797065223a226d657373616765222c2263686...\u0026quot;, \u0026quot;workProved\u0026quot;: \u0026quot;0x0\u0026quot; }] }  shh_getMessages Get all messages matching a filter. Unlike shh_getFilterChanges this returns all messages.\nParameters  QUANTITY - The filter id.  params: [ \u0026quot;0x7\u0026quot; // 7 ]  Returns See shh_getFilterChanges\nExample // Request curl -X POST --data '{\u0026quot;jsonrpc\u0026quot;:\u0026quot;2.0\u0026quot;,\u0026quot;method\u0026quot;:\u0026quot;shh_getMessages\u0026quot;,\u0026quot;params\u0026quot;:[\u0026quot;0x7\u0026quot;],\u0026quot;id\u0026quot;:73}'  Result see shh_getFilterChanges\nAuthor(s):\n@Fawkes\nContributor(s):\n@Dptelecom\n"
},
{
	"uri": "https://pirl.live/ipns/QmVKFJs81erni4KV6Hzt2xVwGtC2P1WtE9A4MxNThFVFVh/en/bounty-contributions/marketing-bounty/",
	"title": "Marketing Proposal Bounty",
	"tags": [],
	"description": "",
	"content": " \u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt; HEAD\n \u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt; local_version\nIntroduction Bounty Reward - 100 PIRL A major part of the Pirl marketing is relaying on the team and the community.\nWe have identified a lot of fresh and thoughtful ideas coming from the Pirlians!\nWe would like to turn this into a process and reward your contribution!\nRequirements  Detail the proposal as much as possible!\n Include budgets - Do not forget, we are in a bear market and have no ICO. Proposals that can be carried with own efforts or budgets in PIRL will be prefered!\n Use common sense! Keep it realistic!\n  How  Make a copy or download the template\n Fill In the details of your proposal!\n Contact @Fawkes on Discord to submit! Join Discord\n Receive your bounty!\n  Disclaimer Pirl Team has the right to disapprove - 1. Proposals with Insufficient details - 2. Unrealistic Proposals - 3. Proposals which are not submitted in the requested format\nAuthor(s):\n@Fawkes\nContributor(s):\n@Dptelecom\n"
},
{
	"uri": "https://pirl.live/ipns/QmVKFJs81erni4KV6Hzt2xVwGtC2P1WtE9A4MxNThFVFVh/en/pirlcloud/masternodes/",
	"title": "Masternodes",
	"tags": [],
	"description": "",
	"content": " \u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt; HEAD  \u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt; local_version\nMasternodes Premium Masternodes are the top-tier masternodes in the ecosystem. They provide network security by storing the blockchain data and relaying transaction in the blockchain as well as serving as content and storage masternodes. The premium masternodes will be additionally rewarded with % of the fees of Poseidon platform.\nStorage Masternodes will provide digital downloads for the marketplace, and will be used as a backup file server. Further they will be able to privately store data for dApps hosted on the PIRL platform.\nContent Masternodes Will provide file storage for the publicly accessible media and data needed for dApps and the marketplace.\n1.) Premium Masternodes 2.) Content Masternodes 3.) Storage Masternodes Author(s): @Dptelecom\nContributor(s):\n"
},
{
	"uri": "https://pirl.live/ipns/QmVKFJs81erni4KV6Hzt2xVwGtC2P1WtE9A4MxNThFVFVh/en/pirlcloud/pirl-app/pirl-app-macos-instal/",
	"title": "PirlApp macOS install",
	"tags": [],
	"description": "",
	"content": " \u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt; HEAD\n \u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt; local_version\nDownload: Download here the PirlApp for MacOs Downloads\nPirl app macOS install If your done downloading the PirlApp.dmg go to your download folder and find the PirlApp\n\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt; HEAD There you will find PirlApp.dmg:\n There you will find PirlApp.dmg:\n\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt; local_version\nDouble click it to start the installation: When the installation starts you get this:\n\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt; HEAD\n \u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt; local_version\nAnd next you get the terms of the license Press Agree to install\n\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt; HEAD\n \u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt; local_version\nnext you see this: Drag PirlApp to the Applications folder\n\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt; HEAD Installation starts:\n Installation starts:\n\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt; local_version\nAnd your done! If you now open Launchpad you will find the PirlApp there:\n\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt; HEAD  \u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt; local_version\nNow you can open it and proceed to:\nPirlApp Guide Warning for Mac you have to put PirlApp in application folder or otherwise you get this error:\n\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt; HEAD\n \u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt; local_version\nAuthor(s):\n@dptelecom\nContributor():\n"
},
{
	"uri": "https://pirl.live/ipns/QmVKFJs81erni4KV6Hzt2xVwGtC2P1WtE9A4MxNThFVFVh/en/pirlcloud/",
	"title": "PirlCloud",
	"tags": [],
	"description": "",
	"content": " \u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt; HEAD\n \u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt; local_version\nThe PirlCloud PirlCloud is a decentralized hosting solution that provides public storage and will soon offer encrypted private storage.\nAll utilizing our highly scalable enterprise class monetized masternode network.\nPirlCloud will also enable decentralized DDoS protected web hosting with the integrated CDN distributed all around the globe.\n1.) Poseidon 2.) Masternodes 3.) Public storage 4.) PirlApp Author(s):\n@Dptelecom\nContributor(s):\n"
},
{
	"uri": "https://pirl.live/ipns/QmVKFJs81erni4KV6Hzt2xVwGtC2P1WtE9A4MxNThFVFVh/en/pirlcloud/poseidon/register/",
	"title": "Poseidon register",
	"tags": [],
	"description": "",
	"content": " \u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt; HEAD\n \u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt; local_version\nPoseidon register page Right here we go than lets fill in the required fields for an account registration.\n\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt; HEAD\n \u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt; local_version\nYou wil get a email confirming the account is created\nNext page First Login Author(s):\n@Dptelecom\nContributor(s):\n"
},
{
	"uri": "https://pirl.live/ipns/QmVKFJs81erni4KV6Hzt2xVwGtC2P1WtE9A4MxNThFVFVh/en/press-releases/por/",
	"title": "Proof of review",
	"tags": [],
	"description": "",
	"content": " \u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt; HEAD  \u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt; local_version This browser does not support PDFs. Please download the PDF to view it: Download PDF.\n \nAuthor(s):\n@dptelecom\nContributor():\n\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt; HEAD        local_version\n       "
},
{
	"uri": "https://pirl.live/ipns/QmVKFJs81erni4KV6Hzt2xVwGtC2P1WtE9A4MxNThFVFVh/en/pirlcloud/masternodes/content-masternodes/disabling-masternode-and-retrieving-stake/",
	"title": "Retrieve Masternode Stake",
	"tags": [],
	"description": "",
	"content": " \u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt; HEAD\n \u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt; local_version\nOverview At any time, you can run two masternode contract functions and retrieve your 10,000 PIRL stake back into your wallet.\nDisabling Masternode and Retrieving Stake Open Nautilus and navigate to the Contract tab located at the top right corner.\nYou should see the masternode contract on the left side. It will have the address of 0x6c042141C302C354509d2bff30EEFDEF24dE1047. Select this address. (NOTE: If you don\u0026rsquo;t have a contract showing in the watch contract section, you can add it as described in the next section.)\nOn the right side, the contract function menu will be shown.\nSelect the Disable Node function, then the wallet associated with the contract and hit Execute\n\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt; HEAD On the next screen, confirm you have enough gas for the transaction, enter your UTC file password and hit Send Transaction.\n On the next screen, confirm you have enough gas for the transaction, enter your UTC file password and hit Send Transaction.\n\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt; local_version\nAllow 30-60 seconds before running the next step.\nSelect the Withdraw Stake function, then the wallet associated with the contract and hit Execute\n\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt; HEAD On the next screen, confirm you have enough gas for the transaction, enter your UTC file password and hit Send Transaction.\n On the next screen, confirm you have enough gas for the transaction, enter your UTC file password and hit Send Transaction.\n\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt; local_version\nNot Enough gas Sometimes the wallet will be unable to automatically calculate the gas needed for a transaction and will automatically set it to 0. In this situation, you can manually adjust the gas by clicking on where it says 0 and write in your own amount. A good amount of gas for this purpose is 121,000.\n\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt; HEAD\n \u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt; local_version\nAdding Masternode Contract in Nautilus Open Nautilus and navigate to the Contract tab located at the top right corner.\nOnce there, click on the Watch Contract button.\nFor Contract Address fill in 0x6c042141C302C354509d2bff30EEFDEF24dE1047. The Contract Name can be anything you’d like. And lastly, the JSON Interface field needs to be populated with:\n[{\u0026quot;constant\u0026quot;:false,\u0026quot;inputs\u0026quot;:[],\u0026quot;name\u0026quot;:\u0026quot;nodeRegistration\u0026quot;,\u0026quot;outputs\u0026quot;:[{\u0026quot;name\u0026quot;:\u0026quot;paid\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;bool\u0026quot;}],\u0026quot;payable\u0026quot;:true,\u0026quot;stateMutability\u0026quot;:\u0026quot;payable\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;function\u0026quot;},{\u0026quot;constant\u0026quot;:true,\u0026quot;inputs\u0026quot;:[{\u0026quot;name\u0026quot;:\u0026quot;_pirlAddress\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;address\u0026quot;}],\u0026quot;name\u0026quot;:\u0026quot;getNodeAddress\u0026quot;,\u0026quot;outputs\u0026quot;:[{\u0026quot;name\u0026quot;:\u0026quot;\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;address\u0026quot;}],\u0026quot;payable\u0026quot;:false,\u0026quot;stateMutability\u0026quot;:\u0026quot;view\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;function\u0026quot;},{\u0026quot;constant\u0026quot;:true,\u0026quot;inputs\u0026quot;:[{\u0026quot;name\u0026quot;:\u0026quot;\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;address\u0026quot;}],\u0026quot;name\u0026quot;:\u0026quot;moderators\u0026quot;,\u0026quot;outputs\u0026quot;:[{\u0026quot;name\u0026quot;:\u0026quot;\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;bool\u0026quot;}],\u0026quot;payable\u0026quot;:false,\u0026quot;stateMutability\u0026quot;:\u0026quot;view\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;function\u0026quot;},{\u0026quot;constant\u0026quot;:true,\u0026quot;inputs\u0026quot;:[{\u0026quot;name\u0026quot;:\u0026quot;\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;address\u0026quot;}],\u0026quot;name\u0026quot;:\u0026quot;nodes\u0026quot;,\u0026quot;outputs\u0026quot;:[{\u0026quot;name\u0026quot;:\u0026quot;pirlAddress\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;address\u0026quot;},{\u0026quot;name\u0026quot;:\u0026quot;nodeStake\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;uint256\u0026quot;},{\u0026quot;name\u0026quot;:\u0026quot;nodeHash\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;bytes20\u0026quot;},{\u0026quot;name\u0026quot;:\u0026quot;stakeLocked\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;bool\u0026quot;},{\u0026quot;name\u0026quot;:\u0026quot;nodeEnabled\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;bool\u0026quot;}],\u0026quot;payable\u0026quot;:false,\u0026quot;stateMutability\u0026quot;:\u0026quot;view\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;function\u0026quot;},{\u0026quot;constant\u0026quot;:false,\u0026quot;inputs\u0026quot;:[],\u0026quot;name\u0026quot;:\u0026quot;disableNodeRegistration\u0026quot;,\u0026quot;outputs\u0026quot;:[{\u0026quot;name\u0026quot;:\u0026quot;disabled\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;bool\u0026quot;}],\u0026quot;payable\u0026quot;:false,\u0026quot;stateMutability\u0026quot;:\u0026quot;nonpayable\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;function\u0026quot;},{\u0026quot;constant\u0026quot;:true,\u0026quot;inputs\u0026quot;:[],\u0026quot;name\u0026quot;:\u0026quot;nodeCost\u0026quot;,\u0026quot;outputs\u0026quot;:[{\u0026quot;name\u0026quot;:\u0026quot;\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;uint256\u0026quot;}],\u0026quot;payable\u0026quot;:false,\u0026quot;stateMutability\u0026quot;:\u0026quot;view\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;function\u0026quot;},{\u0026quot;constant\u0026quot;:true,\u0026quot;inputs\u0026quot;:[{\u0026quot;name\u0026quot;:\u0026quot;_pirlAddress\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;address\u0026quot;}],\u0026quot;name\u0026quot;:\u0026quot;getStakeLockedStatus\u0026quot;,\u0026quot;outputs\u0026quot;:[{\u0026quot;name\u0026quot;:\u0026quot;\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;bool\u0026quot;}],\u0026quot;payable\u0026quot;:false,\u0026quot;stateMutability\u0026quot;:\u0026quot;view\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;function\u0026quot;},{\u0026quot;constant\u0026quot;:true,\u0026quot;inputs\u0026quot;:[],\u0026quot;name\u0026quot;:\u0026quot;nodeCount\u0026quot;,\u0026quot;outputs\u0026quot;:[{\u0026quot;name\u0026quot;:\u0026quot;\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;uint256\u0026quot;}],\u0026quot;payable\u0026quot;:false,\u0026quot;stateMutability\u0026quot;:\u0026quot;view\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;function\u0026quot;},{\u0026quot;constant\u0026quot;:false,\u0026quot;inputs\u0026quot;:[{\u0026quot;name\u0026quot;:\u0026quot;_admin\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;address\u0026quot;}],\u0026quot;name\u0026quot;:\u0026quot;setAdmin\u0026quot;,\u0026quot;outputs\u0026quot;:[{\u0026quot;name\u0026quot;:\u0026quot;set\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;bool\u0026quot;}],\u0026quot;payable\u0026quot;:false,\u0026quot;stateMutability\u0026quot;:\u0026quot;nonpayable\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;function\u0026quot;},{\u0026quot;constant\u0026quot;:true,\u0026quot;inputs\u0026quot;:[],\u0026quot;name\u0026quot;:\u0026quot;owner\u0026quot;,\u0026quot;outputs\u0026quot;:[{\u0026quot;name\u0026quot;:\u0026quot;\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;address\u0026quot;}],\u0026quot;payable\u0026quot;:false,\u0026quot;stateMutability\u0026quot;:\u0026quot;view\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;function\u0026quot;},{\u0026quot;constant\u0026quot;:false,\u0026quot;inputs\u0026quot;:[],\u0026quot;name\u0026quot;:\u0026quot;enableNode\u0026quot;,\u0026quot;outputs\u0026quot;:[{\u0026quot;name\u0026quot;:\u0026quot;enabled\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;bool\u0026quot;}],\u0026quot;payable\u0026quot;:false,\u0026quot;stateMutability\u0026quot;:\u0026quot;nonpayable\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;function\u0026quot;},{\u0026quot;constant\u0026quot;:true,\u0026quot;inputs\u0026quot;:[],\u0026quot;name\u0026quot;:\u0026quot;nodeRegistrationEnabled\u0026quot;,\u0026quot;outputs\u0026quot;:[{\u0026quot;name\u0026quot;:\u0026quot;\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;bool\u0026quot;}],\u0026quot;payable\u0026quot;:false,\u0026quot;stateMutability\u0026quot;:\u0026quot;view\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;function\u0026quot;},{\u0026quot;constant\u0026quot;:false,\u0026quot;inputs\u0026quot;:[],\u0026quot;name\u0026quot;:\u0026quot;disableNode\u0026quot;,\u0026quot;outputs\u0026quot;:[{\u0026quot;name\u0026quot;:\u0026quot;disabled\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;bool\u0026quot;}],\u0026quot;payable\u0026quot;:false,\u0026quot;stateMutability\u0026quot;:\u0026quot;nonpayable\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;function\u0026quot;},{\u0026quot;constant\u0026quot;:false,\u0026quot;inputs\u0026quot;:[],\u0026quot;name\u0026quot;:\u0026quot;withdrawStake\u0026quot;,\u0026quot;outputs\u0026quot;:[{\u0026quot;name\u0026quot;:\u0026quot;withdrawn\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;bool\u0026quot;}],\u0026quot;payable\u0026quot;:false,\u0026quot;stateMutability\u0026quot;:\u0026quot;nonpayable\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;function\u0026quot;},{\u0026quot;constant\u0026quot;:true,\u0026quot;inputs\u0026quot;:[{\u0026quot;name\u0026quot;:\u0026quot;\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;uint256\u0026quot;}],\u0026quot;name\u0026quot;:\u0026quot;nodeAddresses\u0026quot;,\u0026quot;outputs\u0026quot;:[{\u0026quot;name\u0026quot;:\u0026quot;\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;address\u0026quot;}],\u0026quot;payable\u0026quot;:false,\u0026quot;stateMutability\u0026quot;:\u0026quot;view\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;function\u0026quot;},{\u0026quot;constant\u0026quot;:true,\u0026quot;inputs\u0026quot;:[{\u0026quot;name\u0026quot;:\u0026quot;_pirlAddress\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;address\u0026quot;}],\u0026quot;name\u0026quot;:\u0026quot;getNodeEnabledStatus\u0026quot;,\u0026quot;outputs\u0026quot;:[{\u0026quot;name\u0026quot;:\u0026quot;\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;bool\u0026quot;}],\u0026quot;payable\u0026quot;:false,\u0026quot;stateMutability\u0026quot;:\u0026quot;view\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;function\u0026quot;},{\u0026quot;constant\u0026quot;:true,\u0026quot;inputs\u0026quot;:[{\u0026quot;name\u0026quot;:\u0026quot;_pirlAddress\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;address\u0026quot;}],\u0026quot;name\u0026quot;:\u0026quot;getNodeStake\u0026quot;,\u0026quot;outputs\u0026quot;:[{\u0026quot;name\u0026quot;:\u0026quot;\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;uint256\u0026quot;}],\u0026quot;payable\u0026quot;:false,\u0026quot;stateMutability\u0026quot;:\u0026quot;view\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;function\u0026quot;},{\u0026quot;constant\u0026quot;:false,\u0026quot;inputs\u0026quot;:[],\u0026quot;name\u0026quot;:\u0026quot;enableNodeRegistration\u0026quot;,\u0026quot;outputs\u0026quot;:[{\u0026quot;name\u0026quot;:\u0026quot;enabled\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;bool\u0026quot;}],\u0026quot;payable\u0026quot;:false,\u0026quot;stateMutability\u0026quot;:\u0026quot;nonpayable\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;function\u0026quot;},{\u0026quot;constant\u0026quot;:true,\u0026quot;inputs\u0026quot;:[{\u0026quot;name\u0026quot;:\u0026quot;_pirlAddress\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;address\u0026quot;}],\u0026quot;name\u0026quot;:\u0026quot;getNodeHash\u0026quot;,\u0026quot;outputs\u0026quot;:[{\u0026quot;name\u0026quot;:\u0026quot;\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;bytes20\u0026quot;}],\u0026quot;payable\u0026quot;:false,\u0026quot;stateMutability\u0026quot;:\u0026quot;view\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;function\u0026quot;},{\u0026quot;constant\u0026quot;:true,\u0026quot;inputs\u0026quot;:[],\u0026quot;name\u0026quot;:\u0026quot;nodeFee\u0026quot;,\u0026quot;outputs\u0026quot;:[{\u0026quot;name\u0026quot;:\u0026quot;\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;uint256\u0026quot;}],\u0026quot;payable\u0026quot;:false,\u0026quot;stateMutability\u0026quot;:\u0026quot;view\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;function\u0026quot;},{\u0026quot;constant\u0026quot;:true,\u0026quot;inputs\u0026quot;:[],\u0026quot;name\u0026quot;:\u0026quot;admin\u0026quot;,\u0026quot;outputs\u0026quot;:[{\u0026quot;name\u0026quot;:\u0026quot;\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;address\u0026quot;}],\u0026quot;payable\u0026quot;:false,\u0026quot;stateMutability\u0026quot;:\u0026quot;view\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;function\u0026quot;},{\u0026quot;inputs\u0026quot;:[],\u0026quot;payable\u0026quot;:false,\u0026quot;stateMutability\u0026quot;:\u0026quot;nonpayable\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;constructor\u0026quot;},{\u0026quot;payable\u0026quot;:true,\u0026quot;stateMutability\u0026quot;:\u0026quot;payable\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;fallback\u0026quot;},{\u0026quot;anonymous\u0026quot;:false,\u0026quot;inputs\u0026quot;:[{\u0026quot;indexed\u0026quot;:true,\u0026quot;name\u0026quot;:\u0026quot;_pirlAddress\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;address\u0026quot;},{\u0026quot;indexed\u0026quot;:true,\u0026quot;name\u0026quot;:\u0026quot;_nodeHash\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;bytes20\u0026quot;},{\u0026quot;indexed\u0026quot;:true,\u0026quot;name\u0026quot;:\u0026quot;_nodeRegistered\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;bool\u0026quot;},{\u0026quot;indexed\u0026quot;:false,\u0026quot;name\u0026quot;:\u0026quot;_dateRegistered\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;uint256\u0026quot;}],\u0026quot;name\u0026quot;:\u0026quot;MasterNodeRegistered\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;event\u0026quot;},{\u0026quot;anonymous\u0026quot;:false,\u0026quot;inputs\u0026quot;:[{\u0026quot;indexed\u0026quot;:true,\u0026quot;name\u0026quot;:\u0026quot;_pirlAddress\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;address\u0026quot;},{\u0026quot;indexed\u0026quot;:true,\u0026quot;name\u0026quot;:\u0026quot;_nodeHash\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;bytes20\u0026quot;},{\u0026quot;indexed\u0026quot;:true,\u0026quot;name\u0026quot;:\u0026quot;_nodeDisabled\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;bool\u0026quot;},{\u0026quot;indexed\u0026quot;:false,\u0026quot;name\u0026quot;:\u0026quot;_dateDisabled\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;uint256\u0026quot;}],\u0026quot;name\u0026quot;:\u0026quot;MasterNodeDisabled\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;event\u0026quot;},{\u0026quot;anonymous\u0026quot;:false,\u0026quot;inputs\u0026quot;:[{\u0026quot;indexed\u0026quot;:true,\u0026quot;name\u0026quot;:\u0026quot;_pirlAddress\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;address\u0026quot;},{\u0026quot;indexed\u0026quot;:true,\u0026quot;name\u0026quot;:\u0026quot;_nodeHash\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;bytes20\u0026quot;},{\u0026quot;indexed\u0026quot;:true,\u0026quot;name\u0026quot;:\u0026quot;_nodeEnabled\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;bool\u0026quot;},{\u0026quot;indexed\u0026quot;:false,\u0026quot;name\u0026quot;:\u0026quot;_dateEnabled\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;uint256\u0026quot;}],\u0026quot;name\u0026quot;:\u0026quot;MasterNodeEnabled\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;event\u0026quot;},{\u0026quot;anonymous\u0026quot;:false,\u0026quot;inputs\u0026quot;:[{\u0026quot;indexed\u0026quot;:true,\u0026quot;name\u0026quot;:\u0026quot;_pirlAddress\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;address\u0026quot;},{\u0026quot;indexed\u0026quot;:true,\u0026quot;name\u0026quot;:\u0026quot;_nodeHash\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;bytes20\u0026quot;},{\u0026quot;indexed\u0026quot;:true,\u0026quot;name\u0026quot;:\u0026quot;_nodePaid\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;bool\u0026quot;},{\u0026quot;indexed\u0026quot;:false,\u0026quot;name\u0026quot;:\u0026quot;_datePaid\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;uint256\u0026quot;}],\u0026quot;name\u0026quot;:\u0026quot;MasterNodeRewarded\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;event\u0026quot;},{\u0026quot;anonymous\u0026quot;:false,\u0026quot;inputs\u0026quot;:[{\u0026quot;indexed\u0026quot;:true,\u0026quot;name\u0026quot;:\u0026quot;_pirlAddress\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;address\u0026quot;},{\u0026quot;indexed\u0026quot;:true,\u0026quot;name\u0026quot;:\u0026quot;_nodeHash\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;bytes20\u0026quot;},{\u0026quot;indexed\u0026quot;:true,\u0026quot;name\u0026quot;:\u0026quot;_stakeWithdrawn\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;bool\u0026quot;},{\u0026quot;indexed\u0026quot;:false,\u0026quot;name\u0026quot;:\u0026quot;_dateWithdrawn\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;uint256\u0026quot;}],\u0026quot;name\u0026quot;:\u0026quot;StakeWithdrawn\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;event\u0026quot;},{\u0026quot;anonymous\u0026quot;:false,\u0026quot;inputs\u0026quot;:[{\u0026quot;indexed\u0026quot;:true,\u0026quot;name\u0026quot;:\u0026quot;_invoker\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;address\u0026quot;},{\u0026quot;indexed\u0026quot;:false,\u0026quot;name\u0026quot;:\u0026quot;_dateEnabled\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;uint256\u0026quot;},{\u0026quot;indexed\u0026quot;:true,\u0026quot;name\u0026quot;:\u0026quot;_registrationEnabled\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;bool\u0026quot;}],\u0026quot;name\u0026quot;:\u0026quot;MasterNodeRegistrationEnabled\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;event\u0026quot;},{\u0026quot;anonymous\u0026quot;:false,\u0026quot;inputs\u0026quot;:[{\u0026quot;indexed\u0026quot;:true,\u0026quot;name\u0026quot;:\u0026quot;_invoker\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;address\u0026quot;},{\u0026quot;indexed\u0026quot;:false,\u0026quot;name\u0026quot;:\u0026quot;_dateDisabled\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;uint256\u0026quot;},{\u0026quot;indexed\u0026quot;:true,\u0026quot;name\u0026quot;:\u0026quot;_registrationDisabled\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;bool\u0026quot;}],\u0026quot;name\u0026quot;:\u0026quot;MasterNodeRegistrationDisabled\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;event\u0026quot;},{\u0026quot;anonymous\u0026quot;:false,\u0026quot;inputs\u0026quot;:[{\u0026quot;indexed\u0026quot;:true,\u0026quot;name\u0026quot;:\u0026quot;_invoker\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;address\u0026quot;},{\u0026quot;indexed\u0026quot;:true,\u0026quot;name\u0026quot;:\u0026quot;_admin\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;address\u0026quot;},{\u0026quot;indexed\u0026quot;:true,\u0026quot;name\u0026quot;:\u0026quot;_adminSet\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;bool\u0026quot;}],\u0026quot;name\u0026quot;:\u0026quot;SetAdmin\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;event\u0026quot;},{\u0026quot;anonymous\u0026quot;:false,\u0026quot;inputs\u0026quot;:[{\u0026quot;indexed\u0026quot;:true,\u0026quot;name\u0026quot;:\u0026quot;_invoker\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;address\u0026quot;},{\u0026quot;indexed\u0026quot;:true,\u0026quot;name\u0026quot;:\u0026quot;_newOwner\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;address\u0026quot;},{\u0026quot;indexed\u0026quot;:true,\u0026quot;name\u0026quot;:\u0026quot;_ownerChanged\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;bool\u0026quot;}],\u0026quot;name\u0026quot;:\u0026quot;TransferOwnership\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;event\u0026quot;}]  Author(s): @Dptelecom\nContributor(s):\n"
},
{
	"uri": "https://pirl.live/ipns/QmVKFJs81erni4KV6Hzt2xVwGtC2P1WtE9A4MxNThFVFVh/en/pirlcloud/masternodes/premium-masternodes/disabling-masternode-and-retrieving-stake/",
	"title": "Retrieve Masternode Stake",
	"tags": [],
	"description": "",
	"content": " \u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt; HEAD\n \u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt; local_version\nOverview At any time, you can run two masternode contract functions and retrieve your 20,000 PIRL stake back into your wallet.\nDisabling Masternode and Retrieving Stake Open Nautilus and navigate to the Contract tab located at the top right corner.\nYou should see the masternode contract on the left side. It will have the address of 0x256b2b26Fe8eCAd201103946F8C603b401cE16EC. Select this address. (NOTE: If you don\u0026rsquo;t have a contract showing in the watch contract section, you can add it as described in the next section.)\nOn the right side, the contract function menu will be shown.\nSelect the Disable Node function, then the wallet associated with the contract and hit Execute\n\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt; HEAD On the next screen, confirm you have enough gas for the transaction, enter your UTC file password and hit Send Transaction.\n On the next screen, confirm you have enough gas for the transaction, enter your UTC file password and hit Send Transaction.\n\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt; local_version\nAllow 30-60 seconds before running the next step.\nSelect the Withdraw Stake function, then the wallet associated with the contract and hit Execute\n\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt; HEAD On the next screen, confirm you have enough gas for the transaction, enter your UTC file password and hit Send Transaction.\n On the next screen, confirm you have enough gas for the transaction, enter your UTC file password and hit Send Transaction.\n\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt; local_version\nNot Enough gas Sometimes the wallet will be unable to automatically calculate the gas needed for a transaction and will automatically set it to 0. In this situation, you can manually adjust the gas by clicking on where it says 0 and write in your own amount. A good amount of gas for this purpose is 121,000.\n\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt; HEAD\n \u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt; local_version\nAdding Masternode Contract in Nautilus Open Nautilus and navigate to the Contract tab located at the top right corner.\nOnce there, click on the Watch Contract button.\nFor Contract Address fill in 0x256b2b26Fe8eCAd201103946F8C603b401cE16EC. The Contract Name can be anything you’d like. And lastly, the JSON Interface field needs to be populated with:\n[{\u0026quot;constant\u0026quot;:false,\u0026quot;inputs\u0026quot;:[],\u0026quot;name\u0026quot;:\u0026quot;nodeRegistration\u0026quot;,\u0026quot;outputs\u0026quot;:[{\u0026quot;name\u0026quot;:\u0026quot;paid\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;bool\u0026quot;}],\u0026quot;payable\u0026quot;:true,\u0026quot;stateMutability\u0026quot;:\u0026quot;payable\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;function\u0026quot;},{\u0026quot;constant\u0026quot;:true,\u0026quot;inputs\u0026quot;:[{\u0026quot;name\u0026quot;:\u0026quot;_pirlAddress\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;address\u0026quot;}],\u0026quot;name\u0026quot;:\u0026quot;getNodeAddress\u0026quot;,\u0026quot;outputs\u0026quot;:[{\u0026quot;name\u0026quot;:\u0026quot;\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;address\u0026quot;}],\u0026quot;payable\u0026quot;:false,\u0026quot;stateMutability\u0026quot;:\u0026quot;view\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;function\u0026quot;},{\u0026quot;constant\u0026quot;:true,\u0026quot;inputs\u0026quot;:[{\u0026quot;name\u0026quot;:\u0026quot;\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;address\u0026quot;}],\u0026quot;name\u0026quot;:\u0026quot;moderators\u0026quot;,\u0026quot;outputs\u0026quot;:[{\u0026quot;name\u0026quot;:\u0026quot;\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;bool\u0026quot;}],\u0026quot;payable\u0026quot;:false,\u0026quot;stateMutability\u0026quot;:\u0026quot;view\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;function\u0026quot;},{\u0026quot;constant\u0026quot;:true,\u0026quot;inputs\u0026quot;:[{\u0026quot;name\u0026quot;:\u0026quot;\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;address\u0026quot;}],\u0026quot;name\u0026quot;:\u0026quot;nodes\u0026quot;,\u0026quot;outputs\u0026quot;:[{\u0026quot;name\u0026quot;:\u0026quot;pirlAddress\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;address\u0026quot;},{\u0026quot;name\u0026quot;:\u0026quot;nodeStake\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;uint256\u0026quot;},{\u0026quot;name\u0026quot;:\u0026quot;nodeHash\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;bytes20\u0026quot;},{\u0026quot;name\u0026quot;:\u0026quot;stakeLocked\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;bool\u0026quot;},{\u0026quot;name\u0026quot;:\u0026quot;nodeEnabled\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;bool\u0026quot;}],\u0026quot;payable\u0026quot;:false,\u0026quot;stateMutability\u0026quot;:\u0026quot;view\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;function\u0026quot;},{\u0026quot;constant\u0026quot;:false,\u0026quot;inputs\u0026quot;:[],\u0026quot;name\u0026quot;:\u0026quot;disableNodeRegistration\u0026quot;,\u0026quot;outputs\u0026quot;:[{\u0026quot;name\u0026quot;:\u0026quot;disabled\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;bool\u0026quot;}],\u0026quot;payable\u0026quot;:false,\u0026quot;stateMutability\u0026quot;:\u0026quot;nonpayable\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;function\u0026quot;},{\u0026quot;constant\u0026quot;:true,\u0026quot;inputs\u0026quot;:[],\u0026quot;name\u0026quot;:\u0026quot;nodeCost\u0026quot;,\u0026quot;outputs\u0026quot;:[{\u0026quot;name\u0026quot;:\u0026quot;\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;uint256\u0026quot;}],\u0026quot;payable\u0026quot;:false,\u0026quot;stateMutability\u0026quot;:\u0026quot;view\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;function\u0026quot;},{\u0026quot;constant\u0026quot;:true,\u0026quot;inputs\u0026quot;:[{\u0026quot;name\u0026quot;:\u0026quot;_pirlAddress\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;address\u0026quot;}],\u0026quot;name\u0026quot;:\u0026quot;getStakeLockedStatus\u0026quot;,\u0026quot;outputs\u0026quot;:[{\u0026quot;name\u0026quot;:\u0026quot;\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;bool\u0026quot;}],\u0026quot;payable\u0026quot;:false,\u0026quot;stateMutability\u0026quot;:\u0026quot;view\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;function\u0026quot;},{\u0026quot;constant\u0026quot;:true,\u0026quot;inputs\u0026quot;:[],\u0026quot;name\u0026quot;:\u0026quot;nodeCount\u0026quot;,\u0026quot;outputs\u0026quot;:[{\u0026quot;name\u0026quot;:\u0026quot;\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;uint256\u0026quot;}],\u0026quot;payable\u0026quot;:false,\u0026quot;stateMutability\u0026quot;:\u0026quot;view\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;function\u0026quot;},{\u0026quot;constant\u0026quot;:false,\u0026quot;inputs\u0026quot;:[{\u0026quot;name\u0026quot;:\u0026quot;_admin\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;address\u0026quot;}],\u0026quot;name\u0026quot;:\u0026quot;setAdmin\u0026quot;,\u0026quot;outputs\u0026quot;:[{\u0026quot;name\u0026quot;:\u0026quot;set\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;bool\u0026quot;}],\u0026quot;payable\u0026quot;:false,\u0026quot;stateMutability\u0026quot;:\u0026quot;nonpayable\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;function\u0026quot;},{\u0026quot;constant\u0026quot;:true,\u0026quot;inputs\u0026quot;:[],\u0026quot;name\u0026quot;:\u0026quot;owner\u0026quot;,\u0026quot;outputs\u0026quot;:[{\u0026quot;name\u0026quot;:\u0026quot;\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;address\u0026quot;}],\u0026quot;payable\u0026quot;:false,\u0026quot;stateMutability\u0026quot;:\u0026quot;view\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;function\u0026quot;},{\u0026quot;constant\u0026quot;:false,\u0026quot;inputs\u0026quot;:[],\u0026quot;name\u0026quot;:\u0026quot;enableNode\u0026quot;,\u0026quot;outputs\u0026quot;:[{\u0026quot;name\u0026quot;:\u0026quot;enabled\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;bool\u0026quot;}],\u0026quot;payable\u0026quot;:false,\u0026quot;stateMutability\u0026quot;:\u0026quot;nonpayable\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;function\u0026quot;},{\u0026quot;constant\u0026quot;:true,\u0026quot;inputs\u0026quot;:[],\u0026quot;name\u0026quot;:\u0026quot;nodeRegistrationEnabled\u0026quot;,\u0026quot;outputs\u0026quot;:[{\u0026quot;name\u0026quot;:\u0026quot;\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;bool\u0026quot;}],\u0026quot;payable\u0026quot;:false,\u0026quot;stateMutability\u0026quot;:\u0026quot;view\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;function\u0026quot;},{\u0026quot;constant\u0026quot;:false,\u0026quot;inputs\u0026quot;:[],\u0026quot;name\u0026quot;:\u0026quot;disableNode\u0026quot;,\u0026quot;outputs\u0026quot;:[{\u0026quot;name\u0026quot;:\u0026quot;disabled\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;bool\u0026quot;}],\u0026quot;payable\u0026quot;:false,\u0026quot;stateMutability\u0026quot;:\u0026quot;nonpayable\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;function\u0026quot;},{\u0026quot;constant\u0026quot;:false,\u0026quot;inputs\u0026quot;:[],\u0026quot;name\u0026quot;:\u0026quot;withdrawStake\u0026quot;,\u0026quot;outputs\u0026quot;:[{\u0026quot;name\u0026quot;:\u0026quot;withdrawn\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;bool\u0026quot;}],\u0026quot;payable\u0026quot;:false,\u0026quot;stateMutability\u0026quot;:\u0026quot;nonpayable\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;function\u0026quot;},{\u0026quot;constant\u0026quot;:true,\u0026quot;inputs\u0026quot;:[{\u0026quot;name\u0026quot;:\u0026quot;\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;uint256\u0026quot;}],\u0026quot;name\u0026quot;:\u0026quot;nodeAddresses\u0026quot;,\u0026quot;outputs\u0026quot;:[{\u0026quot;name\u0026quot;:\u0026quot;\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;address\u0026quot;}],\u0026quot;payable\u0026quot;:false,\u0026quot;stateMutability\u0026quot;:\u0026quot;view\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;function\u0026quot;},{\u0026quot;constant\u0026quot;:true,\u0026quot;inputs\u0026quot;:[{\u0026quot;name\u0026quot;:\u0026quot;_pirlAddress\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;address\u0026quot;}],\u0026quot;name\u0026quot;:\u0026quot;getNodeEnabledStatus\u0026quot;,\u0026quot;outputs\u0026quot;:[{\u0026quot;name\u0026quot;:\u0026quot;\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;bool\u0026quot;}],\u0026quot;payable\u0026quot;:false,\u0026quot;stateMutability\u0026quot;:\u0026quot;view\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;function\u0026quot;},{\u0026quot;constant\u0026quot;:true,\u0026quot;inputs\u0026quot;:[{\u0026quot;name\u0026quot;:\u0026quot;_pirlAddress\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;address\u0026quot;}],\u0026quot;name\u0026quot;:\u0026quot;getNodeStake\u0026quot;,\u0026quot;outputs\u0026quot;:[{\u0026quot;name\u0026quot;:\u0026quot;\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;uint256\u0026quot;}],\u0026quot;payable\u0026quot;:false,\u0026quot;stateMutability\u0026quot;:\u0026quot;view\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;function\u0026quot;},{\u0026quot;constant\u0026quot;:false,\u0026quot;inputs\u0026quot;:[],\u0026quot;name\u0026quot;:\u0026quot;enableNodeRegistration\u0026quot;,\u0026quot;outputs\u0026quot;:[{\u0026quot;name\u0026quot;:\u0026quot;enabled\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;bool\u0026quot;}],\u0026quot;payable\u0026quot;:false,\u0026quot;stateMutability\u0026quot;:\u0026quot;nonpayable\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;function\u0026quot;},{\u0026quot;constant\u0026quot;:true,\u0026quot;inputs\u0026quot;:[{\u0026quot;name\u0026quot;:\u0026quot;_pirlAddress\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;address\u0026quot;}],\u0026quot;name\u0026quot;:\u0026quot;getNodeHash\u0026quot;,\u0026quot;outputs\u0026quot;:[{\u0026quot;name\u0026quot;:\u0026quot;\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;bytes20\u0026quot;}],\u0026quot;payable\u0026quot;:false,\u0026quot;stateMutability\u0026quot;:\u0026quot;view\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;function\u0026quot;},{\u0026quot;constant\u0026quot;:true,\u0026quot;inputs\u0026quot;:[],\u0026quot;name\u0026quot;:\u0026quot;nodeFee\u0026quot;,\u0026quot;outputs\u0026quot;:[{\u0026quot;name\u0026quot;:\u0026quot;\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;uint256\u0026quot;}],\u0026quot;payable\u0026quot;:false,\u0026quot;stateMutability\u0026quot;:\u0026quot;view\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;function\u0026quot;},{\u0026quot;constant\u0026quot;:true,\u0026quot;inputs\u0026quot;:[],\u0026quot;name\u0026quot;:\u0026quot;admin\u0026quot;,\u0026quot;outputs\u0026quot;:[{\u0026quot;name\u0026quot;:\u0026quot;\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;address\u0026quot;}],\u0026quot;payable\u0026quot;:false,\u0026quot;stateMutability\u0026quot;:\u0026quot;view\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;function\u0026quot;},{\u0026quot;inputs\u0026quot;:[],\u0026quot;payable\u0026quot;:false,\u0026quot;stateMutability\u0026quot;:\u0026quot;nonpayable\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;constructor\u0026quot;},{\u0026quot;payable\u0026quot;:true,\u0026quot;stateMutability\u0026quot;:\u0026quot;payable\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;fallback\u0026quot;},{\u0026quot;anonymous\u0026quot;:false,\u0026quot;inputs\u0026quot;:[{\u0026quot;indexed\u0026quot;:true,\u0026quot;name\u0026quot;:\u0026quot;_pirlAddress\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;address\u0026quot;},{\u0026quot;indexed\u0026quot;:true,\u0026quot;name\u0026quot;:\u0026quot;_nodeHash\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;bytes20\u0026quot;},{\u0026quot;indexed\u0026quot;:true,\u0026quot;name\u0026quot;:\u0026quot;_nodeRegistered\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;bool\u0026quot;},{\u0026quot;indexed\u0026quot;:false,\u0026quot;name\u0026quot;:\u0026quot;_dateRegistered\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;uint256\u0026quot;}],\u0026quot;name\u0026quot;:\u0026quot;MasterNodeRegistered\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;event\u0026quot;},{\u0026quot;anonymous\u0026quot;:false,\u0026quot;inputs\u0026quot;:[{\u0026quot;indexed\u0026quot;:true,\u0026quot;name\u0026quot;:\u0026quot;_pirlAddress\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;address\u0026quot;},{\u0026quot;indexed\u0026quot;:true,\u0026quot;name\u0026quot;:\u0026quot;_nodeHash\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;bytes20\u0026quot;},{\u0026quot;indexed\u0026quot;:true,\u0026quot;name\u0026quot;:\u0026quot;_nodeDisabled\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;bool\u0026quot;},{\u0026quot;indexed\u0026quot;:false,\u0026quot;name\u0026quot;:\u0026quot;_dateDisabled\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;uint256\u0026quot;}],\u0026quot;name\u0026quot;:\u0026quot;MasterNodeDisabled\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;event\u0026quot;},{\u0026quot;anonymous\u0026quot;:false,\u0026quot;inputs\u0026quot;:[{\u0026quot;indexed\u0026quot;:true,\u0026quot;name\u0026quot;:\u0026quot;_pirlAddress\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;address\u0026quot;},{\u0026quot;indexed\u0026quot;:true,\u0026quot;name\u0026quot;:\u0026quot;_nodeHash\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;bytes20\u0026quot;},{\u0026quot;indexed\u0026quot;:true,\u0026quot;name\u0026quot;:\u0026quot;_nodeEnabled\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;bool\u0026quot;},{\u0026quot;indexed\u0026quot;:false,\u0026quot;name\u0026quot;:\u0026quot;_dateEnabled\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;uint256\u0026quot;}],\u0026quot;name\u0026quot;:\u0026quot;MasterNodeEnabled\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;event\u0026quot;},{\u0026quot;anonymous\u0026quot;:false,\u0026quot;inputs\u0026quot;:[{\u0026quot;indexed\u0026quot;:true,\u0026quot;name\u0026quot;:\u0026quot;_pirlAddress\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;address\u0026quot;},{\u0026quot;indexed\u0026quot;:true,\u0026quot;name\u0026quot;:\u0026quot;_nodeHash\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;bytes20\u0026quot;},{\u0026quot;indexed\u0026quot;:true,\u0026quot;name\u0026quot;:\u0026quot;_nodePaid\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;bool\u0026quot;},{\u0026quot;indexed\u0026quot;:false,\u0026quot;name\u0026quot;:\u0026quot;_datePaid\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;uint256\u0026quot;}],\u0026quot;name\u0026quot;:\u0026quot;MasterNodeRewarded\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;event\u0026quot;},{\u0026quot;anonymous\u0026quot;:false,\u0026quot;inputs\u0026quot;:[{\u0026quot;indexed\u0026quot;:true,\u0026quot;name\u0026quot;:\u0026quot;_pirlAddress\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;address\u0026quot;},{\u0026quot;indexed\u0026quot;:true,\u0026quot;name\u0026quot;:\u0026quot;_nodeHash\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;bytes20\u0026quot;},{\u0026quot;indexed\u0026quot;:true,\u0026quot;name\u0026quot;:\u0026quot;_stakeWithdrawn\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;bool\u0026quot;},{\u0026quot;indexed\u0026quot;:false,\u0026quot;name\u0026quot;:\u0026quot;_dateWithdrawn\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;uint256\u0026quot;}],\u0026quot;name\u0026quot;:\u0026quot;StakeWithdrawn\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;event\u0026quot;},{\u0026quot;anonymous\u0026quot;:false,\u0026quot;inputs\u0026quot;:[{\u0026quot;indexed\u0026quot;:true,\u0026quot;name\u0026quot;:\u0026quot;_invoker\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;address\u0026quot;},{\u0026quot;indexed\u0026quot;:false,\u0026quot;name\u0026quot;:\u0026quot;_dateEnabled\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;uint256\u0026quot;},{\u0026quot;indexed\u0026quot;:true,\u0026quot;name\u0026quot;:\u0026quot;_registrationEnabled\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;bool\u0026quot;}],\u0026quot;name\u0026quot;:\u0026quot;MasterNodeRegistrationEnabled\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;event\u0026quot;},{\u0026quot;anonymous\u0026quot;:false,\u0026quot;inputs\u0026quot;:[{\u0026quot;indexed\u0026quot;:true,\u0026quot;name\u0026quot;:\u0026quot;_invoker\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;address\u0026quot;},{\u0026quot;indexed\u0026quot;:false,\u0026quot;name\u0026quot;:\u0026quot;_dateDisabled\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;uint256\u0026quot;},{\u0026quot;indexed\u0026quot;:true,\u0026quot;name\u0026quot;:\u0026quot;_registrationDisabled\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;bool\u0026quot;}],\u0026quot;name\u0026quot;:\u0026quot;MasterNodeRegistrationDisabled\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;event\u0026quot;},{\u0026quot;anonymous\u0026quot;:false,\u0026quot;inputs\u0026quot;:[{\u0026quot;indexed\u0026quot;:true,\u0026quot;name\u0026quot;:\u0026quot;_invoker\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;address\u0026quot;},{\u0026quot;indexed\u0026quot;:true,\u0026quot;name\u0026quot;:\u0026quot;_admin\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;address\u0026quot;},{\u0026quot;indexed\u0026quot;:true,\u0026quot;name\u0026quot;:\u0026quot;_adminSet\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;bool\u0026quot;}],\u0026quot;name\u0026quot;:\u0026quot;SetAdmin\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;event\u0026quot;},{\u0026quot;anonymous\u0026quot;:false,\u0026quot;inputs\u0026quot;:[{\u0026quot;indexed\u0026quot;:true,\u0026quot;name\u0026quot;:\u0026quot;_invoker\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;address\u0026quot;},{\u0026quot;indexed\u0026quot;:true,\u0026quot;name\u0026quot;:\u0026quot;_newOwner\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;address\u0026quot;},{\u0026quot;indexed\u0026quot;:true,\u0026quot;name\u0026quot;:\u0026quot;_ownerChanged\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;bool\u0026quot;}],\u0026quot;name\u0026quot;:\u0026quot;TransferOwnership\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;event\u0026quot;}]  Author(s): @dptelecom Contributor(s):\n"
},
{
	"uri": "https://pirl.live/ipns/QmVKFJs81erni4KV6Hzt2xVwGtC2P1WtE9A4MxNThFVFVh/en/development/wallets/",
	"title": "Wallets",
	"tags": [],
	"description": "",
	"content": " \u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt; HEAD\n \u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt; local_version\nUpdates about development for PirlWallets Updates about development for PirlWallets can be found on the next pages.\n\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt; HEAD\n \u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt; local_version\nAuthor(s):\n@dptelecom\nContributor():\n"
},
{
	"uri": "https://pirl.live/ipns/QmVKFJs81erni4KV6Hzt2xVwGtC2P1WtE9A4MxNThFVFVh/en/solidity/command-line-interface/",
	"title": "Command Line Interface",
	"tags": [],
	"description": "",
	"content": "$ Pirl help NAME: Pirl - the go-Pirl command line interface USAGE: Pirl [options] command [command options] [arguments...] VERSION: 1.8.2-Hulk COMMANDS: account Manage accounts attach Start an interactive JavaScript environment (connect to node) bug opens a window to report a bug on the Pirl repo console Start an interactive JavaScript environment copydb Create a local chain from a target chaindata folder dump Dump a specific block from storage dumpconfig Show configuration values export Export blockchain into file export-preimages Export the preimage database into an RLP stream import Import a blockchain file import-preimages Import the preimage database from an RLP stream init Bootstrap and initialize a new genesis block js Execute the specified JavaScript files license Display license information makecache Generate ethash verification cache (for testing) makedag Generate ethash mining DAG (for testing) monitor Monitor and visualize node metrics removedb Remove blockchain and state databases version Print version numbers wallet Manage Pirl wallets help, h Shows a list of commands or help for one command Pirl OPTIONS: --config value TOML configuration file --datadir \u0026quot;/home/ligi/.pirl\u0026quot; Data directory for the databases and keystore --keystore Directory for the keystore (default = inside the datadir) --nousb Disables monitoring for and managing USB hardware wallets --networkid value Network identifier (integer, 1=Frontier, 2=Morden (disused), 3=Ropsten, 4=Rinkeby) (default: 1) --testnet Ropsten network: pre-configured proof-of-work test network --rinkeby Rinkeby network: pre-configured proof-of-authority test network --syncmode \u0026quot;fast\u0026quot; Blockchain sync mode (\u0026quot;fast\u0026quot;, \u0026quot;full\u0026quot;, or \u0026quot;light\u0026quot;) --gcmode value Blockchain garbage collection mode (\u0026quot;full\u0026quot;, \u0026quot;archive\u0026quot;) (default: \u0026quot;full\u0026quot;) --ethstats value Reporting URL of a ethstats service (nodename:secret@host:port) --identity value Custom node name --lightserv value Maximum percentage of time allowed for serving LES requests (0-90) (default: 0) --lightpeers value Maximum number of LES client peers (default: 100) --lightkdf Reduce key-derivation RAM \u0026amp; CPU usage at some expense of KDF strength DEVELOPER CHAIN OPTIONS: --dev Ephemeral proof-of-authority network with a pre-funded developer account, mining enabled --dev.period value Block period to use in developer mode (0 = mine only if transaction pending) (default: 0) ETHASH OPTIONS: --ethash.cachedir Directory to store the ethash verification caches (default = inside the datadir) --ethash.cachesinmem value Number of recent ethash caches to keep in memory (16MB each) (default: 2) --ethash.cachesondisk value Number of recent ethash caches to keep on disk (16MB each) (default: 3) --ethash.dagdir \u0026quot;/home/ligi/.ethash\u0026quot; Directory to store the ethash mining DAGs (default = inside home folder) --ethash.dagsinmem value Number of recent ethash mining DAGs to keep in memory (1+GB each) (default: 1) --ethash.dagsondisk value Number of recent ethash mining DAGs to keep on disk (1+GB each) (default: 2) TRANSACTION POOL OPTIONS: --txpool.nolocals Disables price exemptions for locally submitted transactions --txpool.journal value Disk journal for local transaction to survive node restarts (default: \u0026quot;transactions.rlp\u0026quot;) --txpool.rejournal value Time interval to regenerate the local transaction journal (default: 1h0m0s) --txpool.pricelimit value Minimum gas price limit to enforce for acceptance into the pool (default: 1) --txpool.pricebump value Price bump percentage to replace an already existing transaction (default: 10) --txpool.accountslots value Minimum number of executable transaction slots guaranteed per account (default: 16) --txpool.globalslots value Maximum number of executable transaction slots for all accounts (default: 4096) --txpool.accountqueue value Maximum number of non-executable transaction slots permitted per account (default: 64) --txpool.globalqueue value Maximum number of non-executable transaction slots for all accounts (default: 1024) --txpool.lifetime value Maximum amount of time non-executable transaction are queued (default: 3h0m0s) PERFORMANCE TUNING OPTIONS: --cache value Megabytes of memory allocated to internal caching (default: 1024) --cache.database value Percentage of cache memory allowance to use for database io (default: 75) --cache.gc value Percentage of cache memory allowance to use for trie pruning (default: 25) --trie-cache-gens value Number of trie node generations to keep in memory (default: 120) ACCOUNT OPTIONS: --unlock value Comma separated list of accounts to unlock --password value Password file to use for non-interactive password input API AND CONSOLE OPTIONS: --rpc Enable the HTTP-RPC server --rpcaddr value HTTP-RPC server listening interface (default: \u0026quot;localhost\u0026quot;) --rpcport value HTTP-RPC server listening port (default: 8545) --rpcapi value API's offered over the HTTP-RPC interface --ws Enable the WS-RPC server --wsaddr value WS-RPC server listening interface (default: \u0026quot;localhost\u0026quot;) --wsport value WS-RPC server listening port (default: 8546) --wsapi value API's offered over the WS-RPC interface --wsorigins value Origins from which to accept websockets requests --ipcdisable Disable the IPC-RPC server --ipcpath Filename for IPC socket/pipe within the datadir (explicit paths escape it) --rpccorsdomain value Comma separated list of domains from which to accept cross origin requests (browser enforced) --rpcvhosts value Comma separated list of virtual hostnames from which to accept requests (server enforced). Accepts '*' wildcard. (default: \u0026quot;localhost\u0026quot;) --jspath loadScript JavaScript root path for loadScript (default: \u0026quot;.\u0026quot;) --exec value Execute JavaScript statement --preload value Comma separated list of JavaScript files to preload into the console NETWORKING OPTIONS: --bootnodes value Comma separated enode URLs for P2P discovery bootstrap (set v4+v5 instead for light servers) --bootnodesv4 value Comma separated enode URLs for P2P v4 discovery bootstrap (light server, full nodes) --bootnodesv5 value Comma separated enode URLs for P2P v5 discovery bootstrap (light server, light nodes) --port value Network listening port (default: 30303) --maxpeers value Maximum number of network peers (network disabled if set to 0) (default: 25) --maxpendpeers value Maximum number of pending connection attempts (defaults used if set to 0) (default: 0) --nat value NAT port mapping mechanism (any|none|upnp|pmp|extip:\u0026lt;IP\u0026gt;) (default: \u0026quot;any\u0026quot;) --nodiscover Disables the peer discovery mechanism (manual peer addition) --v5disc Enables the experimental RLPx V5 (Topic Discovery) mechanism --netrestrict value Restricts network communication to the given IP networks (CIDR masks) --nodekey value P2P node key file --nodekeyhex value P2P node key as hex (for testing) MINER OPTIONS: --mine Enable mining --minerthreads value Number of CPU threads to use for mining (default: 8) --etherbase value Public address for block mining rewards (default = first account created) (default: \u0026quot;0\u0026quot;) --targetgaslimit value Target gas limit sets the artificial target gas floor for the blocks to mine (default: 4712388) --gasprice \u0026quot;18000000000\u0026quot; Minimal gas price to accept for mining a transactions --extradata value Block extra data set by the miner (default = client version) GAS PRICE ORACLE OPTIONS: --gpoblocks value Number of recent blocks to check for gas prices (default: 20) --gpopercentile value Suggested gas price is the given percentile of a set of recent transaction gas prices (default: 60) VIRTUAL MACHINE OPTIONS: --vmdebug Record information useful for VM and contract debugging LOGGING AND DEBUGGING OPTIONS: --metrics Enable metrics collection and reporting --fakepow Disables proof-of-work verification --nocompaction Disables db compaction after import --verbosity value Logging verbosity: 0=silent, 1=error, 2=warn, 3=info, 4=debug, 5=detail (default: 3) --vmodule value Per-module verbosity: comma-separated list of \u0026lt;pattern\u0026gt;=\u0026lt;level\u0026gt; (e.g. eth/*=5,p2p=4) --backtrace value Request a stack trace at a specific logging statement (e.g. \u0026quot;block.go:271\u0026quot;) --debug Prepends log messages with call-site location (file and line number) --pprof Enable the pprof HTTP server --pprofaddr value pprof HTTP server listening interface (default: \u0026quot;127.0.0.1\u0026quot;) --pprofport value pprof HTTP server listening port (default: 6060) --memprofilerate value Turn on memory profiling with the given rate (default: 524288) --blockprofilerate value Turn on block profiling with the given rate (default: 0) --cpuprofile value Write CPU profile to the given file --trace value Write execution trace to the given file WHISPER (EXPERIMENTAL) OPTIONS: --shh Enable Whisper --shh.maxmessagesize value Max message size accepted (default: 1048576) --shh.pow value Minimum POW accepted (default: 0.2) DEPRECATED OPTIONS: --fast Enable fast syncing through state downloads (replaced by --syncmode) --light Enable light client mode (replaced by --syncmode) MISC OPTIONS: --help, -h show help COPYRIGHT: Copyright 2013-2017 The go-ethereum Authors Copyright 2017-2019 PIRL Sprl  Author(s):\n@Fawkes\nContributor(s):\n@Dptelecom\n"
},
{
	"uri": "https://pirl.live/ipns/QmVKFJs81erni4KV6Hzt2xVwGtC2P1WtE9A4MxNThFVFVh/en/wallets/reset-blockchain-data/",
	"title": "How To Reset Blockchain Data",
	"tags": [],
	"description": "",
	"content": " \u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt; HEAD\n \u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt; local_version\nIntroduction This guide covers resetting blockchain data, i.e. deleting and re-syncing the PIRL Nautilus wallet chaindata. The most likely situation requiring this is that your Pirl wallet is stuck loading or will not sync. If this is the case, follow the follow guide to resolve the issue.\nImportant note NB: Before attempting this process, you should make a backup of your keystore data/PIRL wallet. A guide on how to do this is available here: How to Backup Pirl Wallets\nDeleting the blockchain data After ensuring you have backed up your keystore/wallet data securely, the remainder of the process is straight-forward, and goes as follows:\n Close Pirl Nautilus wallet Locate \u0026amp; Delete Pirl chaindata Re-Open Pirl chaindata  Locating the data On Windows, this data is located at:\nC:\\Users\\*YourUsername*\\AppData\\Roaming\\Pirl\\pirl\nOn Linux, it\u0026rsquo;s located at:\n~/.pirl\nOn MacOS X, it\u0026rsquo;s located at:\n~/Library/Pirl\nSummary Your blockchain data should now be reset, which will typically resolve most wallet-related issues. When you reopen the wallet, do note that it will have to download the blockchain data again, which may take some time.\nAuthor(s): Bigchrome\n"
},
{
	"uri": "https://pirl.live/ipns/QmVKFJs81erni4KV6Hzt2xVwGtC2P1WtE9A4MxNThFVFVh/en/getting-started/how-to-contribute/markdown-guide/",
	"title": "Markdown Guide",
	"tags": [],
	"description": "",
	"content": " Introduction To contribute to PIRL documentation you\u0026rsquo;ll have to use \u0026ldquo;markdown\u0026rdquo; formatting. Markdown is one of many ways to do documentation. It\u0026rsquo;s probably not the best and certainly not the worst. It\u0026rsquo;s easy to get into and allow for a self-consistent documentation cycle.\nBelow you\u0026rsquo;ll find some examples of how to use markdown along with our recommendations and best practices. Please use our recommendations when composing PIRL documentation so that it looks well put together with the rest of the content. Also, make sure to take look at Style Guide for additional guidelines regarding content formatting.\nExample Markdown Document Below is an example document using markdown. This document will be rendered by the software to display as described.\n\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt; HEAD\n \u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt; local_version\nBasic Markdown Guide Main Title The main document title is displayed at the top of the document using the largest font. In markdown, the title goes at the very top of the document in between the --- section as shown below for this very document.\n--- title: Markdown Guide weight: 5 ---  Headers Headers are usually sized from H1 (largest) to H6 (smallest). Markdown is no different. The number representing the size of the header is represented by a #. A single # is equivalent to H1, two ## is equivalent to H2, etc.\n# This is an H1 tag ## This is an H2 tag ### This is an H3 tag #### This is an H4 tag ##### This is an H5 tag ###### This is an H6 tag   PIRL TIP: The major sections of a document start with ## or H2\n Emphasis To italicize text, use a single set of asterisks around it. To mark text as bold, use a set of two asterisks around it. To strike out some text, use two tildes (~) around it.\n*This text will be italicized* **This text will be in bold** _**What about bold italic**_ ~~Did I say something wrong?~~ \u0026lt;center\u0026gt;I am centered writer\u0026lt;/center\u0026gt;  This text will be italicized\nThis text will be in bold\nWhat about bold italic\nDid I say something wrong?\nI am centered writer\nCitation To quote something, use a right sharp bracket \u0026gt;And do your quote!\n\u0026gt;**Manual to this article**: You have to read this article from front to back and show your grace. After all, that is how literature works, right? (unless it is instruction manual, in which case no one reads them at all)   Manual to this article: You have to read this article from front to back and show your grace. After all, that is how literature works, right? (unless it is instruction manual, in which case no one reads them at all)\n Table If you want to create a simple table in Atom text editor, you can simply time down \u0026ldquo;table\u0026rdquo; and hit an Enter! If you are writing in notepad, well, then I wish sincere condolences :) But by writing down those symbols, you can create a single rows and columns.\nHere you have two examples:\n| Header One | Header Two | | :------------- | :------------- | | Item One | Item Two |     Header One Header Two     Item One Item Two    |[Web page](https://pirl.io/)|[White Paper](https://storage.gra1.cloud.ovh.net/v1/AUTH_33a0c4ac73cf4d88a243480c275be8ac/pirl/pirl-whitepaper.pdf)| [Twitter](https://twitter.com/PirlOfficial) | |:------------- |:-------------:| -----:|     Web page White Paper Twitter      Lists Ordered lists are created by using 1. for the find item and then incrementing with each subsequent line. Unordered lists are created by using +.\n1. First 2. Second 3. Third + Satoshi + Vitalik + PIRL 1. This is first + First thing 2. This is Second + Second thing 3. This is Third + Third thing   First Second Third   Satoshi Vitalik PIRL   This is first  First thing  This is Second  Second thing  This is Third  Third thing   Links Making links simply involves pasting a URL between a set of () parenthesis. There are also a couple extra options.\nThis is an [example link](http://example.com/ \u0026quot;With a Title\u0026quot;). It will still work if the only thing included is the link within the parenthesis.  This is an example link. It will still work if the only thing included is the link within the parenthesis.\nImages \u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt; HEAD Linking images is just like links with a shortcode *   ======= Linking images is just like links with a ! exclamation point in front.  * ![Magic](/getting started/how to contribute/images/magic.gif?classes=shadow \u0026quot;Magic!\u0026quot;)   \u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt; local_version  Code There are two ways to distinguish code from text, one for inline use and one for blocks of code. To distinguish code inline put a set of back ticks around it. To do it as a block of text, put three back ticks at the tom and the bottom.\n\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt; HEAD\n \u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt; local_version\nThis is will be displayed a as a block of code. More importantly, notice the back ticks at the top and bottom.  Author: PrimateCrypto\n\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt; HEAD Contributor(s):\n@dptelecom Contributor(s): Mickey Maler \u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt; local_version\n"
},
{
	"uri": "https://pirl.live/ipns/QmVKFJs81erni4KV6Hzt2xVwGtC2P1WtE9A4MxNThFVFVh/en/pirlcloud/pirl-app/pirl-app-guide/",
	"title": "PirlApp Guide",
	"tags": [],
	"description": "",
	"content": " \u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt; HEAD\n \u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt; local_version\nOverview. This guide will explain how you setup the:\n\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt; HEAD\n \u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt; local_version\nPrerequisites. Download here the PirlApp for MacOs: Downloads\nDownload here the PirlApp for Windows Downloads\nInstall the PirlApp. Go to the folder where you downloaded the PirlApp\nguide on how to install PirlApp can be found here:\n1.) PirlApp Windows install 2.) PirlApp macOs install and run the installer.\nSetup the PirlApp. Open the PirlApp:\n\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt; HEAD The welcome sreen:\n The welcome sreen:\n\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt; local_version\nCreate the account for using the PirlApp. Fill in a password you want to use (and write it down somewhere for your self)\n\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt; HEAD And hit create\nAnd now we get the following error at the bottom off the screen  And hit create\nAnd now we get the following error at the bottom off the screen \u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt; local_version\nThis is normal don\u0026rsquo;t worry!! you get this because there are no funds at the wallet, to pay for the gas you need to activate the contract.\nand now we cone fix this by sending an x amount to the wallet in this example we do 0.2 Pirl.\nThe first step is to copy the key/wallet address:\n\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt; HEAD\n \u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt; local_version\nNow you go to your wallet and transfer 0.2 or any other amount you want to the key/wallet address we just copied\n\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt; HEAD\n \u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt; local_version\nif you want to verify if the funds are in you can go to the explorer\nand fill in the same key/wallet address we just copied and you will see this:\n\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt; HEAD\n \u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt; local_version\nnow we wait until the funds are in:\n\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt; HEAD\n \u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt; local_version\ncontinue the creating of the account we go back to the PirlApp ** DO NOT HIT CREATE AGAIN!!!** because this makes an extra key/wallet address and than it looks like this:\n\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt; HEAD\n \u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt; local_version\ninstead you press the first key/wallet address we want to activate, you also can see there are funds in now ;-)\n\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt; HEAD\n \u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt; local_version\nAfter you press it you will be prompted to fill in the Username and the password we created earlier:\n\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt; HEAD\n \u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt; local_version\nPress register and there we go we got enough gas to proceed now:\n\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt; HEAD and then magic happens and we can go on:\nFinally we now get this very sexy Dashboard and we are clear to go!!  and then magic happens and we can go on:\nFinally we now get this very sexy Dashboard and we are clear to go!! \u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt; local_version\nAuthor(s):\n@dptelecom\nContributor():\n"
},
{
	"uri": "https://pirl.live/ipns/QmVKFJs81erni4KV6Hzt2xVwGtC2P1WtE9A4MxNThFVFVh/en/development/core/testnetwork/",
	"title": "PirlTestNetwork",
	"tags": [],
	"description": "",
	"content": " \u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt; HEAD\n \u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt; local_version\nPirl Community! A 51% attack on the Pirl network was identified on 10/14/2018.\nOnce the attack was mitigated, we took the necessary steps to completely lock out the attackers and make sure that the exchange wallets were safe. We are now just steps away from deploying our remedial actions to the Pirl Blockchain, which will help prevent this kind of attack from happening in the future.\nHow ? (by using the HULK)\nThe network security solution we code named “Hulk” will now be tested on the PirlTestNetowrk\nif you want to participate in the future grow and security you can join in with you hash power: PirlTestNetwork Pool. PirlTestNetwork Stats. \u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt; HEAD\n=======\nPhoenix Windows miner 3.5d for testnetwork.        local_version\n       how to setup mining Mining The testnetwork is not paying real Pirl because its a testnetwork keep this in mind!!!\n The information above is far from detailed but, in order to be safe until “Hulk” first step is implemented, we will keep the blueprints of our security private.\nWe are extremely happy to have your support, reading the messages in discord have done a lot for the team motivation during the entire operation.\nThis is just a quick update, more information will follow!\n#PirlTogetherStrong\nYours,\nPirl Team\nAuthor(s):\n@dptelecom\nContributor():\n"
},
{
	"uri": "https://pirl.live/ipns/QmVKFJs81erni4KV6Hzt2xVwGtC2P1WtE9A4MxNThFVFVh/en/pirlcloud/poseidon/login/",
	"title": "Poseidon first login and 2FA",
	"tags": [],
	"description": "",
	"content": " \u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt; HEAD\n \u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt; local_version\nPoseidon first login Nice we have the account created now we are going for the first time login, we have a few steps to follow to complete our account fill in your credentials and push the next button:\n\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt; HEAD\n \u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt; local_version\nNext page you get the notification to enable two-factor authentication: click next and we can continue\n\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt; HEAD\n \u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt; local_version\nAt this page you have to make a decision which kind of two-factor authentication you prefer, either you chose to use:\n1) Google Authenticator\n* Play store for Android\n* App Store for Iphone\n2) sms notification\nAfter you made you choise you push next\nbelow i show both options\n1) the Google Authenticator:\n\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt; HEAD\n \u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt; local_version\nChose the first option and push the next button, you will get this page:\n\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt; HEAD\n \u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt; local_version\nScan the QR code with the Google Authenticator app, and in the app you will see Poseidon added like this:\n\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt; HEAD\n \u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt; local_version\nFill in the code to confirm the Google Authenticator setup.\n\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt; HEAD\n \u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt; local_version\nAnd now you the next time you want to login you must use the token after you fill in your credentials.\n\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt; HEAD  \u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt; local_version\n2) sms notification\n\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt; HEAD\n \u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt; local_version\nAnd now you fil in your phone number:\n\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt; HEAD\n \u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt; local_version\nPress next and you should have received an sms with an Token,\n\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt; HEAD  \u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt; local_version\nthis token you fill in here:\n\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt; HEAD\n \u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt; local_version\nand then,\nWelcome all done and setup:\n\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt; HEAD\n \u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt; local_version\nNext page Poseidon unique all-in-one platform Author(s):\n@Dptelecom\nContributor(s):\n"
},
{
	"uri": "https://pirl.live/ipns/QmVKFJs81erni4KV6Hzt2xVwGtC2P1WtE9A4MxNThFVFVh/en/press-releases/pirlguard/",
	"title": "Press releases PirlGuard",
	"tags": [],
	"description": "",
	"content": " \u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt; HEAD\n \u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt; local_version\nPress releases But first in short what is PirlGuard PirlGuard - Innovative Solution against 51% Attacks\nyou can read the whole Kb here PirlGuard You can also watch this video:  How PirlGuard works? In order to disrupt the mechanics behind 51% attack that allows an attacker to be successful, we have deployed a core solution with a modified consensus algorithm that will defend our blockchain and many others in the near future from virtually all 51% attacks.\nPirlGuard System With the PirlGuard Protocol deployed the chances of an attack succeeding are vastly reduced. As we know once the attacker has created a longer chain through privately mining a separate chain they will then have to broadcast it to the network. Once the attacker opens their node for peering it will attempt to peer with rest of the nodes on the network, telling them that they are wrong. However, once this happens PirlGuard will drop the peer and penalize them by sentencing them to mine X amount of penalty blocks due to their un-peered mining. The amount of penalty blocks assigned depends on the amount of blocks that the malicious miner mined in private. The PirlGuard security protocol greatly deters attackers from attempting malicious peering giving the main network a much needed boost in security. This new security mechanism reduces the chances to approximately 0.03%.\nOpen Source Pirl has so far contributed to blockchain by developing the first Ethash code based masternode network, the first private IPFS implementation running over a masternode network and is currently working on their own private encrypted blockchain storage solution. The PirlGuard Security Protocol will be added to our open source library along with the core of the project. At Pirl we are developing to revolutionize and streamline blockchain technology for the entire blockchain industry. This means our code will be available to anyone to study, educate, test, modify or apply towards their own blockchain network security against future 51% attacks.\nSource Code:\nWebsite:\nPress releases PirlGuard: CCN.com\nOther projects using the PirlGuard solution: EtherGem (EGEM) \u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt; HEAD\n \u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt; local_version EGEM website\nHere is the official announcement from the EGEM lead dev Riddlez666 \u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt; HEAD  \u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt; local_version\n\n#PirlTogetherStrong\nYours,\nPirl Team\nAuthor(s):\nThe Pirl Team\nContributor():\n@dptelecom\n"
},
{
	"uri": "https://pirl.live/ipns/QmVKFJs81erni4KV6Hzt2xVwGtC2P1WtE9A4MxNThFVFVh/en/pirlcloud/cloudacess/",
	"title": "Public storage",
	"tags": [],
	"description": "",
	"content": " \u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt; HEAD\n \u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt; local_version\nPublic storage. Description soon\u0026hellip;..\n1.) How host/share content 2.) 3.) Author(s):\n@Dptelecom\nContributor(s):\n"
},
{
	"uri": "https://pirl.live/ipns/QmVKFJs81erni4KV6Hzt2xVwGtC2P1WtE9A4MxNThFVFVh/en/pirlcloud/masternodes/storage-masternodes/",
	"title": "Storage Masternodes",
	"tags": [],
	"description": "",
	"content": " \u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt; HEAD  \u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt; local_version\nStorage Masternodes will provide digital downloads for the marketplace, and will be used as a backup file server. Further they will be able to privately store data for dApps hosted on the PIRL platform.\nAuthor(s): @Dptelecom\nContributor(s):\n"
},
{
	"uri": "https://pirl.live/ipns/QmVKFJs81erni4KV6Hzt2xVwGtC2P1WtE9A4MxNThFVFVh/en/development/core/followup-51-percent-attack/",
	"title": "Attack Aftermaths &amp; Securing Funds",
	"tags": [],
	"description": "",
	"content": " \u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt; HEAD\n        local_version\n       Dear Community, As you are all aware the Pirl network suffered a 51% and Double Spend attack, which was mitigated shortly after it was discovered. However, during the week prior to discovery, the attacker managed to double spend 1,961,500 PIRL and deposit them across multiple exchanges, mainly Cryptopia.\nNow that Cryptopia has concluded their audit, there are two paths forward to get the market reopened:\n1) The exchange can adjust users’ account balances to account for the PIRL that was double spent on Cryptopia (thereby leading to a loss of funds for PIRL community members) Or\n2) We can generate a one-time Superblock that will cover all Community members accounts AND recover all remaining PIRL in the Attackers addresses. Even though the majority of the Dev Fund have not been spent, we still do not have enough to cover the 1,961,500 PIRL deficit caused by the attacker and forcing the community to pay for the attacker\u0026rsquo;s actions is not an option. As such, the only viable option for us at this stage is to create the reimbursement coins with the fork that will recover the attacker\u0026rsquo;s funds and help prevent future attacks of this type.\nWe want to do this completely transparently and allow everyone to monitor the creation and transfer of the funds back to Cryptopia. The funds will be created in complete transparency through a superblock, which will zero the 825 000 Pirl found in attackers possession and add the 1,1 million PIRL that was already maliciously sold to the Pirl community on Cryptopia.\nThe 1,961,500 PIRL that was double spent has already impacted the market by being sold on Cryptopia, this Superblock will not be adding to inflation, it will actually lead to a deflation of the 825,000 PIRL that will be recovered from the attacker.\nTo explain how this is not adding inflation, it should be added that due to the changes to the difficulty algorithm done with block 2,000,000, the intended blocktime of 13 seconds erroneously went from 13 seconds to 18 seconds since then. This difference in the blocktime after its implementation from 13s to 18s we have generated 142,734 blocks less than we would have. Which is 1,427,342 PIRL deflation over the period since block 2,000,000\nPirl has met many challenges in the past year, we have overcome everything and not only survived but thrived with new technology and features development. This is just another step on our rough journey, and we must make it, together as we always did.\nThe PIRL Team\nAuthor(s):\n@dptelecom\nContributor():\n"
},
{
	"uri": "https://pirl.live/ipns/QmVKFJs81erni4KV6Hzt2xVwGtC2P1WtE9A4MxNThFVFVh/en/solidity/management-api/",
	"title": "Management APIs",
	"tags": [],
	"description": "",
	"content": " Beside the official DApp APIs interface go-pirl has support for additional management APIs. Similar to the DApp APIs, these are also provided using JSON-RPC and follow exactly the same conventions. Pirl comes with a console client which has support for all additional APIs described here.\nEnabling the management APIs To offer these APIs over the Pirl RPC endpoints, please specify them with the --${interface}api command line argument (where ${interface} can be rpc for the HTTP endpoint, ws for the WebSocket endpoint and ipc for the unix socket (Unix) or named pipe (Windows) endpoint).\nFor example: Pirl --ipcapi admin,eth,miner --rpcapi eth,web3 --rpc\n Enables the admin, official DApp and miner API over the IPC interface Enables the official DApp and web3 API over the HTTP interface  The HTTP RPC interface must be explicitly enabled using the --rpc flag.\nPlease note, offering an API over the HTTP (rpc) or WebSocket (ws) interfaces will give everyone access to the APIs who can access this interface (DApps, browser tabs, etc). Be careful which APIs you enable. By default Pirl enables all APIs over the IPC (ipc) interface and only the db, eth, net and web3 APIs over the HTTP and WebSocket interfaces.\nTo determine which APIs an interface provides, the modules JSON-RPC method can be invoked. For example over an ipc interface on unix systems:\necho '{\u0026quot;jsonrpc\u0026quot;:\u0026quot;2.0\u0026quot;,\u0026quot;method\u0026quot;:\u0026quot;rpc_modules\u0026quot;,\u0026quot;params\u0026quot;:[],\u0026quot;id\u0026quot;:1}' | nc -U $datadir/Pirl.ipc  will give all enabled modules including the version number:\n{ \u0026quot;id\u0026quot;:1, \u0026quot;jsonrpc\u0026quot;:\u0026quot;2.0\u0026quot;, \u0026quot;result\u0026quot;:{ \u0026quot;admin\u0026quot;:\u0026quot;1.0\u0026quot;, \u0026quot;db\u0026quot;:\u0026quot;1.0\u0026quot;, \u0026quot;debug\u0026quot;:\u0026quot;1.0\u0026quot;, \u0026quot;eth\u0026quot;:\u0026quot;1.0\u0026quot;, \u0026quot;miner\u0026quot;:\u0026quot;1.0\u0026quot;, \u0026quot;net\u0026quot;:\u0026quot;1.0\u0026quot;, \u0026quot;personal\u0026quot;:\u0026quot;1.0\u0026quot;, \u0026quot;shh\u0026quot;:\u0026quot;1.0\u0026quot;, \u0026quot;txpool\u0026quot;:\u0026quot;1.0\u0026quot;, \u0026quot;web3\u0026quot;:\u0026quot;1.0\u0026quot; } }  Consuming the management APIs These additional APIs follow the same conventions as the official DApp APIs. Web3 can be used to consume these additional APIs.\n2 examples:\n Console: miner.start()\n IPC: echo '{\u0026quot;jsonrpc\u0026quot;:\u0026quot;2.0\u0026quot;,\u0026quot;method\u0026quot;:\u0026quot;miner_start\u0026quot;,\u0026quot;params\u0026quot;:[],\u0026quot;id\u0026quot;:1}' | nc -U $datadir/Pirl.ipc\n HTTP: curl -X POST --data '{\u0026quot;jsonrpc\u0026quot;:\u0026quot;2.0\u0026quot;,\u0026quot;method\u0026quot;:\u0026quot;miner_start\u0026quot;,\u0026quot;params\u0026quot;:[],\u0026quot;id\u0026quot;:74}' localhost:8545\n  With the number of THREADS as an arguments:\n Console: miner.start(4)\n IPC: echo '{\u0026quot;jsonrpc\u0026quot;:\u0026quot;2.0\u0026quot;,\u0026quot;method\u0026quot;:\u0026quot;miner_start\u0026quot;,\u0026quot;params\u0026quot;:[4],\u0026quot;id\u0026quot;:1}' | nc -U $datadir/Pirl.ipc\n HTTP: curl -X POST --data '{\u0026quot;jsonrpc\u0026quot;:\u0026quot;2.0\u0026quot;,\u0026quot;method\u0026quot;:\u0026quot;miner_start\u0026quot;,\u0026quot;params\u0026quot;:[4],\u0026quot;id\u0026quot;:74}' localhost:8545\n  List of management APIs Beside the officially exposed DApp API namespaces (eth, shh, web3), Pirl provides the following extra management API namespaces:\n admin: Pirl node management debug: Pirl node debugging miner: Miner and DAG personal: Account management txpool: Transaction pool inspection     admin debug miner personal txpool     addPeer backtraceAt setExtra ecRecover content   datadir blockProfile setGasPrice importRawKey inspect   nodeInfo cpuProfile start listAccounts status   peers dumpBlock stop lockAccount    setSolc gcStats Gethashrate newAccount    startRPC getBlockRlp setEtherbase unlockAccount    startWS goTrace  sendTransaction    stopRPC memStats  sign    stopWS seedHashsign       setBlockProfileRate       setHead       stacks       startCPUProfile       startGoTrace       stopCPUProfile       stopGoTrace       traceBlock       traceBlockByNumber       traceBlockByHash       traceBlockFromFile       traceTransaction       verbosity       vmodule       writeBlockProfile       writeMemProfile       Admin The admin API gives you access to several non-standard RPC methods, which will allow you to have a fine grained control over your Pirl instance, including but not limited to network peer and RPC endpoint management.\nadmin_addPeer The addPeer administrative method requests adding a new remote node to the list of tracked static nodes. The node will try to maintain connectivity to these nodes at all times, reconnecting every once in a while if the remote connection goes down.\nThe method accepts a single argument, the \u0026lsquo;enode\u0026rsquo; URL of the remote peer to start tracking and returns a BOOL indicating whether the peer was accepted for tracking or some error occurred.\n   Client Method invocation     Go admin.AddPeer(url string) (bool, error)   Console admin.addPeer(url)   RPC {\u0026quot;method\u0026quot;: \u0026quot;admin_addPeer\u0026quot;, \u0026quot;params\u0026quot;: [url]}    Example \u0026gt; admin.addPeer(\u0026quot;enode://a979fb575495b8d6db44f750317d0f4622bf4c2aa3365d6af7c284339968eef29b69ad0dce72a4d8db5ebb4968de0e3bec910127f134779fbcb0cb6d3331163c@52.16.188.185:30303\u0026quot;) true  admin_datadir The datadir administrative property can be queried for the absolute path the running Pirl node currently uses to store all its databases.\n   Client Method invocation     Go admin.Datadir() (string, error)   Console admin.datadir   RPC {\u0026quot;method\u0026quot;: \u0026quot;admin_datadir\u0026quot;}    Example \u0026gt; admin.datadir \u0026quot;/home/karalabe/.pirl\u0026quot;  admin_nodeInfo The nodeInfo administrative property can be queried for all the information known about the running Pirl node at the networking granularity. These include general information about the node itself as a participant of the P2P overlay protocol, as well as specialized information added by each of the running application protocols (e.g. eth, les, shh, bzz).\n   Client Method invocation     Go admin.NodeInfo() (*p2p.NodeInfo, error)   Console admin.nodeInfo   RPC {\u0026quot;method\u0026quot;: \u0026quot;admin_nodeInfo\u0026quot;}    Example \u0026gt; admin.nodeInfo { enode: \u0026quot;enode://44826a5d6a55f88a18298bca4773fca5749cdc3a5c9f308aa7d810e9b31123f3e7c5fba0b1d70aac5308426f47df2a128a6747040a3815cc7dd7167d03be320d@[::]:30303\u0026quot;, id: \u0026quot;44826a5d6a55f88a18298bca4773fca5749cdc3a5c9f308aa7d810e9b31123f3e7c5fba0b1d70aac5308426f47df2a128a6747040a3815cc7dd7167d03be320d\u0026quot;, ip: \u0026quot;::\u0026quot;, listenAddr: \u0026quot;[::]:30303\u0026quot;, name: \u0026quot;Pirl/v1.5.0-unstable/linux/go1.6\u0026quot;, ports: { discovery: 30303, listener: 30303 }, protocols: { eth: { difficulty: 17334254859343145000, genesis: \u0026quot;0xd4e56740f876aef8c010b86a40d5f56745a118d0906a34e69aec8c0db1cb8fa3\u0026quot;, head: \u0026quot;0xb83f73fbe6220c111136aefd27b160bf4a34085c65ba89f24246b3162257c36a\u0026quot;, network: 1 } } }  admin_peers The peers administrative property can be queried for all the information known about the connected remote nodes at the networking granularity. These include general information about the nodes themselves as participants of the P2P overlay protocol, as well as specialized information added by each of the running application protocols (e.g. eth, les, shh, bzz).\n   Client Method invocation     Go admin.Peers() ([]*p2p.PeerInfo, error)   Console admin.peers   RPC {\u0026quot;method\u0026quot;: \u0026quot;admin_peers\u0026quot;}    Example \u0026gt; admin.peers [{ caps: [\u0026quot;eth/61\u0026quot;, \u0026quot;eth/62\u0026quot;, \u0026quot;eth/63\u0026quot;], id: \u0026quot;08a6b39263470c78d3e4f58e3c997cd2e7af623afce64656cfc56480babcea7a9138f3d09d7b9879344c2d2e457679e3655d4b56eaff5fd4fd7f147bdb045124\u0026quot;, name: \u0026quot;Pirl/v1.5.0-unstable/linux/go1.5.1\u0026quot;, network: { localAddress: \u0026quot;192.168.0.104:51068\u0026quot;, remoteAddress: \u0026quot;71.62.31.72:30303\u0026quot; }, protocols: { eth: { difficulty: 17334052235346465000, head: \u0026quot;5794b768dae6c6ee5366e6ca7662bdff2882576e09609bf778633e470e0e7852\u0026quot;, version: 63 } } }, /* ... */ { caps: [\u0026quot;eth/61\u0026quot;, \u0026quot;eth/62\u0026quot;, \u0026quot;eth/63\u0026quot;], id: \u0026quot;fcad9f6d3faf89a0908a11ddae9d4be3a1039108263b06c96171eb3b0f3ba85a7095a03bb65198c35a04829032d198759edfca9b63a8b69dc47a205d94fce7cc\u0026quot;, name: \u0026quot;Pirl/v1.3.5-506c9277/linux/go1.4.2\u0026quot;, network: { localAddress: \u0026quot;192.168.0.104:55968\u0026quot;, remoteAddress: \u0026quot;121.196.232.205:30303\u0026quot; }, protocols: { eth: { difficulty: 17335165914080772000, head: \u0026quot;5794b768dae6c6ee5366e6ca7662bdff2882576e09609bf778633e470e0e7852\u0026quot;, version: 63 } } }]  admin_setSolc The setSolc administrative method sets the Solidity compiler path to be used by the node when invoking the eth_compileSolidity RPC method. The Solidity compiler path defaults to /usr/bin/solc if not set, so you only need to change it for using a non-standard compiler location.\nThe method accepts an absolute path to the Solidity compiler to use (specifying a relative path would depend on the current – to the user unknown – working directory of Pirl), and returns the version string reported by solc --version.\n   Client Method invocation     Go admin.SetSolc(path string) (string, error)   Console admin.setSolc(path)   RPC {\u0026quot;method\u0026quot;: \u0026quot;admin_setSolc\u0026quot;, \u0026quot;params\u0026quot;: [path]}    Example \u0026gt; admin.setSolc(\u0026quot;/usr/bin/solc\u0026quot;) \u0026quot;solc, the solidity compiler commandline interface\\nVersion: 0.3.2-0/Release-Linux/g++/Interpreter\\n\\npath: /usr/bin/solc\u0026quot;  admin_startRPC The startRPC administrative method starts an HTTP based JSON RPC API webserver to handle client requests. All the parameters are optional:\n host: network interface to open the listener socket on (defaults to \u0026quot;localhost\u0026quot;) port: network port to open the listener socket on (defaults to 8545) cors: cross-origin resource sharing header to use (defaults to \u0026quot;\u0026quot;) apis: API modules to offer over this interface (defaults to \u0026quot;eth,net,web3\u0026quot;)  The method returns a boolean flag specifying whether the HTTP RPC listener was opened or not. Please note, only one HTTP endpoint is allowed to be active at any time.\n   Client Method invocation     Go admin.StartRPC(host *string, port *rpc.HexNumber, cors *string, apis *string) (bool, error)   Console admin.startRPC(host, port, cors, apis)   RPC {\u0026quot;method\u0026quot;: \u0026quot;admin_startRPC\u0026quot;, \u0026quot;params\u0026quot;: [host, port, cors, apis]}    Example \u0026gt; admin.startRPC(\u0026quot;127.0.0.1\u0026quot;, 8545) true  admin_startWS The startWS administrative method starts an WebSocket based JSON RPC API webserver to handle client requests. All the parameters are optional:\n host: network interface to open the listener socket on (defaults to \u0026quot;localhost\u0026quot;) port: network port to open the listener socket on (defaults to 8546) cors: cross-origin resource sharing header to use (defaults to \u0026quot;\u0026quot;) apis: API modules to offer over this interface (defaults to \u0026quot;eth,net,web3\u0026quot;)  The method returns a boolean flag specifying whether the WebSocket RPC listener was opened or not. Please note, only one WebSocket endpoint is allowed to be active at any time.\n   Client Method invocation     Go admin.StartWS(host *string, port *rpc.HexNumber, cors *string, apis *string) (bool, error)   Console admin.startWS(host, port, cors, apis)   RPC {\u0026quot;method\u0026quot;: \u0026quot;admin_startWS\u0026quot;, \u0026quot;params\u0026quot;: [host, port, cors, apis]}    Example \u0026gt; admin.startWS(\u0026quot;127.0.0.1\u0026quot;, 8546) true  admin_stopRPC The stopRPC administrative method closes the currently open HTTP RPC endpoint. As the node can only have a single HTTP endpoint running, this method takes no parameters, returning a boolean whether the endpoint was closed or not.\n   Client Method invocation     Go admin.StopRPC() (bool, error)   Console admin.stopRPC()   RPC {\u0026quot;method\u0026quot;: \u0026quot;admin_stopRPC\u0026quot;    Example \u0026gt; admin.stopRPC() true  admin_stopWS The stopWS administrative method closes the currently open WebSocket RPC endpoint. As the node can only have a single WebSocket endpoint running, this method takes no parameters, returning a boolean whether the endpoint was closed or not.\n   Client Method invocation     Go admin.StopWS() (bool, error)   Console admin.stopWS()   RPC {\u0026quot;method\u0026quot;: \u0026quot;admin_stopWS\u0026quot;    Example \u0026gt; admin.stopWS() true  Debug The debug API gives you access to several non-standard RPC methods, which will allow you to inspect, debug and set certain debugging flags during runtime.\ndebug_backtraceAt Sets the logging backtrace location. When a backtrace location is set and a log message is emitted at that location, the stack of the goroutine executing the log statement will be printed to stderr.\nThe location is specified as \u0026lt;filename\u0026gt;:\u0026lt;line\u0026gt;.\n   Client Method invocation     Console debug.backtraceAt(string)   RPC {\u0026quot;method\u0026quot;: \u0026quot;debug_backtraceAt\u0026quot;, \u0026quot;params\u0026quot;: [string]}    Example:\n\u0026gt; debug.backtraceAt(\u0026quot;server.go:443\u0026quot;)  debug_blockProfile Turns on block profiling for the given duration and writes profile data to disk. It uses a profile rate of 1 for most accurate information. If a different rate is desired, set the rate and write the profile manually using debug_writeBlockProfile.\n   Client Method invocation     Console debug.blockProfile(file, seconds)   RPC {\u0026quot;method\u0026quot;: \u0026quot;debug_blockProfile\u0026quot;, \u0026quot;params\u0026quot;: [string, number]}    debug_cpuProfile Turns on CPU profiling for the given duration and writes profile data to disk.\n   Client Method invocation     Console debug.cpuProfile(file, seconds)   RPC {\u0026quot;method\u0026quot;: \u0026quot;debug_cpuProfile\u0026quot;, \u0026quot;params\u0026quot;: [string, number]}    debug_dumpBlock Retrieves the state that corresponds to the block number and returns a list of accounts (including storage and code).\n   Client Method invocation     Go debug.DumpBlock(number uint64) (state.World, error)   Console debug.traceBlockByHash(number, [options])   RPC {\u0026quot;method\u0026quot;: \u0026quot;debug_dumpBlock\u0026quot;, \u0026quot;params\u0026quot;: [number]}    Example \u0026gt; debug.dumpBlock(10) { fff7ac99c8e4feb60c9750054bdc14ce1857f181: { balance: \u0026quot;49358640978154672\u0026quot;, code: \u0026quot;\u0026quot;, codeHash: \u0026quot;c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470\u0026quot;, nonce: 2, root: \u0026quot;56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421\u0026quot;, storage: {} }, fffbca3a38c3c5fcb3adbb8e63c04c3e629aafce: { balance: \u0026quot;3460945928\u0026quot;, code: \u0026quot;\u0026quot;, codeHash: \u0026quot;c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470\u0026quot;, nonce: 657, root: \u0026quot;56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421\u0026quot;, storage: {} } }, root: \u0026quot;19f4ed94e188dd9c7eb04226bd240fa6b449401a6c656d6d2816a87ccaf206f1\u0026quot; }  debug_gcStats Returns GC statistics.\nSee https://golang.org/pkg/runtime/debug/#GCStats for information about the fields of the returned object.\n   Client Method invocation     Console debug.gcStats()   RPC {\u0026quot;method\u0026quot;: \u0026quot;debug_gcStats\u0026quot;, \u0026quot;params\u0026quot;: []}    debug_getBlockRlp Retrieves and returns the RLP encoded block by number.\n   Client Method invocation     Go debug.GetBlockRlp(number uint64) (string, error)   Console debug.getBlockRlp(number, [options])   RPC {\u0026quot;method\u0026quot;: \u0026quot;debug_getBlockRlp\u0026quot;, \u0026quot;params\u0026quot;: [number]}    debug_goTrace Turns on Go runtime tracing for the given duration and writes trace data to disk.\n   Client Method invocation     Console debug.goTrace(file, seconds)   RPC {\u0026quot;method\u0026quot;: \u0026quot;debug_goTrace\u0026quot;, \u0026quot;params\u0026quot;: [string, number]}    debug_memStats Returns detailed runtime memory statistics.\nSee https://golang.org/pkg/runtime/#MemStats for information about the fields of the returned object.\n   Client Method invocation     Console debug.memStats()   RPC {\u0026quot;method\u0026quot;: \u0026quot;debug_memStats\u0026quot;, \u0026quot;params\u0026quot;: []}    debug_seedHash Fetches and retrieves the seed hash of the block by number\n   Client Method invocation     Go debug.SeedHash(number uint64) (string, error)   Console debug.seedHash(number, [options])   RPC {\u0026quot;method\u0026quot;: \u0026quot;debug_seedHash\u0026quot;, \u0026quot;params\u0026quot;: [number]}    debug_setHead Sets the current head of the local chain by block number. Note, this is a destructive action and may severely damage your chain. Use with extreme caution.\n   Client Method invocation     Go debug.SetHead(number uint64)   Console debug.setHead(number)   RPC {\u0026quot;method\u0026quot;: \u0026quot;debug_setHead\u0026quot;, \u0026quot;params\u0026quot;: [number]}    debug_setBlockProfileRate Sets the rate (in samples/sec) of goroutine block profile data collection. A non-zero rate enables block profiling, setting it to zero stops the profile. Collected profile data can be written using debug_writeBlockProfile.\n   Client Method invocation     Console debug.setBlockProfileRate(rate)   RPC {\u0026quot;method\u0026quot;: \u0026quot;debug_setBlockProfileRate\u0026quot;, \u0026quot;params\u0026quot;: [number]}    debug_stacks Returns a printed representation of the stacks of all goroutines. Note that the web3 wrapper for this method takes care of the printing and does not return the string.\n   Client Method invocation     Console debug.stacks()   RPC {\u0026quot;method\u0026quot;: \u0026quot;debug_stacks\u0026quot;, \u0026quot;params\u0026quot;: []}    debug_startCPUProfile Turns on CPU profiling indefinitely, writing to the given file.\n   Client Method invocation     Console debug.startCPUProfile(file)   RPC {\u0026quot;method\u0026quot;: \u0026quot;debug_startCPUProfile\u0026quot;, \u0026quot;params\u0026quot;: [string]}    debug_startGoTrace Starts writing a Go runtime trace to the given file.\n   Client Method invocation     Console debug.startGoTrace(file)   RPC {\u0026quot;method\u0026quot;: \u0026quot;debug_startGoTrace\u0026quot;, \u0026quot;params\u0026quot;: [string]}    debug_stopCPUProfile Stops an ongoing CPU profile.\n   Client Method invocation     Console debug.stopCPUProfile()   RPC {\u0026quot;method\u0026quot;: \u0026quot;debug_stopCPUProfile\u0026quot;, \u0026quot;params\u0026quot;: []}    debug_stopGoTrace Stops writing the Go runtime trace.\n   Client Method invocation     Console debug.startGoTrace(file)   RPC {\u0026quot;method\u0026quot;: \u0026quot;debug_stopGoTrace\u0026quot;, \u0026quot;params\u0026quot;: []}    debug_traceBlock The traceBlock method will return a full stack trace of all invoked opcodes of all transaction that were included included in this block. Note, the parent of this block must be present or it will fail.\n   Client Method invocation     Go debug.TraceBlock(blockRlp []byte, config. *vm.Config) BlockTraceResult   Console debug.traceBlock(tblockRlp, [options])   RPC {\u0026quot;method\u0026quot;: \u0026quot;debug_traceBlock\u0026quot;, \u0026quot;params\u0026quot;: [blockRlp, {}]}    Example \u0026gt; debug.traceBlock(\u0026quot;0xblock_rlp\u0026quot;) { gas: 85301, returnValue: \u0026quot;\u0026quot;, structLogs: [{ depth: 1, error: \u0026quot;\u0026quot;, gas: 162106, gasCost: 3, memory: null, op: \u0026quot;PUSH1\u0026quot;, pc: 0, stack: [], storage: {} }, /* snip */ { depth: 1, error: \u0026quot;\u0026quot;, gas: 100000, gasCost: 0, memory: [\u0026quot;0000000000000000000000000000000000000000000000000000000000000006\u0026quot;, \u0026quot;0000000000000000000000000000000000000000000000000000000000000000\u0026quot;, \u0026quot;0000000000000000000000000000000000000000000000000000000000000060\u0026quot;], op: \u0026quot;STOP\u0026quot;, pc: 120, stack: [\u0026quot;00000000000000000000000000000000000000000000000000000000d67cbec9\u0026quot;], storage: { 0000000000000000000000000000000000000000000000000000000000000004: \u0026quot;8241fa522772837f0d05511f20caa6da1d5a3209000000000000000400000001\u0026quot;, 0000000000000000000000000000000000000000000000000000000000000006: \u0026quot;0000000000000000000000000000000000000000000000000000000000000001\u0026quot;, f652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d3f: \u0026quot;00000000000000000000000002e816afc1b5c0f39852131959d946eb3b07b5ad\u0026quot; } }]  debug_traceBlockByNumber Similar to debug_traceBlock, traceBlockByNumber accepts a block number and will replay the block that is already present in the database.\n   Client Method invocation     Go debug.TraceBlockByNumber(number uint64, config. *vm.Config) BlockTraceResult   Console debug.traceBlockByNumber(number, [options])   RPC {\u0026quot;method\u0026quot;: \u0026quot;debug_traceBlockByNumber\u0026quot;, \u0026quot;params\u0026quot;: [number, {}]}    debug_traceBlockByHash Similar to debug_traceBlock, traceBlockByHash accepts a block hash and will replay the block that is already present in the database.\n   Client Method invocation     Go debug.TraceBlockByHash(hash common.Hash, config. *vm.Config) BlockTraceResult   Console debug.traceBlockByHash(hash, [options])   RPC {\u0026quot;method\u0026quot;: \u0026quot;debug_traceBlockByHash\u0026quot;, \u0026quot;params\u0026quot;: [hash {}]}    debug_traceBlockFromFile Similar to debug_traceBlock, traceBlockFromFile accepts a file containing the RLP of the block.\n   Client Method invocation     Go debug.TraceBlockFromFile(fileName string, config. *vm.Config) BlockTraceResult   Console debug.traceBlockFromFile(fileName, [options])   RPC {\u0026quot;method\u0026quot;: \u0026quot;debug_traceBlockFromFile\u0026quot;, \u0026quot;params\u0026quot;: [fileName, {}]}    debug_traceTransaction The traceTransaction debugging method will attempt to run the transaction in the exact same manner as it was executed on the network. It will replay any transaction that may have been executed prior to this one before it will finally attempt to execute the transaction that corresponds to the given hash.\nIn addition to the hash of the transaction you may give it a secondary optional argument, which specifies the options for this specific call. The possible options are:\n disableStorage: BOOL. Setting this to true will disable storage capture (default = false). disableMemory: BOOL. Setting this to true will disable memory capture (default = false). disableStack: BOOL. Setting this to true will disable stack capture (default = false). tracer: STRING. Setting this will enable JavaScript-based transaction tracing, described below. If set, the previous four arguments will be ignored. timeout: STRING. Overrides the default timeout of 5 seconds for JavaScript-based tracing calls. Valid values are described here.     Client Method invocation     Go debug.TraceTransaction(txHash common.Hash, logger *vm.LogConfig) (*ExecutionResurt, error)   Console debug.traceTransaction(txHash, [options])   RPC {\u0026quot;method\u0026quot;: \u0026quot;debug_traceTransaction\u0026quot;, \u0026quot;params\u0026quot;: [txHash, {}]}    Example \u0026gt; debug.traceTransaction(\u0026quot;0x2059dd53ecac9827faad14d364f9e04b1d5fe5b506e3acc886eff7a6f88a696a\u0026quot;) { gas: 85301, returnValue: \u0026quot;\u0026quot;, structLogs: [{ depth: 1, error: \u0026quot;\u0026quot;, gas: 162106, gasCost: 3, memory: null, op: \u0026quot;PUSH1\u0026quot;, pc: 0, stack: [], storage: {} }, /* snip */ { depth: 1, error: \u0026quot;\u0026quot;, gas: 100000, gasCost: 0, memory: [\u0026quot;0000000000000000000000000000000000000000000000000000000000000006\u0026quot;, \u0026quot;0000000000000000000000000000000000000000000000000000000000000000\u0026quot;, \u0026quot;0000000000000000000000000000000000000000000000000000000000000060\u0026quot;], op: \u0026quot;STOP\u0026quot;, pc: 120, stack: [\u0026quot;00000000000000000000000000000000000000000000000000000000d67cbec9\u0026quot;], storage: { 0000000000000000000000000000000000000000000000000000000000000004: \u0026quot;8241fa522772837f0d05511f20caa6da1d5a3209000000000000000400000001\u0026quot;, 0000000000000000000000000000000000000000000000000000000000000006: \u0026quot;0000000000000000000000000000000000000000000000000000000000000001\u0026quot;, f652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d3f: \u0026quot;00000000000000000000000002e816afc1b5c0f39852131959d946eb3b07b5ad\u0026quot; } }]  JavaScript-based tracing Specifying the tracer option in the second argument enables JavaScript-based tracing. In this mode, tracer is interpreted as a JavaScript expression that is expected to evaluate to an object with (at least) two methods, named step and result.\nstepis a function that takes two arguments, log and db, and is called for each step of the EVM, or when an error occurs, as the specified transaction is traced.\nlog has the following fields:\n pc: Number, the current program counter op: Object, an OpCode object representing the current opcode gas: Number, the amount of gas remaining gasPrice: Number, the cost in wei of each unit of gas memory: Object, a structure representing the contract\u0026rsquo;s memory space stack: array[big.Int], the EVM execution stack depth: The execution depth account: The address of the account executing the current operation err: If an error occured, information about the error  If err is non-null, all other fields should be ignored.\nFor efficiency, the same log object is reused on each execution step, updated with current values; make sure to copy values you want to preserve beyond the current call. For instance, this step function will not work:\nfunction(log) { this.logs.append(log); }  But this step function will:\nfunction(log) { this.logs.append({gas: log.gas, pc: log.pc, ...}); }  log.op has the following methods:\n isPush() - returns true iff the opcode is a PUSHn toString() - returns the string representation of the opcode toNumber() - returns the opcode\u0026rsquo;s number  log.memory has the following methods:\n slice(start, stop) - returns the specified segment of memory as a byte slice length() - returns the length of the memory  log.stack has the following methods:\n peek(idx) - returns the idx-th element from the top of the stack (0 is the topmost element) as a big.Int length() - returns the number of elements in the stack  db has the following methods:\n getBalance(address) - returns a big.Int with the specified account\u0026rsquo;s balance getNonce(address) - returns a Number with the specified account\u0026rsquo;s nonce getCode(address) - returns a byte slice with the code for the specified account getState(address, hash) - returns the state value for the specified account and the specified hash exists(address) - returns true if the specified address exists  The second function, \u0026lsquo;result\u0026rsquo;, takes no arguments, and is expected to return a JSON-serializable value to return to the RPC caller.\nIf the step function throws an exception or executes an illegal operation at any point, it will not be called on any further VM steps, and the error will be returned to the caller.\nNote that several values are Golang big.Int objects, not JavaScript numbers or JS bigints. As such, they have the same interface as described in the godocs. Their default serialization to JSON is as a Javascript number; to serialize large numbers accurately call .String() on them. For convenience, big.NewInt(x) is provided, and will convert a uint to a Go BigInt.\nUsage example, returns the top element of the stack at each CALL opcode only:\ndebug.traceTransaction(txhash, {tracer: '{data: [], step: function(log) { if(log.op.toString() == \u0026quot;CALL\u0026quot;) this.data.push(log.stack.peek(0)); }, result: function() { return this.data; }}'});  debug_verbosity Sets the logging verbosity ceiling. Log messages with level up to and including the given level will be printed.\nThe verbosity of individual packages and source files can be raised using debug_vmodule.\n   Client Method invocation     Console debug.verbosity(level)   RPC {\u0026quot;method\u0026quot;: \u0026quot;debug_vmodule\u0026quot;, \u0026quot;params\u0026quot;: [number]}    debug_vmodule Sets the logging verbosity pattern.\n   Client Method invocation     Console debug.vmodule(string)   RPC {\u0026quot;method\u0026quot;: \u0026quot;debug_vmodule\u0026quot;, \u0026quot;params\u0026quot;: [string]}    Examples If you want to see messages from a particular Go package (directory) and all subdirectories, use:\n\u0026gt; debug.vmodule(\u0026quot;eth/*=6\u0026quot;)  If you want to restrict messages to a particular package (e.g. p2p) but exclude subdirectories, use:\n\u0026gt; debug.vmodule(\u0026quot;p2p=6\u0026quot;)  If you want to see log messages from a particular source file, use\n\u0026gt; debug.vmodule(\u0026quot;server.go=6\u0026quot;)  You can compose these basic patterns. If you want to see all output from peer.go in a package below eth (eth/peer.go, eth/downloader/peer.go) as well as output from package p2p at level \u0026lt;= 5, use:\ndebug.vmodule(\u0026quot;eth/*/peer.go=6,p2p=5\u0026quot;)  debug_writeBlockProfile Writes a goroutine blocking profile to the given file.\n   Client Method invocation     Console debug.writeBlockProfile(file)   RPC {\u0026quot;method\u0026quot;: \u0026quot;debug_writeBlockProfile\u0026quot;, \u0026quot;params\u0026quot;: [string]}    debug_writeMemProfile Writes an allocation profile to the given file. Note that the profiling rate cannot be set through the API, it must be set on the command line using the --memprofilerate flag.\n   Client Method invocation     Console debug.writeMemProfile(file string)   RPC {\u0026quot;method\u0026quot;: \u0026quot;debug_writeBlockProfile\u0026quot;, \u0026quot;params\u0026quot;: [string]}    Miner The miner API allows you to remote control the node\u0026rsquo;s mining operation and set various mining specific settings.\nminer_setExtra Sets the extra data a miner can include when miner blocks. This is capped at 32 bytes.\n   Client Method invocation     Go miner.setExtra(extra string) (bool, error)   Console miner.setExtra(string)   RPC {\u0026quot;method\u0026quot;: \u0026quot;miner_setExtra\u0026quot;, \u0026quot;params\u0026quot;: [string]}    miner_setGasPrice Sets the minimal accepted gas price when mining transactions. Any transactions that are below this limit are excluded from the mining process.\n   Client Method invocation     Go miner.setGasPrice(number *rpc.HexNumber) bool   Console miner.setGasPrice(number)   RPC {\u0026quot;method\u0026quot;: \u0026quot;miner_setGasPrice\u0026quot;, \u0026quot;params\u0026quot;: [number]}    miner_start Start the CPU mining process with the given number of threads and generate a new DAG if need be.\n   Client Method invocation     Go miner.Start(threads *rpc.HexNumber) (bool, error)   Console miner.start(number)   RPC {\u0026quot;method\u0026quot;: \u0026quot;miner_start\u0026quot;, \u0026quot;params\u0026quot;: [number]}    miner_stop Stop the CPU mining operation.\n   Client Method invocation     Go miner.Stop() bool   Console miner.stop()   RPC {\u0026quot;method\u0026quot;: \u0026quot;miner_stop\u0026quot;, \u0026quot;params\u0026quot;: []}    miner_setEtherBase Sets the etherbase, where mining rewards will go.\n   Client Method invocation     Go miner.SetEtherbase(common.Address) bool   Console miner.setEtherbase(address)   RPC {\u0026quot;method\u0026quot;: \u0026quot;miner_setEtherbase\u0026quot;, \u0026quot;params\u0026quot;: [address]}    Personal The personal API manages private keys in the key store.\npersonal_importRawKey Imports the given unencrypted private key (hex string) into the key store, encrypting it with the passphrase.\nReturns the address of the new account.\n   Client Method invocation     Console personal.importRawKey(keydata, passphrase)   RPC {\u0026quot;method\u0026quot;: \u0026quot;personal_importRawKey\u0026quot;, \u0026quot;params\u0026quot;: [string, string]}    personal_listAccounts Returns all the Pirl account addresses of all keys in the key store.\n   Client Method invocation     Console personal.listAccounts   RPC {\u0026quot;method\u0026quot;: \u0026quot;personal_listAccounts\u0026quot;, \u0026quot;params\u0026quot;: []}    Example \u0026gt; personal.listAccounts [\u0026quot;0x5e97870f263700f46aa00d967821199b9bc5a120\u0026quot;, \u0026quot;0x3d80b31a78c30fc628f20b2c89d7ddbf6e53cedc\u0026quot;]  personal_lockAccount Removes the private key with given address from memory. The account can no longer be used to send transactions.\n   Client Method invocation     Console personal.lockAccount(address)   RPC {\u0026quot;method\u0026quot;: \u0026quot;personal_lockAccount\u0026quot;, \u0026quot;params\u0026quot;: [string]}    personal_newAccount Generates a new private key and stores it in the key store directory. The key file is encrypted with the given passphrase. Returns the address of the new account.\nAt the Pirl console, newAccount will prompt for a passphrase when it is not supplied as the argument.\n   Client Method invocation     Console personal.newAccount()   RPC {\u0026quot;method\u0026quot;: \u0026quot;personal_newAccount\u0026quot;, \u0026quot;params\u0026quot;: [string]}    Example \u0026gt; personal.newAccount() Passphrase: Repeat passphrase: \u0026quot;0x5e97870f263700f46aa00d967821199b9bc5a120\u0026quot;  The passphrase can also be supplied as a string.\n\u0026gt; personal.newAccount(\u0026quot;h4ck3r\u0026quot;) \u0026quot;0x3d80b31a78c30fc628f20b2c89d7ddbf6e53cedc\u0026quot;  personal_unlockAccount Decrypts the key with the given address from the key store.\nBoth passphrase and unlock duration are optional when using the JavaScript console. If the passphrase is not supplied as an argument, the console will prompt for the passphrase interactively.\nThe unencrypted key will be held in memory until the unlock duration expires. If the unlock duration defaults to 300 seconds. An explicit duration of zero seconds unlocks the key until Pirl exits.\nThe account can be used with eth_sign and eth_sendTransaction while it is unlocked.\n   Client Method invocation     Console personal.unlockAccount(address, passphrase, duration)   RPC {\u0026quot;method\u0026quot;: \u0026quot;personal_unlockAccount\u0026quot;, \u0026quot;params\u0026quot;: [string, string, number]}    Examples \u0026gt; personal.unlockAccount(\u0026quot;0x5e97870f263700f46aa00d967821199b9bc5a120\u0026quot;) Unlock account 0x5e97870f263700f46aa00d967821199b9bc5a120 Passphrase: true  Supplying the passphrase and unlock duration as arguments:\n\u0026gt; personal.unlockAccount(\u0026quot;0x5e97870f263700f46aa00d967821199b9bc5a120\u0026quot;, \u0026quot;foo\u0026quot;, 30) true  If you want to type in the passphrase and stil override the default unlock duration, pass null as the passphrase.\n\u0026gt; personal.unlockAccount(\u0026quot;0x5e97870f263700f46aa00d967821199b9bc5a120\u0026quot;, null, 30) Unlock account 0x5e97870f263700f46aa00d967821199b9bc5a120 Passphrase: true  personal_sendTransaction Validate the given passphrase and submit transaction.\nThe transaction is the same argument as for eth_sendTransaction and contains the from address. If the passphrase can be used to decrypt the private key belogging to tx.from the transaction is verified, signed and send onto the network. The account is not unlocked globally in the node and cannot be used in other RPC calls.\n   Client Method invocation     Console personal.sendTransaction(tx, passphrase)   RPC {\u0026quot;method\u0026quot;: \u0026quot;personal_sendTransaction\u0026quot;, \u0026quot;params\u0026quot;: [tx, string]}    Note, prior to Pirl 1.5, please use personal_signAndSendTransaction as that was the original introductory name and only later renamed to the current final version.\nExamples \u0026gt; var tx = {from: \u0026quot;0x391694e7e0b0cce554cb130d723a9d27458f9298\u0026quot;, to: \u0026quot;0xafa3f8684e54059998bc3a7b0d2b0da075154d66\u0026quot;, value: web3.toWei(1.23, \u0026quot;ether\u0026quot;)} undefined \u0026gt; personal.sendTransaction(tx, \u0026quot;passphrase\u0026quot;) 0x8474441674cdd47b35b875fd1a530b800b51a5264b9975fb21129eeb8c18582f  personal_sign The sign method calculates an Pirl specific signature with: sign(keccack256(\u0026quot;\\x19Pirl Signed Message:\\n\u0026quot; + len(message) + message))).\nBy adding a prefix to the message makes the calculated signature recognisable as an Pirl specific signature. This prevents misuse where a malicious DApp can sign arbitrary data (e.g. transaction) and use the signature to impersonate the victim.\nSee ecRecover to verify the signature.\n   Client Method invocation     Console personal.sign(message, account, [password])   RPC {\u0026quot;method\u0026quot;: \u0026quot;personal_sign\u0026quot;, \u0026quot;params\u0026quot;: [message, account, password]}    Examples \u0026gt; personal.sign(\u0026quot;0xdeadbeaf\u0026quot;, \u0026quot;0x9b2055d370f73ec7d8a03e965129118dc8f5bf83\u0026quot;, \u0026quot;\u0026quot;) \u0026quot;0xa3f20717a250c2b0b729b7e5becbff67fdaef7e0699da4de7ca5895b02a170a12d887fd3b17bfdce3481f10bea41f45ba9f709d39ce8325427b57afcfc994cee1b\u0026quot;  personal_ecRecover ecRecover returns the address associated with the private key that was used to calculate the signature in personal_sign.\n   Client Method invocation     Console personal.ecRecover(message, signature)   RPC {\u0026quot;method\u0026quot;: \u0026quot;personal_ecRecover\u0026quot;, \u0026quot;params\u0026quot;: [message, signature]}    Examples \u0026gt; personal.sign(\u0026quot;0xdeadbeaf\u0026quot;, \u0026quot;0x9b2055d370f73ec7d8a03e965129118dc8f5bf83\u0026quot;, \u0026quot;\u0026quot;) \u0026quot;0xa3f20717a250c2b0b729b7e5becbff67fdaef7e0699da4de7ca5895b02a170a12d887fd3b17bfdce3481f10bea41f45ba9f709d39ce8325427b57afcfc994cee1b\u0026quot; \u0026gt; personal.ecRecover(\u0026quot;0xdeadbeaf\u0026quot;, \u0026quot;0xa3f20717a250c2b0b729b7e5becbff67fdaef7e0699da4de7ca5895b02a170a12d887fd3b17bfdce3481f10bea41f45ba9f709d39ce8325427b57afcfc994cee1b\u0026quot;) \u0026quot;0x9b2055d370f73ec7d8a03e965129118dc8f5bf83\u0026quot;  Txpool The txpool API gives you access to several non-standard RPC methods to inspect the contents of the transaction pool containing all the currently pending transactions as well as the ones queued for future processing.\ntxpool_content The content inspection property can be queried to list the exact details of all the transactions currently pending for inclusion in the next block(s), as well as the ones that are being scheduled for future execution only.\nThe result is an object with two fields pending and queued. Each of these fields are associative arrays, in which each entry maps an origin-address to a batch of scheduled transactions. These batches themselves are maps associating nonces with actual transactions.\nPlease note, there may be multiple transactions associated with the same account and nonce. This can happen if the user broadcast mutliple ones with varying gas allowances (or even complerely different transactions).\n   Client Method invocation     Go txpool.Content() (map[string]map[string]map[string][]*RPCTransaction)   Console txpool.content   RPC {\u0026quot;method\u0026quot;: \u0026quot;txpool_content\u0026quot;}    Example \u0026gt; txpool.content { pending: { 0x0216d5032f356960cd3749c31ab34eeff21b3395: { 806: [{ blockHash: \u0026quot;0x0000000000000000000000000000000000000000000000000000000000000000\u0026quot;, blockNumber: null, from: \u0026quot;0x0216d5032f356960cd3749c31ab34eeff21b3395\u0026quot;, gas: \u0026quot;0x5208\u0026quot;, gasPrice: \u0026quot;0xba43b7400\u0026quot;, hash: \u0026quot;0xaf953a2d01f55cfe080c0c94150a60105e8ac3d51153058a1f03dd239dd08586\u0026quot;, input: \u0026quot;0x\u0026quot;, nonce: \u0026quot;0x326\u0026quot;, to: \u0026quot;0x7f69a91a3cf4be60020fb58b893b7cbb65376db8\u0026quot;, transactionIndex: null, value: \u0026quot;0x19a99f0cf456000\u0026quot; }] }, 0x24d407e5a0b506e1cb2fae163100b5de01f5193c: { 34: [{ blockHash: \u0026quot;0x0000000000000000000000000000000000000000000000000000000000000000\u0026quot;, blockNumber: null, from: \u0026quot;0x24d407e5a0b506e1cb2fae163100b5de01f5193c\u0026quot;, gas: \u0026quot;0x44c72\u0026quot;, gasPrice: \u0026quot;0x4a817c800\u0026quot;, hash: \u0026quot;0xb5b8b853af32226755a65ba0602f7ed0e8be2211516153b75e9ed640a7d359fe\u0026quot;, input: \u0026quot;0xb61d27f600000000000000000000000024d407e5a0b506e1cb2fae163100b5de01f5193c00000000000000000000000000000000000000000000000053444835ec580000000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\u0026quot;, nonce: \u0026quot;0x22\u0026quot;, to: \u0026quot;0x7320785200f74861b69c49e4ab32399a71b34f1a\u0026quot;, transactionIndex: null, value: \u0026quot;0x0\u0026quot; }] } }, queued: { 0x976a3fc5d6f7d259ebfb4cc2ae75115475e9867c: { 3: [{ blockHash: \u0026quot;0x0000000000000000000000000000000000000000000000000000000000000000\u0026quot;, blockNumber: null, from: \u0026quot;0x976a3fc5d6f7d259ebfb4cc2ae75115475e9867c\u0026quot;, gas: \u0026quot;0x15f90\u0026quot;, gasPrice: \u0026quot;0x4a817c800\u0026quot;, hash: \u0026quot;0x57b30c59fc39a50e1cba90e3099286dfa5aaf60294a629240b5bbec6e2e66576\u0026quot;, input: \u0026quot;0x\u0026quot;, nonce: \u0026quot;0x3\u0026quot;, to: \u0026quot;0x346fb27de7e7370008f5da379f74dd49f5f2f80f\u0026quot;, transactionIndex: null, value: \u0026quot;0x1f161421c8e0000\u0026quot; }] }, 0x9b11bf0459b0c4b2f87f8cebca4cfc26f294b63a: { 2: [{ blockHash: \u0026quot;0x0000000000000000000000000000000000000000000000000000000000000000\u0026quot;, blockNumber: null, from: \u0026quot;0x9b11bf0459b0c4b2f87f8cebca4cfc26f294b63a\u0026quot;, gas: \u0026quot;0x15f90\u0026quot;, gasPrice: \u0026quot;0xba43b7400\u0026quot;, hash: \u0026quot;0x3a3c0698552eec2455ed3190eac3996feccc806970a4a056106deaf6ceb1e5e3\u0026quot;, input: \u0026quot;0x\u0026quot;, nonce: \u0026quot;0x2\u0026quot;, to: \u0026quot;0x24a461f25ee6a318bdef7f33de634a67bb67ac9d\u0026quot;, transactionIndex: null, value: \u0026quot;0xebec21ee1da40000\u0026quot; }], 6: [{ blockHash: \u0026quot;0x0000000000000000000000000000000000000000000000000000000000000000\u0026quot;, blockNumber: null, from: \u0026quot;0x9b11bf0459b0c4b2f87f8cebca4cfc26f294b63a\u0026quot;, gas: \u0026quot;0x15f90\u0026quot;, gasPrice: \u0026quot;0x4a817c800\u0026quot;, hash: \u0026quot;0xbbcd1e45eae3b859203a04be7d6e1d7b03b222ec1d66dfcc8011dd39794b147e\u0026quot;, input: \u0026quot;0x\u0026quot;, nonce: \u0026quot;0x6\u0026quot;, to: \u0026quot;0x6368f3f8c2b42435d6c136757382e4a59436a681\u0026quot;, transactionIndex: null, value: \u0026quot;0xf9a951af55470000\u0026quot; }, { blockHash: \u0026quot;0x0000000000000000000000000000000000000000000000000000000000000000\u0026quot;, blockNumber: null, from: \u0026quot;0x9b11bf0459b0c4b2f87f8cebca4cfc26f294b63a\u0026quot;, gas: \u0026quot;0x15f90\u0026quot;, gasPrice: \u0026quot;0x4a817c800\u0026quot;, hash: \u0026quot;0x60803251d43f072904dc3a2d6a084701cd35b4985790baaf8a8f76696041b272\u0026quot;, input: \u0026quot;0x\u0026quot;, nonce: \u0026quot;0x6\u0026quot;, to: \u0026quot;0x8db7b4e0ecb095fbd01dffa62010801296a9ac78\u0026quot;, transactionIndex: null, value: \u0026quot;0xebe866f5f0a06000\u0026quot; }], } } }  txpool_inspect The inspect inspection property can be queried to list a textual summary of all the transactions currently pending for inclusion in the next block(s), as well as the ones that are being scheduled for future execution only. This is a method specifically tailored to developers to quickly see the transactions in the pool and find any potential issues.\nThe result is an object with two fields pending and queued. Each of these fields are associative arrays, in which each entry maps an origin-address to a batch of scheduled transactions. These batches themselves are maps associating nonces with transactions summary strings.\nPlease note, there may be multiple transactions associated with the same account and nonce. This can happen if the user broadcast mutliple ones with varying gas allowances (or even complerely different transactions).\n   Client Method invocation     Go txpool.Inspect() (map[string]map[string]map[string][]string)   Console txpool.inspect   RPC {\u0026quot;method\u0026quot;: \u0026quot;txpool_inspect\u0026quot;}    Example \u0026gt; txpool.inspect { pending: { 0x26588a9301b0428d95e6fc3a5024fce8bec12d51: { 31813: [\u0026quot;0x3375ee30428b2a71c428afa5e89e427905f95f7e: 0 wei + 500000 × 20000000000 gas\u0026quot;] }, 0x2a65aca4d5fc5b5c859090a6c34d164135398226: { 563662: [\u0026quot;0x958c1fa64b34db746925c6f8a3dd81128e40355e: 1051546810000000000 wei + 90000 × 20000000000 gas\u0026quot;], 563663: [\u0026quot;0x77517b1491a0299a44d668473411676f94e97e34: 1051190740000000000 wei + 90000 × 20000000000 gas\u0026quot;], 563664: [\u0026quot;0x3e2a7fe169c8f8eee251bb00d9fb6d304ce07d3a: 1050828950000000000 wei + 90000 × 20000000000 gas\u0026quot;], 563665: [\u0026quot;0xaf6c4695da477f8c663ea2d8b768ad82cb6a8522: 1050544770000000000 wei + 90000 × 20000000000 gas\u0026quot;], 563666: [\u0026quot;0x139b148094c50f4d20b01caf21b85edb711574db: 1048598530000000000 wei + 90000 × 20000000000 gas\u0026quot;], 563667: [\u0026quot;0x48b3bd66770b0d1eecefce090dafee36257538ae: 1048367260000000000 wei + 90000 × 20000000000 gas\u0026quot;], 563668: [\u0026quot;0x468569500925d53e06dd0993014ad166fd7dd381: 1048126690000000000 wei + 90000 × 20000000000 gas\u0026quot;], 563669: [\u0026quot;0x3dcb4c90477a4b8ff7190b79b524773cbe3be661: 1047965690000000000 wei + 90000 × 20000000000 gas\u0026quot;], 563670: [\u0026quot;0x6dfef5bc94b031407ffe71ae8076ca0fbf190963: 1047859050000000000 wei + 90000 × 20000000000 gas\u0026quot;] }, 0x9174e688d7de157c5c0583df424eaab2676ac162: { 3: [\u0026quot;0xbb9bc244d798123fde783fcc1c72d3bb8c189413: 30000000000000000000 wei + 85000 × 21000000000 gas\u0026quot;] }, 0xb18f9d01323e150096650ab989cfecd39d757aec: { 777: [\u0026quot;0xcd79c72690750f079ae6ab6ccd7e7aedc03c7720: 0 wei + 1000000 × 20000000000 gas\u0026quot;] }, 0xb2916c870cf66967b6510b76c07e9d13a5d23514: { 2: [\u0026quot;0x576f25199d60982a8f31a8dff4da8acb982e6aba: 26000000000000000000 wei + 90000 × 20000000000 gas\u0026quot;] }, 0xbc0ca4f217e052753614d6b019948824d0d8688b: { 0: [\u0026quot;0x2910543af39aba0cd09dbb2d50200b3e800a63d2: 1000000000000000000 wei + 50000 × 1171602790622 gas\u0026quot;] }, 0xea674fdde714fd979de3edf0f56aa9716b898ec8: { 70148: [\u0026quot;0xe39c55ead9f997f7fa20ebe40fb4649943d7db66: 1000767667434026200 wei + 90000 × 20000000000 gas\u0026quot;] } }, queued: { 0x0f6000de1578619320aba5e392706b131fb1de6f: { 6: [\u0026quot;0x8383534d0bcd0186d326c993031311c0ac0d9b2d: 9000000000000000000 wei + 21000 × 20000000000 gas\u0026quot;] }, 0x5b30608c678e1ac464a8994c3b33e5cdf3497112: { 6: [\u0026quot;0x9773547e27f8303c87089dc42d9288aa2b9d8f06: 50000000000000000000 wei + 90000 × 50000000000 gas\u0026quot;] }, 0x976a3fc5d6f7d259ebfb4cc2ae75115475e9867c: { 3: [\u0026quot;0x346fb27de7e7370008f5da379f74dd49f5f2f80f: 140000000000000000 wei + 90000 × 20000000000 gas\u0026quot;] }, 0x9b11bf0459b0c4b2f87f8cebca4cfc26f294b63a: { 2: [\u0026quot;0x24a461f25ee6a318bdef7f33de634a67bb67ac9d: 17000000000000000000 wei + 90000 × 50000000000 gas\u0026quot;], 6: [\u0026quot;0x6368f3f8c2b42435d6c136757382e4a59436a681: 17990000000000000000 wei + 90000 × 20000000000 gas\u0026quot;, \u0026quot;0x8db7b4e0ecb095fbd01dffa62010801296a9ac78: 16998950000000000000 wei + 90000 × 20000000000 gas\u0026quot;], 7: [\u0026quot;0x6368f3f8c2b42435d6c136757382e4a59436a681: 17900000000000000000 wei + 90000 × 20000000000 gas\u0026quot;] } } }  txpool_status The status inspection property can be queried for the number of transactions currently pending for inclusion in the next block(s), as well as the ones that are being scheduled for future execution only.\nThe result is an object with two fields pending and queued, each of which is a counter representing the number of transactions in that particular state.\n   Client Method invocation     Go txpool.Status() (map[string]*rpc.HexNumber)   Console txpool.status   RPC {\u0026quot;method\u0026quot;: \u0026quot;txpool_status\u0026quot;}    Example \u0026gt; txpool.status { pending: 10, queued: 7 }  Author(s):\n@Fawkes\nContributor(s):\n@Dptelecom\n"
},
{
	"uri": "https://pirl.live/ipns/QmVKFJs81erni4KV6Hzt2xVwGtC2P1WtE9A4MxNThFVFVh/en/mining/",
	"title": "Mining",
	"tags": [],
	"description": "",
	"content": " \u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt; HEAD\n !!!!!!!!!!!!!!!!!!!!!!!!staticDir = \u0026ldquo;static/images/images_headers/\u0026rdquo; ipns/QmVKFJs81erni4KV6Hzt2xVwGtC2P1WtE9A4MxNThFVFVh/ static/images/images_headers/Mining.png https://pirl.live/ipns/QmVKFJs81erni4KV6Hzt2xVwGtC2P1WtE9A4MxNThFVFVh/\n       local_version\n       Mining \u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt; HEAD Mining is the process of adding transaction records to PIRL public ledger of past transactions ( a „mining rig“ is a collo- quial metaphor for a single computer system that performs the necessary computations for „mining“). This ledger of past transactions is called the “block-chain” as it is a chain of blocks. The blockchain serves to confirm transactions to the rest of the network as having taken place. PIRL nodes use the blockchain to distinguish legitimate PIRL transactions from attempts to re-spend coins that have already been spent el- sewhere. Mining is intentionally designed to be resource-intensive and difficult so that the number of blocks found each day by mi- ners remains steady. Individual blocks must contain a proof of work to be considered valid. This proof of work is verified by other PIRL nodes each time they receive a block. PIRL uses the ethash proof-of-work algorithm. The primary purpose of mining is to set the history of transac- tions in a way that is computationally impractical to modify by any one entity. By downloading and verifying the blockchain, PIRL nodes are able to reach consensus about the ordering of events in PIRL. Mining is also the mechanism used to introduce PIRL coins into the system: Miners are paid any transaction fees as well as a „subsidy“ of newly created coins. This both serves the purpose of disseminating new coins in a decentralized man- ner, as well as, motivating people to provide security for the system.\nPIRL mining is so called because it resembles the mining of other commodities: it requires exertion (proof of work POW) and it slowly makes new units available to anybody who wi- shes to take part. Mining is the process of adding transaction records to PIRL public ledger of past transactions ( a „mining rig“ is a collo- quial metaphor for a single computer system that performs the necessary computations for „mining“). This ledger of past transactions is called the “block-chain” as it is a chain of blocks. The blockchain serves to confirm transactions to the rest of the network as having taken place. PIRL nodes use the blockchain to distinguish legitimate PIRL transactions from attempts to re-spend coins that have already been spent el- sewhere. Mining is intentionally designed to be resource-intensive and difficult so that the number of blocks found each day by mi- ners remains steady. Individual blocks must contain a proof of work to be considered valid. This proof of work is verified by other PIRL nodes each time they receive a block. PIRL uses the ethash proof-of-work algorithm. The primary purpose of mining is to set the history of transac- tions in a way that is computationally impractical to modify by any one entity. By downloading and verifying the blockchain, PIRL nodes are able to reach consensus about the ordering of events in PIRL. Mining is also the mechanism used to introduce PIRL coins into the system: Miners are paid any transaction fees as well as a „subsidy“ of newly created coins. This both serves the purpose of disseminating new coins in a decentralized man- ner, as well as, motivating people to provide security for the system. PIRL mining is so called because it resembles the mining of other commodities: it requires exertion (proof of work POW) and it slowly makes new units available to anybody who wi- shes to take part. \u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt; local_version An important difference is that the supply does not depend on the amount of mining. In general chan- ging total miner hashpower does not change how many coins are created over the long term. PIRL is mined with Proof of Work (PoW) on ASIC resistant Dagger Hashimoto algorithm. And is designed to forever stay PoW.\nEZminer \u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt; HEAD PIRL has a goal to be as user-friendly as possible while provi- ding a state of the art platform for developers. All aspects of the network are carefully analyzed and under development to reach a simple use for everyone without requiring advan- ced technical knowledge to operate. For example, in regards to mining, we created the EZminer, so anyone who owns a GPU is able to mine in 3 easy steps that do not require any advanced technical knowledge.\nPIRL EZminer is a simple ap- plication that guides you through 3 easy steps to mine PIRL with your AMD or Nvidia GPU. The application takes care of all the necessary modules that need to be installed in the background and setups the miner. PIRL has a goal to be as user-friendly as possible while provi- ding a state of the art platform for developers. All aspects of the network are carefully analyzed and under development to reach a simple use for everyone without requiring advan- ced technical knowledge to operate. For example, in regards to mining, we created the EZminer, so anyone who owns a GPU is able to mine in 3 easy steps that do not require any advanced technical knowledge. PIRL EZminer is a simple ap- plication that guides you through 3 easy steps to mine PIRL with your AMD or Nvidia GPU. The application takes care of all the necessary modules that need to be installed in the background and setups the miner. \u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt; local_version The user simply needs to pick his pool and the address to mine to.\nEZminer Features:\n• Easy setup of eZminer.\n• Windows 64bit / Linux / Mac Os X.\n• Direct Link to wallet creation.\n• PIRL Wallet recognition in the system Oystr/Nautilus.\n• Pool list.\n• Manual override of wallet address in case of wallet detec- tion.\n• Advanced settings including Intensity and miner output with dashboard in e-miners case.\n• On applications UI links for everything related to PIRL and the project.\n• Direct linking via the UI to pool site for monitoring the user mining status.\nDownload and mine Pirl with ezMiner v2.0 Downloads\n  Author(s):\n@dptelecom\nContributor(s): \u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt; HEAD\n======= \u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt; local_version\n"
},
{
	"uri": "https://pirl.live/ipns/QmVKFJs81erni4KV6Hzt2xVwGtC2P1WtE9A4MxNThFVFVh/en/wallets/web-wallet-+-trezor/",
	"title": "Pirl Web Wallet + Trezor",
	"tags": [],
	"description": "",
	"content": " Overview This guide will explain how to create and enter the most secure Pirl wallet on the Earth:\nPrerequisites For granting the success of this operation, you will need these requirements:\n Web explorer of your choice and an internet connection Trezor Hardware wallet with the latest Firmware update and latest Bridge Firmware (your web browser will do this for you) update in your hand This Firmware update will be carried out by Trezor.io/wallet web interface Don\u0026rsquo;t worry. The update is only a few minor steps. You can do with the help of a guide and approx. 3 minutes of your time Recommendation: Use antivirus like Kaspersky or another (full version if possible) cause Hardware Wallet + Antivirus = Win  Steps  Connect your Trezor with PC (make sure you did that update)\n Go here \u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt; HEAD  The interface of this pages is similar to MyEther Wallet (MEW)\n Click on \u0026ldquo;hardware wallet\u0026rdquo;(text written in red inside the yellow box)  Interact with your Trezor and click out your pin  The Trezor will generate 5 addresses for you. They are all yours. You can choose a one, or you can use them all as you please\n  The interface of this pages is similar to MyEther Wallet (MEW)\n Click on \u0026ldquo;hardware wallet\u0026rdquo;(text written in red inside the yellow box)  Interact with your Trezor and click out your pin  The Trezor will generate 5 addresses for you. They are all yours. You can choose a one, or you can use them all as you please \u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt; local_version\n Select one particular address and write the address down\n Now you have PIRL Web wallet secured by Trezor. Until you have your Trezor in your safe possession and your recovery Seed somewhere out of sight (two copies at least, each of them on a different location), your coins are secured well.\n  Author: Mickey Maler\nContributor(s):\n"
},
{
	"uri": "https://pirl.live/ipns/QmVKFJs81erni4KV6Hzt2xVwGtC2P1WtE9A4MxNThFVFVh/en/pirlcloud/pirl-app/",
	"title": "PirlApp",
	"tags": [],
	"description": "",
	"content": " \u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt; HEAD\n \u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt; local_version\nPirlApp Portal is the user dashboard where PIRL Services are accessible.\n\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt; HEAD\n \u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt; local_version\nAuthor(s): @Dptelecom\nContributor(s):\n"
},
{
	"uri": "https://pirl.live/ipns/QmVKFJs81erni4KV6Hzt2xVwGtC2P1WtE9A4MxNThFVFVh/en/pirlcloud/pirl-app/pirl-tube/",
	"title": "PirlTube",
	"tags": [],
	"description": "",
	"content": " \u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt; HEAD\n \u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt; local_version\n Coming soon, by Pirl Community Member\nAuthor(s): @Dptelecom\nContributor(s):\n"
},
{
	"uri": "https://pirl.live/ipns/QmVKFJs81erni4KV6Hzt2xVwGtC2P1WtE9A4MxNThFVFVh/en/getting-started/how-to-contribute/style-guide/",
	"title": "Style Guide",
	"tags": [],
	"description": "",
	"content": " Introduction Having all documentation conform to the same standards makes for easier use of the documentation over time. The best time to decide on conventions is before writing is done. If you stumble on something that\u0026rsquo;s not addressed here, make sure you bring it up to the community so a decision can be made on how best to address it.\nHugo Naming Convention  Each KB article has its own images directory within All file system directory names are in all lower case For file system directory name use key works instead of every word of the title  Titles and Headings  The title of the page is within the title: field of the document. Don\u0026rsquo;t include the title again in the start of the document. Each Major, non-connective, word of the Title is Capitalized Each document starts with an Introduction or a Description section which explains the background behind the document. Headings start at the ## level. Use headings starting with ### to further separate smaller sections within bigger ones for ease of viewing. Each document contains a Summary or TL;DR section which summarizes the steps for advanced users.  General Guidelines  Try to use as few words as possible while remaining descriptive. Assume the audience doesn\u0026rsquo;t know all the background you do. Be specific and don\u0026rsquo;t omit important information. For actions, put key words in bold (ex: Open Chrome, select the address field at the top and fill in www.pirl.io) Use as many screenshots as possible to visually assist your information Put important information in bold Use triple code tags to distinguish terminal commands, text editor contents and code blocks Use single code tags to distinguish anything you find needs to stand out Use blockquotes for notes and comments  Grammar and Spelling  Use Oxford commas American English spelling is used for variant words.  Table of Contents  A TOC is recommended for documents longer than 2 computer screen lengths.  Links  If referencing the wiki itself, always include the link for ease of use Use good descriptions for you links in general When in doubt, link it  Credits  At the end of each document, the names of the authors is included as well as the names of all contributors.  Author(s): @Dptelecom\nContributor(s):\n"
},
{
	"uri": "https://pirl.live/ipns/QmVKFJs81erni4KV6Hzt2xVwGtC2P1WtE9A4MxNThFVFVh/en/pirlcloud/poseidon/unique_platform/",
	"title": "Unique all-in-one platform",
	"tags": [],
	"description": "",
	"content": " \u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt; HEAD\n \u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt; local_version\nWelcome user on your own Poseidon unique all-in-one platform, Here can you gain access to many of your Pirl unique features and capabilities.\nhere we will guide you trhough these features:\n• Blockchain Explorer\n• Masternodes Control Panel\n• 1-click Masternode installation\n• Poseidon Wallet\n• PirlCloud\n• PirlMarket\n• PirlPay\n• And More\n\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt; HEAD\n \u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt; local_version\nAuthor(s):\n@Dptelecom\nContributor(s):\n"
},
{
	"uri": "https://pirl.live/ipns/QmVKFJs81erni4KV6Hzt2xVwGtC2P1WtE9A4MxNThFVFVh/en/development/core/fork-2018-11/",
	"title": "Fork 2018-11",
	"tags": [],
	"description": "",
	"content": " \u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt; HEAD\n        local_version\n       Pirl Community! Winter is coming. So is the anticipated fork for Pirl. More security, higher rewards, more innovation. Sometimes bad things happen for a good reason.\nWhat do we introduce to the network with the fork? Security The fork will give birth to an innovative solution against a well-known problem in blockchain infrastructure.\nPirl has developed and successfully tested a penalty system which directly impacts the mechanics of a 51% attack making it hard and unworthy to achieve. Any attempt on double spending on Pirl network after the update will have a failure rate of approximately 99.997%.\nAs extra security layers, notary contracts will be deployed both on Pirl and Ethereum chains. These layers are being added to make sure that if someone by a very slim approximate 0.003% chance manages to succeed with a future 51% attack they will be unable to liquidate their balance accrued from the attack.\nJust to be completely sure, there is also a monitoring system going into place that will notify us if someone is attempting an attack. So we can follow their status.\nComplete details on the security and source code will be available after the successful fork.\nDifficulty Adjustments In order to consolidate fixes and limiting the amount of forks needed to perform different tasks we have also been using this time to test new difficulty settings with the goal of more accurate block times. Our new difficulty setting also being initiated in this fork should bring us closer to the 13s block time target. As a result of this more accurate block time we will see an increase of rewards. The expected daily reward gains are approximately 23.52% for both our miners and masternode owners.\n###v Super Block Detailed information here: Attack Aftermath \u0026amp; Securing Funds\nWhen will the new node be provided, what is the action plan? -The hulk security update node will be brought to light on Tuesday, November 13th a mandatory update for all the masternode and pool operators. -After the node is made available everyone will have to be done with the node update by November 17th -The fork will take place @ block 2442442 estimated to occur on November 20th based on current block time. -Exchanges shall reopen shortly after successful fork and node update.\nWhat do I have to do as a Pirl User? As Pirl User, you will get a wallet update which you will have to download and install. The wallet will notify you about a new update. Just simply download and install the update and you are ready to go.\nNote: Web wallet will be updated on our side.\nWhat do I have to do as a Pirl Node Operator? As node operator or pool admin, you will have to update your node. If you don’t do this, Pirl will fork and you will not be part of the main network. It is vital that you update your node at the time of the fork.\nWhat do I have to do as a Masternode Operator? One-Click Masternodes DO NOT require any action! They will be updated automatically by Poseidon. The owners of a Manual setup masternode need to update their masternode by installing the new binaries. We recommend that you install the new binaries as soon as possible.\nBinaries will be available Downloads\n#PirlTogetherStrong\nYours,\nPirl Team\nAuthor(s):\n@dptelecom\nContributor():\n"
},
{
	"uri": "https://pirl.live/ipns/QmVKFJs81erni4KV6Hzt2xVwGtC2P1WtE9A4MxNThFVFVh/en/wallets/send-pirl-from-pirlnautilus-wallet/",
	"title": "Send Pirl from Nautilus wallet",
	"tags": [],
	"description": "",
	"content": " Introduction ﻿This PirlDoc explains how to send one Pirl coin from you PirlNautilus wallet to a PirlPoseidon wallet address.\nNote You can send your coins to a Trezor hardware wallet or a myetherwallet.\nJust make sure to send your coins to a wallet or exchange that accepts Pirl.\nNever store your coins on an exchange.\nAll the photos in this article are being hosted on Pirls own If you want to learn more, please click this IPFS.\nHow to send Pirl from PirlNautilus wallet to a wallet of your choosing. Open your PirlNautilus wallet.\n  Click the send button.   Enter the wallet address you want to send the Pirl to.\n Enter the amount of Pirl you want to send.\n Click send.\n   Enter your account password.\n Click send.\n   Go to back to the main wallet account and wait for 12 conformations.\n Done! Pirl sent.\n  Author:\n@Numnah\nContributor(s):\n@Dptelecom\n"
},
{
	"uri": "https://pirl.live/ipns/QmVKFJs81erni4KV6Hzt2xVwGtC2P1WtE9A4MxNThFVFVh/en/solidity/smart-contracts1/",
	"title": "Smart Contracts I",
	"tags": [],
	"description": "",
	"content": " \u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt; HEAD\n \u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt; local_version\nIntroduction Smart contracts. Smart contracts are pieces of code that live on the blockchain and execute commands exactly how they were told to. They can read other contracts, make decisions, send ether and execute other contracts. Contracts will exist and run as long as the whole network exists, and will only stop if they run out of gas or if they were programmed to self destruct.\nWhat can you do with contracts? You can do almost anything really, but for this guide let\u0026rsquo;s do some simple things: You will get funds through a crowdfunding that, if successful, will supply a radically transparent and democratic organization that will only obey its own citizens, will never swerve away from its constitution and cannot be censored or shut down. And all that in less than 300 lines of code.\nSo let\u0026rsquo;s start now.\nYour first citizen: the greeter The Greeter is an intelligent digital entity that lives on the blockchain and is able to have conversations with anyone who interacts with it, based on its input. It might not be a talker, but it’s a great listener. Here is its code:\ncontract mortal { /* Define variable owner of the type address*/ address owner; /* this function is executed at initialization and sets the owner of the contract */ function mortal() { owner = msg.sender; } /* Function to recover the funds on the contract */ function kill() { if (msg.sender == owner) suicide(owner); } } contract greeter is mortal { /* define variable greeting of the type string */ string greeting; /* this runs when the contract is executed */ function greeter(string _greeting) public { greeting = _greeting; } /* main function */ function greet() constant returns (string) { return greeting; } }  You\u0026rsquo;ll notice that there are two different contracts in this code: \u0026ldquo;mortal\u0026rdquo; and \u0026ldquo;greeter\u0026rdquo;. This is because Solidity (the high level contract language we are using) has inheritance, meaning that one contract can inherit characteristics of another. This is very useful to simplify coding as common traits of contracts don\u0026rsquo;t need to be rewritten every time, and all contracts can be written in smaller, more readable chunks. So by just declaring that greeter is mortal you inherited all characteristics from the \u0026ldquo;mortal\u0026rdquo; contract and kept the greeter code simple and easy to read.\nThe inherited characteristic \u0026ldquo;mortal\u0026rdquo; simply means that the greeter contract can be killed by its owner, to clean up the blockchain and recover funds locked into it when the contract is no longer needed. Contracts in Pirl are, by default, immortal and have no owner, meaning that once deployed the author has no special privileges anymore. Consider this before deploying.\nInstalling a compiler Before you are able to Deploy it though, you\u0026rsquo;ll need two things: the compiled code, and the Application Binary Interface, which is a sort of reference template that defines how to interact with the contract.\nThe first you can get by using a compiler. You should have a solidity compiler built in on your pirl console. To test it, use this command:\neth.getCompilers()  If you have it installed, it should output something like this:\n['Solidity' ]  If instead the command returns an error, then you need to install it.\nUsing an online compiler If you don\u0026rsquo;t have solC installed, we have a online solidity compiler available. But be aware that if the compiler is compromised, your contract is not safe. For this reason, if you want to use the online compiler we encourage you to host your own.\nInstall SolC on Ubuntu Press control+c to exit the console (or type exit) and go back to the command line. Open the terminal and execute these commands:\nsudo add-apt-repository ppa:Pirl/Pirl sudo apt-get update sudo apt-get install solc which solc  Take note of the path given by the last line, you\u0026rsquo;ll need it soon.\nInstall SolC on Mac OSX You need brew in order to install on your mac\nbrew tap Pirl/Pirl brew install solidity which solc  Take note of the path given by the last line, you\u0026rsquo;ll need it soon.\nInstall SolC on Windows You need chocolatey in order to install solc.\ncinst -pre solC-stable  Windows is more complicated than that, you\u0026rsquo;ll need to wait a bit more.\nIf you have the SolC Solidity Compiler installed, you need now reformat by removing spaces so it fits into a string variable (there are some online tools that will do this):\nCompile from source git clone https://github.com/Pirl/cpp-Pirl.git mkdir cpp-Pirl/build cd cpp-Pirl/build cmake -DJSONRPC=OFF -DMINER=OFF -DETHKEY=OFF -DSERPENT=OFF -DGUI=OFF -DTESTS=OFF -DJSCONSOLE=OFF .. make -j4 make install which solc  Linking your compiler in pirl Now go back to the console and type this command to install solC, replacing path/to/solc to the path that you got on the last command you did:\nadmin.setSolc(\u0026quot;path/to/solc\u0026quot;)  Now type again:\neth.getCompilers()  If you now have solC installed, then congratulations, you can keep reading. If you don\u0026rsquo;t, then go to our forums or subreddit and berate us on failing to make the process easier.\nCompiling your contract If you have the compiler installed, you need now reformat your contract by removing line-breaks so it fits into a string variable (there are some online tools that will do this):\nvar greeterSource = 'contract mortal { address owner; function mortal() { owner = msg.sender; } function kill() { if (msg.sender == owner) suicide(owner); } } contract greeter is mortal { string greeting; function greeter(string _greeting) public { greeting = _greeting; } function greet() constant returns (string) { return greeting; } }' var greeterCompiled = web3.eth.compile.solidity(greeterSource)  You have now compiled your code. Now you need to get it ready for deployment, this includes setting some variables up, like what is your greeting. Edit the first line below to something more interesting than \u0026lsquo;Hello World!\u0026rdquo; and execute these commands:\nvar _greeting = \u0026quot;Hello World!\u0026quot; var greeterContract = web3.eth.contract(greeterCompiled.greeter.info.abiDefinition); var greeter = greeterContract.new(_greeting,{from:web3.eth.accounts[0], data: greeterCompiled.greeter.code, gas: 1000000}, function(e, contract){ if(!e) { if(!contract.address) { console.log(\u0026quot;Contract transaction send: TransactionHash: \u0026quot; + contract.transactionHash + \u0026quot; waiting to be mined...\u0026quot;); } else { console.log(\u0026quot;Contract mined! Address: \u0026quot; + contract.address); console.log(contract); } } })  Run the Greeter In order to call your bot, just type the following command in your terminal:\ngreeter.greet();  Since this call changes nothing on the blockchain, it returns instantly and without any gas cost. You should see it return your greeting:\n'Hello World!'  Getting other people to interact with your code In order to other people to run your contract they need two things: the address where the contract is located and the ABI (Application Binary Interface) which is a sort of user manual, describing the name of its functions and how to call them. In order to get each of them run these commands:\ngreeterCompiled.greeter.info.abiDefinition; greeter.address;  Then you can instantiate a javascript object which can be used to call the contract on any machine connected to the network. Replace \u0026lsquo;ABI\u0026rsquo; and \u0026lsquo;address\u0026rsquo; to create a contract object in javascript:\nvar greeter = eth.contract(ABI).at(Address);  This particular example can be instantiated by anyone by simply calling:\nvar greeter2 = eth.contract([{constant:false,inputs:[],name:'kill',outputs:[],type:'function'},{constant:true,inputs:[],name:'greet',outputs:[{name:'',type:'string'}],type:'function'},{inputs:[{name:'_greeting',type:'string'}],type:'constructor'}]).at('greeterAddress');  Replace greeterAddress with your contract\u0026rsquo;s address.\nTip: if the solidity compiler isn\u0026rsquo;t properly installed in your machine, you can get the ABI from the online compiler. To do so, use the code below carefully replacing greeterCompiled.greeter.info.abiDefinition with the abi from your compiler.\nCleaning up after yourself: You must be very excited to have your first contract live, but this excitement wears off sometimes, when the owners go on to write further contracts, leading to the unpleasant sight of abandoned contracts on the blockchain. In the future, blockchain rent might be implemented in order to increase the scalability of the blockchain but for now, be a good citizen and humanely put down your abandoned bots.\nUnlike last time we will not be making a call as we wish to change something on the blockchain. This requires a transaction be sent to the network and a fee to be paid for the changes made. The suicide is subsidized by the network so it will cost much less than a usual transaction.\ngreeter.kill.sendTransaction({from:eth.accounts[0]})  You can verify that the deed is done simply seeing if this returns 0:\neth.getCode(greeter.contractAddress)  Notice that every contract has to implement its own kill clause. In this particular case only the account that created the contract can kill it.\nIf you don\u0026rsquo;t add any kill clause it could potentially live forever (or at least until the frontier contracts are all wiped) independently of you and any earthly borders, so before you put it live check what your local laws say about it, including any possible limitation on technology export, restrictions on speech and maybe any legislation on the civil rights of sentient digital beings. Treat your bots humanely.\nThe Coin What is a coin? Coins are much more interesting and useful than they seem, they are in essence just a tradeable token, but can become much more, depending on how you use them. Its value depends on what you do with it: a token can be used to control access (an entrance ticket), can be used for voting rights in an organization (a share), can be placeholders for an asset held by a third party (a certificate of ownership) or even be simply used as an exchange of value within a community (a currency).\nYou could do all those things by creating a centralized server, but using an Pirl token contract comes with some free functionalities: for one, it\u0026rsquo;s a decentralized service and tokens can be still exchanged even if the original service goes down for any reason. The code can guarantee that no tokens will ever be created other than the ones set in the original code. Finally, by having each user hold their own token, this eliminates the scenarios where one single server break-in can result in the loss of funds from thousands of clients.\nYou could create your own token on a different blockchain, but creating on Pirl is easier — so you can focus your energy on the innovation that will make your coin stand out - and it\u0026rsquo;s more secure, as your security is provided by all the miners who are supporting the Pirl network. Finally, by creating your token in Pirl, your coin will be compatible with any other contract running on Pirl.\nThe Code This is the code for the contract we\u0026rsquo;re building:\ncontract token { mapping (address =\u0026gt; uint) public coinBalanceOf; event CoinTransfer(address sender, address receiver, uint amount); /* Initializes contract with initial supply tokens to the creator of the contract */ function token(uint supply) { coinBalanceOf[msg.sender] = supply; } /* Very simple trade function */ function sendCoin(address receiver, uint amount) returns(bool sufficient) { if (coinBalanceOf[msg.sender] \u0026lt; amount) return false; coinBalanceOf[msg.sender] -= amount; coinBalanceOf[receiver] += amount; CoinTransfer(msg.sender, receiver, amount); return true; } }  If you have ever programmed, you won\u0026rsquo;t find it hard to understand what it does: it is a contract that generates 10 thousand tokens to the creator of the contract, and then allows anyone with enough balance to send it to others. These tokens are the minimum tradeable unit and cannot be subdivided, but for the final users could be presented as a 100 units subdividable by 100 subunits, so owning a single token would represent having 0.01% of the total. If your application needs more fine grained atomic divisibility, then just increase the initial issuance amount.\nIn this example we declared the variable \u0026ldquo;coinBalanceOf\u0026rdquo; to be public, this will automatically create a function that checks any account\u0026rsquo;s balance.\nCompile and Deploy So let\u0026rsquo;s run it!\nvar tokenSource = ' contract token { mapping (address =\u0026gt; uint) public coinBalanceOf; event CoinTransfer(address sender, address receiver, uint amount); /* Initializes contract with initial supply tokens to the creator of the contract */ function token(uint supply) { coinBalanceOf[msg.sender] = supply; } /* Very simple trade function */ function sendCoin(address receiver, uint amount) returns(bool sufficient) { if (coinBalanceOf[msg.sender] \u0026lt; amount) return false; coinBalanceOf[msg.sender] -= amount; coinBalanceOf[receiver] += amount; CoinTransfer(msg.sender, receiver, amount); return true; } }' var tokenCompiled = eth.compile.solidity(tokenSource)  Now let’s set up the contract, just like we did in the previous section. Change the \u0026ldquo;initial Supply\u0026rdquo; to the amount of non divisible tokens you want to create. If you want to have divisible units, you should do that on the user frontend but keep them represented in the minimun unit of account.\nvar supply = 10000; var tokenContract = web3.eth.contract(tokenCompiled.token.info.abiDefinition); var token = tokenContract.new( supply, { from:web3.eth.accounts[0], data:tokenCompiled.token.code, gas: 1000000 }, function(e, contract){ if(!e) { if(!contract.address) { console.log(\u0026quot;Contract transaction send: TransactionHash: \u0026quot; + contract.transactionHash + \u0026quot; waiting to be mined...\u0026quot;); } else { console.log(\u0026quot;Contract mined! Address: \u0026quot; + contract.address); console.log(contract); } } })  Check balance watching coin transfers If everything worked correctly, you should be able to check your own balance with:\ntoken.coinBalanceOf(eth.accounts[0]) + \u0026quot; tokens\u0026quot;  It should have all the 10 000 tokens that were created once the contract was published. Since there is not any other defined way for new coins to be issued, these are all that will ever exist.\nYou can set up a Watcher to react whenever anyone sends a coin using your contract. Here\u0026rsquo;s how you do it:\nvar event = token.CoinTransfer({}, '', function(error, result){ if (!error) console.log(\u0026quot;Coin transfer: \u0026quot; + result.args.amount + \u0026quot; tokens were sent. Balances now are as following: \\n Sender:\\t\u0026quot; + result.args.sender + \u0026quot; \\t\u0026quot; + token.coinBalanceOf.call(result.args.sender) + \u0026quot; tokens \\n Receiver:\\t\u0026quot; + result.args.receiver + \u0026quot; \\t\u0026quot; + token.coinBalanceOf.call(result.args.receiver) + \u0026quot; tokens\u0026quot; ) });  Sending coins Now of course those tokens aren\u0026rsquo;t very useful if you hoard them all, so in order to send them to someone else, use this command:\ntoken.sendCoin.sendTransaction(eth.accounts[1], 1000, {from: eth.accounts[0]})  If a friend has registered a name on the registrar you can send it without knowing their address, doing this:\ntoken.sendCoin.sendTransaction(registrar.addr(\u0026quot;Alice\u0026quot;), 2000, {from: eth.accounts[0]})  Note that our first function coinBalanceOf was simply called directly on the contract instance and returned a value. This was possible since this was a simple read operation that incurs no state change and which executes locally and synchronously. Our second function sendCoin needs a .sendTransaction() call. Since this function is meant to change the state (write operation), it is sent as a transaction to the network to be picked up by miners and included in the canonical blockchain. As a result the consensus state of all participant nodes will adequately reflect the state changes resulting from executing the transaction. Sender address needs to be sent as part of the transaction to fund the fuel needed to run the transaction. Now, wait a minute and check both accounts balances:\ntoken.coinBalanceOf.call(eth.accounts[0])/100 + \u0026quot;% of all tokens\u0026quot; token.coinBalanceOf.call(eth.accounts[1])/100 + \u0026quot;% of all tokens\u0026quot; token.coinBalanceOf.call(registrar.addr(\u0026quot;Alice\u0026quot;))/100 + \u0026quot;% of all tokens\u0026quot;  Improvement suggestions Right now this cryptocurrency is quite limited as there will only ever be 10,000 coins and all are controlled by the coin creator, but you can change that. You could for example reward Pirl miners, by creating a transaction that will reward who found the current block:\nmapping (uint =\u0026gt; address) miningReward; function claimMiningReward() { if (miningReward[block.number] == 0) { coinBalanceOf[block.coinbase] += 1; miningReward[block.number] = block.coinbase; } }  You could modify this to anything else: maybe reward someone who finds a solution for a new puzzle, wins a game of chess, install a solar panel—as long as that can be somehow translated to a contract. Or maybe you want to create a central bank for your personal country, so you can keep track of hours worked, favours owed or control of property. In that case you might want to add a function to allow the bank to remotely freeze funds and destroy tokens if needed.\nRegister a name for your coin The commands mentioned only work because you have token javascript object instantiated on your local machine. If you send tokens to someone they won\u0026rsquo;t be able to move them forward because they don\u0026rsquo;t have the same object and wont know where to look for your contract or call its functions. In fact if you restart your console these objects will be deleted and the contracts you\u0026rsquo;ve been working on will be lost forever. So how do you instantiate the contract on a clean machine?\nThere are two ways. Let\u0026rsquo;s start with the quick and dirty, providing your friends with a reference to your contract’s ABI:\ntoken = eth.contract([{constant:false,inputs:[{name:'receiver',type:'address'},{name:'amount',type:'uint256'}],name:'sendCoin',outputs:[{name:'sufficient',type:'bool'}],type:'function'},{constant:true,inputs:[{name:'',type:'address'}],name:'coinBalanceOf',outputs:[{name:'',type:'uint256'}],type:'function'},{inputs:[{name:'supply',type:'uint256'}],type:'constructor'},{anonymous:false,inputs:[{indexed:false,name:'sender',type:'address'},{indexed:false,name:'receiver',type:'address'},{indexed:false,name:'amount',type:'uint256'}],name:'CoinTransfer',type:'event'}]).at('0x4a4ce7844735c4b6fc66392b200ab6fe007cfca8')  Just replace the address at the end for your own token address, then anyone that uses this snippet will immediately be able to use your contract. Of course this will work only for this specific contract so let\u0026rsquo;s analyze step by step and see how to improve this code so you\u0026rsquo;ll be able to use it anywhere.\nAll accounts are referenced in the network by their public address. But addresses are long, difficult to write down, hard to memorize and immutable. The last one is specially important if you want to be able to generate fresh accounts in your name, or upgrade the code of your contract. In order to solve this, there is a default name registrar contract which is used to associate the long addresses with short, human-friendly names.\nNames have to use only alphanumeric characters and, cannot contain blank spaces. In future releases the name registrar will likely implement a bidding process to prevent name squatting but for now, it works on a first come first served basis: as long as no one else registered the name, you can claim it.\nFirst, if you register a name, then you won\u0026rsquo;t need the hardcoded address in the end. Select a nice coin name and try to reserve it for yourself. First, select your name:\nvar tokenName = \u0026quot;MyFirstCoin\u0026quot;  Then, check the availability of your name:\nregistrar.addr(tokenName)  If that function returns \u0026ldquo;0x00..\u0026rdquo;, you can claim it to yourself:\nregistrar.reserve.sendTransaction(tokenName, {from: eth.accounts[0]});  Wait for the previous transaction to be picked up. Wait up to thirty seconds and then try:\nregistrar.owner(myName)  If it returns your address, it means you own that name and are able to set your chosen name to any address you want:\nregistrar.setAddress.sendTransaction(tokenName, token.address, true,{from: eth.accounts[0]});  You can replace token.address for eth.accounts[0] if you want to use it as a personal nickname.\nWait a little bit for that transaction to be picked up too and test it:\nregistrar.addr(\u0026quot;MyFirstCoin\u0026quot;)  You can send a transaction to anyone or any contract by name instead of account simply by typing\neth.sendTransaction({from: eth.accounts[0], to: registrar.addr(\u0026quot;MyFirstCoin\u0026quot;), value: web3.toWei(1, \u0026quot;ether\u0026quot;)})  Tip: don\u0026rsquo;t mix registrar.addr for registrar.owner. The first is to which address that name is pointed at: anyone can point a name to anywhere else, just like anyone can forward a link to google.com, but only the owner of the name can change and update the link. You can set both to be the same address.\nThis should now return your token address, meaning that now the previous code to instantiate could use a name instead of an address.\ntoken = eth.contract([{constant:false,inputs:[{name:'receiver',type:'address'},{name:'amount',type:'uint256'}],name:'sendCoin',outputs:[{name:'sufficient',type:'bool'}],type:'function'},{constant:true,inputs:[{name:'',type:'address'}],name:'coinBalanceOf',outputs:[{name:'',type:'uint256'}],type:'function'},{inputs:[{name:'supply',type:'uint256'}],type:'constructor'},{anonymous:false,inputs:[{indexed:false,name:'sender',type:'address'},{indexed:false,name:'receiver',type:'address'},{indexed:false,name:'amount',type:'uint256'}],name:'CoinTransfer',type:'event'}]).at(registrar.addr(\u0026quot;MyFirstCoin\u0026quot;))  This also means that the owner of the coin can update the coin by pointing the registrar to the new contract. This would, of course, require the coin holders trust the owner set at registrar.owner(\u0026ldquo;MyFirstCoin\u0026rdquo;)\nLearn More  Meta coin standard is a proposed standardization of function names for coin and token contracts, to allow them to be automatically added to other Pirl contract that utilizes trading, like exchanges or escrow.\n Formal proofing is a way where the contract developer will be able to assert some invariant qualities of the contract, like the total cap of the coin. Not yet implemented.\n  Crowdfund your idea Sometimes a good idea takes a lot of funds and collective effort. You could ask for donations, but donors prefer to give to projects they are more certain that will get traction and proper funding. This is an example where a crowdfunding would be ideal: you set up a goal and a deadline for reaching it. If you miss your goal, the donations are returned, therefore reducing the risk for donors. Since the code is open and auditable, there is no need for a centralized trusted platform and therefore the only fees everyone will pay are just the gas fees.\nIn a crowdfunding prizes are usually given. This would require you to get everyone\u0026rsquo;s contact information and keep track of who owns what. But since you just created your own token, why not use that to keep track of the prizes? This allows donors to immediately own something after they donated. They can store it safely, but they can also sell or trade it if they realize they don\u0026rsquo;t want the prize anymore. If your idea is something physical, all you have to do after the project is completed is to give the product to everyone who sends you back a token. If the project is digital the token itself can immediately be used for users to participate or get entry on your project.\nThe code The way this particular crowdsale contract works is that you set an exchange rate for your token and then the donors will immediately get a proportional amount of tokens in exchange of their ether. You will also choose a funding goal and a deadline: once that deadline is over you can ping the contract and if the goal was reached it will send the ether raised to you, otherwise it goes back to the donors. Donors keep their tokens even if the project doesn\u0026rsquo;t reach its goal, as a proof that they helped.\ncontract token { mapping (address =\u0026gt; uint) public coinBalanceOf; function token() {} function sendCoin(address receiver, uint amount) returns(bool sufficient) { } } contract Crowdsale { address public beneficiary; uint public fundingGoal; uint public amountRaised; uint public deadline; uint public price; token public tokenReward; Funder[] public funders; event FundTransfer(address backer, uint amount, bool isContribution); /* data structure to hold information about campaign contributors */ struct Funder { address addr; uint amount; } /* at initialization, setup the owner */ function Crowdsale(address _beneficiary, uint _fundingGoal, uint _duration, uint _price, token _reward) { beneficiary = _beneficiary; fundingGoal = _fundingGoal; deadline = now + _duration * 1 minutes; price = _price; tokenReward = token(_reward); } /* The function without name is the default function that is called whenever anyone sends funds to a contract */ function () { uint amount = msg.value; funders[funders.length++] = Funder({addr: msg.sender, amount: amount}); amountRaised += amount; tokenReward.sendCoin(msg.sender, amount / price); FundTransfer(msg.sender, amount, true); } modifier afterDeadline() { if (now \u0026gt;= deadline) _ } /* checks if the goal or time limit has been reached and ends the campaign */ function checkGoalReached() afterDeadline { if (amountRaised \u0026gt;= fundingGoal){ beneficiary.send(amountRaised); FundTransfer(beneficiary, amountRaised, false); } else { FundTransfer(0, 11, false); for (uint i = 0; i \u0026lt; funders.length; ++i) { funders[i].addr.send(funders[i].amount); FundTransfer(funders[i].addr, funders[i].amount, false); } } suicide(beneficiary); } }  Set the parameters Before we go further, let\u0026rsquo;s start by setting the parameters of the crowdsale:\nvar _beneficiary = eth.accounts[1]; // create an account for this var _fundingGoal = web3.toWei(100, \u0026quot;ether\u0026quot;); // raises 100 ether var _duration = 30; // number of minutes the campaign will last var _price = web3.toWei(0.02, \u0026quot;ether\u0026quot;); // the price of the tokens, in ether var _reward = token.address; // the token contract address.  On Beneficiary put the new address that will receive the raised funds. The funding goal is the amount of ether to be raised. Deadline is measured in blocktimes which average 12 seconds, so the default is about 4 weeks. The price is tricky: but just change the number 2 for the amount of tokens the contributors will receive for each ether donated. Finally reward should be the address of the token contract you created in the last section.\nIn this example you are selling on the crowdsale half of all the tokens that ever existed, in exchange for 100 ether. Decide those parameters very carefully as they will play a very important role in the next part of our guide.\nDeploy You know the drill: if you are using the solC compiler,remove line breaks and copy the following commands on the terminal:\nvar crowdsaleCompiled = eth.compile.solidity(' contract token { mapping (address =\u0026gt; uint) public coinBalanceOf; function token() {} function sendCoin(address receiver, uint amount) returns(bool sufficient) { } } contract Crowdsale { address public beneficiary; uint public fundingGoal; uint public amountRaised; uint public deadline; uint public price; token public tokenReward; Funder[] public funders; event FundTransfer(address backer, uint amount, bool isContribution); /* data structure to hold information about campaign contributors */ struct Funder { address addr; uint amount; } /* at initialization, setup the owner */ function Crowdsale(address _beneficiary, uint _fundingGoal, uint _duration, uint _price, token _reward) { beneficiary = _beneficiary; fundingGoal = _fundingGoal; deadline = now + _duration * 1 minutes; price = _price; tokenReward = token(_reward); } /* The function without name is the default function that is called whenever anyone sends funds to a contract */ function () { Funder f = funders[++funders.length]; f.addr = msg.sender; f.amount = msg.value; amountRaised += f.amount; tokenReward.sendCoin(msg.sender, f.amount/price); FundTransfer(f.addr, f.amount, true); } modifier afterDeadline() { if (now \u0026gt;= deadline) _ } /* checks if the goal or time limit has been reached and ends the campaign */ function checkGoalReached() afterDeadline { if (amountRaised \u0026gt;= fundingGoal){ beneficiary.send(amountRaised); FundTransfer(beneficiary, amountRaised, false); } else { FundTransfer(0, 11, false); for (uint i = 0; i \u0026lt; funders.length; ++i) { funders[i].addr.send(funders[i].amount); FundTransfer(funders[i].addr, funders[i].amount, false); } } suicide(beneficiary); } }'); var crowdsaleContract = web3.eth.contract(crowdsaleCompiled.Crowdsale.info.abiDefinition); var crowdsale = crowdsaleContract.new( _beneficiary, _fundingGoal, _duration, _price, _reward, { from:web3.eth.accounts[0], data:crowdsaleCompiled.Crowdsale.code, gas: 1000000 }, function(e, contract){ if(!e) { if(!contract.address) { console.log(\u0026quot;Contract transaction send: TransactionHash: \u0026quot; + contract.transactionHash + \u0026quot; waiting to be mined...\u0026quot;); } else { console.log(\u0026quot;Contract mined! Address: \u0026quot; + contract.address); console.log(contract); } } })  Wait up to thirty seconds and you\u0026rsquo;ll see a message like this:\nContract mined! address: 0xdaa24d02bad7e9d6a80106db164bad9399a0423e  If you received that alert then your code should be online. You can always double check by doing this:\neth.getCode(crowdsale.address)  Now fund your newly created contract with the necessary tokens so it can automatically distribute rewards to the contributors!\ntoken.sendCoin.sendTransaction(crowdsale.address, 5000,{from: eth.accounts[0]})  After the transaction is picked, you can check the amount of tokens the crowdsale address has, and all other variables this way:\n\u0026quot;Current crowdsale must raise \u0026quot; + web3.fromWei(crowdsale.fundingGoal.call(), \u0026quot;ether\u0026quot;) + \u0026quot; ether in order to send it to \u0026quot; + crowdsale.beneficiary.call() + \u0026quot;.\u0026quot;  Put some watchers on You want to be alerted whenever your crowdsale receives new funds, so paste this code:\nvar event = crowdsale.FundTransfer({}, '', function(error, result){ if (!error) if (result.args.isContribution) { console.log(\u0026quot;\\n New backer! Received \u0026quot; + web3.fromWei(result.args.amount, \u0026quot;ether\u0026quot;) + \u0026quot; ether from \u0026quot; + result.args.backer ) console.log( \u0026quot;\\n The current funding at \u0026quot; +( 100 * crowdsale.amountRaised.call() / crowdsale.fundingGoal.call()) + \u0026quot;% of its goals. Funders have contributed a total of \u0026quot; + web3.fromWei(crowdsale.amountRaised.call(), \u0026quot;ether\u0026quot;) + \u0026quot; ether.\u0026quot;); var timeleft = Math.floor(Date.now() / 1000)-crowdsale.deadline(); if (timeleft\u0026gt;3600) { console.log(\u0026quot;Deadline has passed, \u0026quot; + Math.floor(timeleft/3600) + \u0026quot; hours ago\u0026quot;) } else if (timeleft\u0026gt;0) { console.log(\u0026quot;Deadline has passed, \u0026quot; + Math.floor(timeleft/60) + \u0026quot; minutes ago\u0026quot;) } else if (timeleft\u0026gt;-3600) { console.log(Math.floor(-1*timeleft/60) + \u0026quot; minutes until deadline\u0026quot;) } else { console.log(Math.floor(-1*timeleft/3600) + \u0026quot; hours until deadline\u0026quot;) } } else { console.log(\u0026quot;Funds transferred from crowdsale account: \u0026quot; + web3.fromWei(result.args.amount, \u0026quot;ether\u0026quot;) + \u0026quot; ether to \u0026quot; + result.args.backer ) } });  Register the contract You are now set. Anyone can now contribute by simply sending ether to the crowdsale address, but to make it even simpler, let\u0026rsquo;s register a name for your sale. First, pick a name for your crowdsale:\nvar name = \u0026quot;mycrowdsale\u0026quot;  Check if that\u0026rsquo;s available and register:\nregistrar.addr(name) registrar.reserve.sendTransaction(name, {from: eth.accounts[0]});  Wait for the previous transaction to be picked up and then:\nregistrar.setAddress.sendTransaction(name, crowdsale.address, true,{from: eth.accounts[0]});  Contribute to the crowdsale Contributing to the crowdsale is very simple, it doesn\u0026rsquo;t even require instantiating the contract. This is because the crowdsale responds to simple ether deposits, so anyone that sends ether to the crowdsale will automatically receive a reward. Anyone can contribute to it by simply executing this command:\nvar amount = web3.toWei(5, \u0026quot;ether\u0026quot;) // decide how much to contribute eth.sendTransaction({from: eth.accounts[0], to: crowdsale.address, value: amount, gas: 1000000})  Alternatively, if you want someone else to send it, they can even use the name registrar to contribute:\neth.sendTransaction({from: eth.accounts[0], to: registrar.addr(\u0026quot;mycrowdsale\u0026quot;), value: amount, gas: 500000})  Now wait a minute for the blocks to pickup and you can check if the contract received the ether by doing any of these commands:\nweb3.fromWei(crowdsale.amountRaised.call(), \u0026quot;ether\u0026quot;) + \u0026quot; ether\u0026quot; token.coinBalanceOf.call(eth.accounts[0]) + \u0026quot; tokens\u0026quot; token.coinBalanceOf.call(crowdsale.address) + \u0026quot; tokens\u0026quot;  Recover funds Once the deadline is passed someone has to wake up the contract to have the funds sent to either the beneficiary or back to the funders (if it failed). This happens because there is no such thing as an active loop or timer on Pirl so any future transactions must be pinged by someone.\ncrowdsale.checkGoalReached.sendTransaction({from:eth.accounts[0], gas: 2000000})  You can check your accounts with these lines of code:\nweb3.fromWei(eth.getBalance(eth.accounts[0]), \u0026quot;ether\u0026quot;) + \u0026quot; ether\u0026quot; web3.fromWei(eth.getBalance(eth.accounts[1]), \u0026quot;ether\u0026quot;) + \u0026quot; ether\u0026quot; token.coinBalanceOf.call(eth.accounts[0]) + \u0026quot; tokens\u0026quot; token.coinBalanceOf.call(eth.accounts[1]) + \u0026quot; tokens\u0026quot;  The crowdsale instance is setup to self destruct once it has done its job, so if the deadline is over and everyone got their prizes the contract is no more, as you can see by running this:\neth.getCode(crowdsale.address)  So you raised a 100 ethers and successfully distributed your original coin among the crowdsale donors. What could you do next with those things?\nDemocracy DAO So far you have created a tradeable token and you successfully distributed it among all those who were willing to help fundraise a 100 ethers. That\u0026rsquo;s all very interesting but what exactly are those tokens for? Why would anyone want to own or trade it for anything else valuable? If you can convince your new token is the next big money maybe others will want it, but so far your token offers no value per se. We are going to change that, by creating your first decentralized autonomous organization, or DAO.\nThink of the DAO as the constitution of a country, the executive branch of a government or maybe like a robotic manager for an organization. The DAO receives the money that your organization raises, keeps it safe and uses it to fund whatever its members want. The robot is incorruptible, will never defraud the bank, never create secret plans, never use the money for anything other than what its constituents voted on. The DAO will never disappear, never run away and cannot be controlled by anyone other than its own citizens.\nThe token we distributed using the crowdsale is the only citizen document needed. Anyone who holds any token is able to create and vote on proposals. Similar to being a shareholder in a company, the token can be traded on the open market and the vote is proportional to amounts of tokens the voter holds.\nTake a moment to dream about the revolutionary possibilities this would allow, and now you can do it yourself, in under a 100 lines of code:\nThe Code contract token { mapping (address =\u0026gt; uint) public coinBalanceOf; function token() { } function sendCoin(address receiver, uint amount) returns(bool sufficient) { } } contract Democracy { uint public minimumQuorum; uint public debatingPeriod; token public voterShare; address public founder; Proposal[] public proposals; uint public numProposals; event ProposalAdded(uint proposalID, address recipient, uint amount, bytes32 data, string description); event Voted(uint proposalID, int position, address voter); event ProposalTallied(uint proposalID, int result, uint quorum, bool active); struct Proposal { address recipient; uint amount; bytes32 data; string description; uint creationDate; bool active; Vote[] votes; mapping (address =\u0026gt; bool) voted; } struct Vote { int position; address voter; } function Democracy(token _voterShareAddress, uint _minimumQuorum, uint _debatingPeriod) { founder = msg.sender; voterShare = token(_voterShareAddress); minimumQuorum = _minimumQuorum || 10; debatingPeriod = _debatingPeriod * 1 minutes || 30 days; } function newProposal(address _recipient, uint _amount, bytes32 _data, string _description) returns (uint proposalID) { if (voterShare.coinBalanceOf(msg.sender)\u0026gt;0) { proposalID = proposals.length++; Proposal p = proposals[proposalID]; p.recipient = _recipient; p.amount = _amount; p.data = _data; p.description = _description; p.creationDate = now; p.active = true; ProposalAdded(proposalID, _recipient, _amount, _data, _description); numProposals = proposalID+1; } } function vote(uint _proposalID, int _position) returns (uint voteID){ if (voterShare.coinBalanceOf(msg.sender)\u0026gt;0 \u0026amp;\u0026amp; (_position \u0026gt;= -1 || _position \u0026lt;= 1 )) { Proposal p = proposals[_proposalID]; if (p.voted[msg.sender] == true) return; voteID = p.votes.length++; p.votes[voteID] = Vote({position: _position, voter: msg.sender}); p.voted[msg.sender] = true; Voted(_proposalID, _position, msg.sender); } } function executeProposal(uint _proposalID) returns (int result) { Proposal p = proposals[_proposalID]; /* Check if debating period is over */ if (now \u0026gt; (p.creationDate + debatingPeriod) \u0026amp;\u0026amp; p.active){ uint quorum = 0; /* tally the votes */ for (uint i = 0; i \u0026lt; p.votes.length; ++i) { Vote v = p.votes[i]; uint voteWeight = voterShare.coinBalanceOf(v.voter); quorum += voteWeight; result += int(voteWeight) * v.position; } /* execute result */ if (quorum \u0026gt; minimumQuorum \u0026amp;\u0026amp; result \u0026gt; 0 ) { p.recipient.call.value(p.amount)(p.data); p.active = false; } else if (quorum \u0026gt; minimumQuorum \u0026amp;\u0026amp; result \u0026lt; 0) { p.active = false; } ProposalTallied(_proposalID, result, quorum, p.active); } } }  There\u0026rsquo;s a lot of going on but it\u0026rsquo;s simpler than it looks. The rules of your organization are very simple: anyone with at least one token can create proposals to send funds from the country\u0026rsquo;s account. After a week of debate and votes, if it has received votes worth a total of 100 tokens or more and has more approvals than rejections, the funds will be sent. If the quorum hasn\u0026rsquo;t been met or it ends on a tie, then voting is kept until it\u0026rsquo;s resolved. Otherwise, the proposal is locked and kept for historical purposes.\nSo let\u0026rsquo;s recap what this means: in the last two sections you created 10,000 tokens, sent 1,000 of those to another account you control, 2,000 to a friend named Alice and distributed 5,000 of them via a crowdsale. This means that you no longer control over 50% of the votes in the DAO, and if Alice and the community bands together, they can outvote any spending decision on the 100 ethers raised so far. This is exactly how a democracy should work. If you don\u0026rsquo;t want to be a part of your country anymore the only thing you can do is sell your own tokens on a decentralized exchange and opt out, but you cannot prevent the others from doing so.\nSet Up your Organization So open your console and let\u0026rsquo;s get ready to finally put your country online. First, let\u0026rsquo;s set the right parameters, pick them with care:\nvar _voterShareAddress = token.address; var _minimumQuorum = 10; // Minimun amount of voter tokens the proposal needs to pass var _debatingPeriod = 60; // debating period, in minutes;  With these default parameters anyone with any tokens can make a proposal on how to spend the organization\u0026rsquo;s money. The proposal has 1 hour to be debated and it will pass if it has at least votes from at least 0.1% of the total tokens and has more support than rejections. Pick those parameters with care, as you won\u0026rsquo;t be able to change them in the future.\nvar daoCompiled = eth.compile.solidity('contract token { mapping (address =\u0026gt; uint) public coinBalanceOf; function token() { } function sendCoin(address receiver, uint amount) returns(bool sufficient) { } } contract Democracy { uint public minimumQuorum; uint public debatingPeriod; token public voterShare; address public founder; Proposal[] public proposals; uint public numProposals; event ProposalAdded(uint proposalID, address recipient, uint amount, bytes32 data, string description); event Voted(uint proposalID, int position, address voter); event ProposalTallied(uint proposalID, int result, uint quorum, bool active); struct Proposal { address recipient; uint amount; bytes32 data; string description; uint creationDate; bool active; Vote[] votes; mapping (address =\u0026gt; bool) voted; } struct Vote { int position; address voter; } function Democracy(token _voterShareAddress, uint _minimumQuorum, uint _debatingPeriod) { founder = msg.sender; voterShare = token(_voterShareAddress); minimumQuorum = _minimumQuorum || 10; debatingPeriod = _debatingPeriod * 1 minutes || 30 days; } function newProposal(address _recipient, uint _amount, bytes32 _data, string _description) returns (uint proposalID) { if (voterShare.coinBalanceOf(msg.sender)\u0026gt;0) { proposalID = proposals.length++; Proposal p = proposals[proposalID]; p.recipient = _recipient; p.amount = _amount; p.data = _data; p.description = _description; p.creationDate = now; p.active = true; ProposalAdded(proposalID, _recipient, _amount, _data, _description); numProposals = proposalID+1; } else { return 0; } } function vote(uint _proposalID, int _position) returns (uint voteID){ if (voterShare.coinBalanceOf(msg.sender)\u0026gt;0 \u0026amp;\u0026amp; (_position \u0026gt;= -1 || _position \u0026lt;= 1 )) { Proposal p = proposals[_proposalID]; if (p.voted[msg.sender] == true) return; voteID = p.votes.length++; Vote v = p.votes[voteID]; v.position = _position; v.voter = msg.sender; p.voted[msg.sender] = true; Voted(_proposalID, _position, msg.sender); } else { return 0; } } function executeProposal(uint _proposalID) returns (int result) { Proposal p = proposals[_proposalID]; /* Check if debating period is over */ if (now \u0026gt; (p.creationDate + debatingPeriod) \u0026amp;\u0026amp; p.active){ uint quorum = 0; /* tally the votes */ for (uint i = 0; i \u0026lt; p.votes.length; ++i) { Vote v = p.votes[i]; uint voteWeight = voterShare.coinBalanceOf(v.voter); quorum += voteWeight; result += int(voteWeight) * v.position; } /* execute result */ if (quorum \u0026gt; minimumQuorum \u0026amp;\u0026amp; result \u0026gt; 0 ) { p.recipient.call.value(p.amount)(p.data); p.active = false; } else if (quorum \u0026gt; minimumQuorum \u0026amp;\u0026amp; result \u0026lt; 0) { p.active = false; } } ProposalTallied(_proposalID, result, quorum, p.active); } }'); var democracyContract = web3.eth.contract(daoCompiled.Democracy.info.abiDefinition); var democracy = democracyContract.new( _voterShareAddress, _minimumQuorum, _debatingPeriod, { from:web3.eth.accounts[0], data:daoCompiled.Democracy.code, gas: 3000000 }, function(e, contract){ if(!e) { if(!contract.address) { console.log(\u0026quot;Contract transaction send: TransactionHash: \u0026quot; + contract.transactionHash + \u0026quot; waiting to be mined...\u0026quot;); } else { console.log(\u0026quot;Contract mined! Address: \u0026quot; + contract.address); console.log(contract); } } })  Wait a minute until the miners pick it up. It will cost you about 850k Gas. Once that is picked up, it\u0026rsquo;s time to instantiate it and set it up, by pointing it to the correct address of the token contract you created previously.\nIf everything worked out, you can take a look at the whole organization by executing this string:\n\u0026quot;This organization has \u0026quot; + democracy.numProposals() + \u0026quot; proposals and uses the token at the address \u0026quot; + democracy.voterShare() ;  If everything is setup then your DAO should return a proposal count of 0 and an address marked as the \u0026ldquo;founder\u0026rdquo;. While there are still no proposals, the founder of the DAO can change the address of the token to anything it wants.\nRegister your organization name Let\u0026rsquo;s also register a name for your contract so it\u0026rsquo;s easily accessible (don\u0026rsquo;t forget to check your name availability with registrar.addr(\u0026ldquo;nameYouWant\u0026rdquo;) before reserving!)\nvar name = \u0026quot;MyPersonalDemocracy\u0026quot; registrar.reserve.sendTransaction(name, {from: eth.accounts[0]}) var democracy = eth.contract(daoCompiled.Democracy.info.abiDefinition).at(democracy.address); democracy.setup.sendTransaction(registrar.addr(\u0026quot;MyFirstCoin\u0026quot;),{from:eth.accounts[0]})  Wait for the previous transactions to be picked up and then:\nregistrar.setAddress.sendTransaction(name, democracy.address, true,{from: eth.accounts[0]});  The Democracy Watchbots var event = democracy.ProposalAdded({}, '', function(error, result){ if (!error) console.log(\u0026quot;New Proposal #\u0026quot;+ result.args.proposalID +\u0026quot;!\\n Send \u0026quot; + web3.fromWei(result.args.amount, \u0026quot;ether\u0026quot;) + \u0026quot; ether to \u0026quot; + result.args.recipient.substring(2,8) + \u0026quot;... for \u0026quot; + result.args.description ) }); var eventVote = democracy.Voted({}, '', function(error, result){ if (!error) var opinion = \u0026quot;\u0026quot;; if (result.args.position \u0026gt; 0) { opinion = \u0026quot;in favor\u0026quot; } else if (result.args.position \u0026lt; 0) { opinion = \u0026quot;against\u0026quot; } else { opinion = \u0026quot;abstaining\u0026quot; } console.log(\u0026quot;Vote on Proposal #\u0026quot;+ result.args.proposalID +\u0026quot;!\\n \u0026quot; + result.args.voter + \u0026quot; is \u0026quot; + opinion ) }); var eventTally = democracy.ProposalTallied({}, '', function(error, result){ if (!error) var totalCount = \u0026quot;\u0026quot;; if (result.args.result \u0026gt; 1) { totalCount = \u0026quot;passed\u0026quot; } else if (result.args.result \u0026lt; 1) { totalCount = \u0026quot;rejected\u0026quot; } else { totalCount = \u0026quot;a tie\u0026quot; } console.log(\u0026quot;Votes counted on Proposal #\u0026quot;+ result.args.proposalID +\u0026quot;!\\n With a total of \u0026quot; + Math.abs(result.args.result) + \u0026quot; out of \u0026quot; + result.args.quorum + \u0026quot;, proposal is \u0026quot; + totalCount + \u0026quot;. Proposal is \u0026quot; + (result.args.active? \u0026quot; still on the floor\u0026quot; : \u0026quot;archived\u0026quot;) ) });  Interacting with the DAO After you are satisfied with what you want, it\u0026rsquo;s time to get all that ether you got from the crowdfunding into your new organization:\neth.sendTransaction({from: eth.accounts[1], to: democracy.address, value: web3.toWei(100, \u0026quot;ether\u0026quot;)})  This should take only a minute and your country is ready for business! Now, as a first priority, your organisation needs a nice logo, but unless you are a designer, you have no idea how to do that. For the sake of argument let\u0026rsquo;s say you find that your friend Bob is a great designer who\u0026rsquo;s willing to do it for only 10 ethers, so you want to propose to hire him.\nrecipient = registrar.addr(\u0026quot;bob\u0026quot;); amount = web3.toWei(10, \u0026quot;ether\u0026quot;); shortNote = \u0026quot;Logo Design\u0026quot;; democracy.newProposal.sendTransaction( recipient, amount, '', shortNote, {from: eth.accounts[0], gas:1000000})  After a minute, anyone can check the proposal recipient and amount by executing these commands:\n\u0026quot;This organization has \u0026quot; + (Number(democracy.numProposals())+1) + \u0026quot; pending proposals\u0026quot;;  Keep an eye on the organization Unlike most governments, your country\u0026rsquo;s government is completely transparent and easily programmable. As a small demonstration here\u0026rsquo;s a snippet of code that goes through all the current proposals and prints what they are and for whom:\nfunction checkAllProposals() { console.log(\u0026quot;Country Balance: \u0026quot; + web3.fromWei( eth.getBalance(democracy.address), \u0026quot;ether\u0026quot;) ); for (i = 0; i\u0026lt; (Number(democracy.numProposals())); i++ ) { var p = democracy.proposals(i); var timeleft = Math.floor(((Math.floor(Date.now() / 1000)) - Number(p[4]) - Number(democracy.debatingPeriod()))/60); console.log(\u0026quot;Proposal #\u0026quot; + i + \u0026quot; Send \u0026quot; + web3.fromWei( p[1], \u0026quot;ether\u0026quot;) + \u0026quot; ether to address \u0026quot; + p[0].substring(2,6) + \u0026quot; for \u0026quot;+ p[3] + \u0026quot;.\\t Deadline:\u0026quot;+ Math.abs(Math.floor(timeleft)) + (timeleft\u0026gt;0?\u0026quot; minutes ago \u0026quot;:\u0026quot; minutes left \u0026quot;) + (p[5]? \u0026quot; Active\u0026quot;:\u0026quot; Archived\u0026quot;) ); } } checkAllProposals();  A concerned citizen could easily write a bot that periodically pings the blockchain and then publicizes any new proposals that were put forth, guaranteeing total transparency.\nNow of course you want other people to be able to vote on your proposals. You can check the crowdsale tutorial on the best way to register your contract app so that all the user needs is a name, but for now let\u0026rsquo;s use the easier version. Anyone should be able to instantiate a local copy of your country in their computer by using this giant command:\ndemocracy = eth.contract( [{ constant: true, inputs: [{ name: '', type: 'uint256' } ], name: 'proposals', outputs: [{ name: 'recipient', type: 'address' }, { name: 'amount', type: 'uint256' }, { name: 'data', type: 'bytes32' }, { name: 'descriptionHash', type: 'bytes32' }, { name: 'creationDate', type: 'uint256' }, { name: 'numVotes', type: 'uint256' }, { name: 'quorum', type: 'uint256' }, { name: 'active', type: 'bool' } ], type: 'function' }, { constant: false, inputs: [{ name: '_proposalID', type: 'uint256' } ], name: 'executeProposal', outputs: [{ name: 'result', type: 'uint256' } ], type: 'function' }, { constant: true, inputs: [ ], name: 'debatingPeriod', outputs: [{ name: '', type: 'uint256' } ], type: 'function' }, { constant: true, inputs: [ ], name: 'numProposals', outputs: [{ name: '', type: 'uint256' } ], type: 'function' }, { constant: true, inputs: [ ], name: 'founder', outputs: [{ name: '', type: 'address' } ], type: 'function' }, { constant: false, inputs: [{ name: '_proposalID', type: 'uint256' }, { name: '_position', type: 'int256' } ], name: 'vote', outputs: [{ name: 'voteID', type: 'uint256' } ], type: 'function' }, { constant: false, inputs: [{ name: '_voterShareAddress', type: 'address' } ], name: 'setup', outputs: [ ], type: 'function' }, { constant: false, inputs: [{ name: '_recipient', type: 'address' }, { name: '_amount', type: 'uint256' }, { name: '_data', type: 'bytes32' }, { name: '_descriptionHash', type: 'bytes32' } ], name: 'newProposal', outputs: [{ name: 'proposalID', type: 'uint256' } ], type: 'function' }, { constant: true, inputs: [ ], name: 'minimumQuorum', outputs: [{ name: '', type: 'uint256' } ], type: 'function' }, { inputs: [ ], type: 'constructor' } ] ).at(registrar.addr('MyPersonalCountry'))  Then anyone who owns any of your tokens can vote on the proposals by doing this:\nvar proposalID = 0; var position = -1; // +1 for voting yea, -1 for voting nay, 0 abstains but counts as quorum democracy.vote.sendTransaction(proposalID, position, {from: eth.accounts[0], gas: 1000000}); var proposalID = 1; var position = 1; // +1 for voting yea, -1 for voting nay, 0 abstains but counts as quorum democracy.vote.sendTransaction(proposalID, position, {from: eth.accounts[0], gas: 1000000});  Unless you changed the basic parameters in the code, any proposal will have to be debated for at least a week until it can be executed. After that anyone—even a non-citizen—can demand the votes to be counted and the proposal to be executed. The votes are tallied and weighted at that moment and if the proposal is accepted then the ether is sent immediately and the proposal is archived. If the votes end in a tie or the minimum quorum hasn’t been reached, the voting is kept open until the stalemate is resolved. If it loses, then it\u0026rsquo;s archived and cannot be voted again.\nvar proposalID = 1; democracy.executeProposal.sendTransaction(proposalID, {from: eth.accounts[0], gas: 1000000});  If the proposal passed then you should be able to see Bob\u0026rsquo;s ethers arriving on his address:\nweb3.fromWei(eth.getBalance(democracy.address), \u0026quot;ether\u0026quot;) + \u0026quot; ether\u0026quot;; web3.fromWei(eth.getBalance(registrar.addr(\u0026quot;bob\u0026quot;)), \u0026quot;ether\u0026quot;) + \u0026quot; ether\u0026quot;;  Try for yourself: This is a very simple democracy contract, which could be vastly improved: currently, all proposals have the same debating time and are won by direct vote and simple majority. Can you change that so it will have some situations, depending on the amount proposed, that the debate might be longer or that it would require a larger majority? Also think about some way where citizens didn\u0026rsquo;t need to vote on every issue and could temporarily delegate their votes to a special representative. You might have also noticed that we added a tiny description for each proposal. This could be used as a title for the proposal or could be a hash of a larger document describing it in detail.\nLet\u0026rsquo;s go exploring! You have reached the end of this tutorial, but it\u0026rsquo;s just the beginning of a great adventure. Look back and see how much you accomplished: you created a living, talking robot, your own cryptocurrency, raised funds through a trustless crowdfunding and used it to kickstart your own personal democratic organization.\nFor the sake of simplicity, we only used the democratic organization you created to send ether around, the native currency of Pirl. While that might be good enough for some, this is only scratching the surface of what can be done. In the Pirl network contracts have all the same rights as any normal user, meaning that your organization could do any of the transactions that you executed coming from your own accounts.\nWhat could happen next?  The greeter contract you created at the beginning could be improved to charge ether for its services and could funnel those funds into the DAO.\n The tokens you still control could be sold on a decentralized exchange or traded for goods and services to fund further develop the first contract and grow the organization.\n Your DAO could own its own name on the name registrar, and then change where it\u0026rsquo;s redirecting in order to update itself if the token holders approved.\n The organization could hold not only ethers, but any kind of other coin created on Pirl, including assets whose value are tied to the bitcoin or dollar.\n The DAO could be programmed to allow a proposal with multiple transactions, some scheduled to the future. It could also own shares of other DAO\u0026rsquo;s, meaning it could vote on larger organization or be a part of a federation of DAO\u0026rsquo;s.\n The Token Contract could be reprogrammed to hold ether or to hold other tokens and distribute it to the token holders. This would link the value of the token to the value of other assets, so paying dividends could be accomplished by simply moving funds to the token address.\n  This all means that this tiny society you created could grow, get funding from third parties, pay recurrent salaries, own any kind of crypto-assets and even use crowdsales to fund its activities. All with full transparency, complete accountability and complete immunity from any human interference. While the network lives the contracts will execute exactly the code they were created to execute, without any exception, forever.\nSo what will your contract be? Will it be a country, a company, a non-profit group? What will your code do?\nThat\u0026rsquo;s up to you.\nAuthor(s):\n@Fawkes\nContributor(s):\n@Dptelecom\n"
},
{
	"uri": "https://pirl.live/ipns/QmVKFJs81erni4KV6Hzt2xVwGtC2P1WtE9A4MxNThFVFVh/en/wallets/",
	"title": "Wallets",
	"tags": [],
	"description": "",
	"content": "\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt; HEAD ======= \u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt; local_version\nDownload here the Pirl Nautilus Wallet-0.9.2 Linux Downloads\nDownload here the Pirl Nautilus Wallet-0.9.2 MacOs Downloads\nDownload here the Pirl Nautilus Wallet-0.9.2 Windows Downloads\nAuthor(s): @Dptelecom\nContributor(s):\n"
},
{
	"uri": "https://pirl.live/ipns/QmVKFJs81erni4KV6Hzt2xVwGtC2P1WtE9A4MxNThFVFVh/en/getting-started/how-to-contribute/hugo/",
	"title": "hugo",
	"tags": [],
	"description": "",
	"content": " Hello and welcome!\nThis manual will show you how to run Hugo and Hugo server directly from your command line!\nWith the help of Hugo, you can create, view, enhance inputs for Knowledge Base and contribute to PIRL community.\nOverview This guide will explain how to download, setup and run Hugo and Hugo server:\n\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt; HEAD\n \u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt; local_version\nPrerequisites For granting the success of this operation, you will need these requirements:\n Internet connection Download the latest version of Hugo binary (\u0026gt; 0.25) for your OS Download the pirl-docs repo from here: Pirl-docs Web browser of your choice and some power of will  Action! 1) Mac iOS If you are a Mac user, install Hugo with one strong, simple command.\nCommand: brew install Hugo\nFollow installation guide here\n2) Windows OS  If you use a Windows as I do, simply download the latest version of Hugo for Windows if you haven\u0026rsquo;t done it yet. Download most recent PIRL docs file depository if you haven\u0026rsquo;t done it yet. Unzip/extract both of these two folders. Then go into Hugo folder and copy everything you will find there. Jump to the PIRL docs folder and past all HUGO files there and rewrite files if needed. Then press Search button nearby the main Windows start button in the left down corner (standardly it is here :) ) Write a CMD in the empty line and hit Enter. Now you can see exactly what do I need to write every time I want to run Hugo server and write down some KnowledgeBase (KB) article. First I need to locate my destination (in this case it is a Disk D and some further folders). Then I will make my move toward the Hugo folder.  Commands in CMD:\n C:\\Users\\YourComputername\u0026gt;D: D:\u0026gt;cd D:\\PIRL\\HUGO\\pirl-docs-master\\pirl-docs-master Dir Hugo.exe Hugo.exe server For shutting Hugo server down press: CTRL+C  3) Linux OS I have created two possible ways for downloading, installation and running Hugo. Pick what is more OK for you.\na) Install by the package manager  Type in the command:  wget https://github.com/gohugoio/hugo/releases/download/v0.49/hugo_0.49_Linux-32bit.deb sudo dpkg -i hugo_0.49_Linux-32bit.deb   b) Alternatively, install via a shell script and then use another script for comfortable repetitive Startup  Installation script  #!/bin/bash wget https://github.com/gohugoio/hugo/releases/download/v0.49/hugo_0.49_Linux-64bit.tar.gz tar -xf hugo_0.49_Linux-64bit.tar.gz   Repetitive Startup script  #!/bin/bash cd /path/to/hugo ls -la ./hugo.sh \u0026amp; pkill -f hugo.sh ./hugo.sh server  Checking in the Web browser When your installation is done, start the web browser and type in:\nhttp://localhost:1313   Welcome in the Matrix. Now you can edit or create new index files and help us create another studding knowledge based articles. For doing so, pick the text editor which suit your needs. I prefer Atom. Its really easy to use and its also GitLab user friendly.  Author: Mickey Maler\nContributor(s):\n"
},
{
	"uri": "https://pirl.live/ipns/QmVKFJs81erni4KV6Hzt2xVwGtC2P1WtE9A4MxNThFVFVh/en/development/core/pirlguard/",
	"title": "PirlGuard",
	"tags": [],
	"description": "",
	"content": " \u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt; HEAD\n        local_version\n       PirlGuard - Innovative Solution against 51% Attacks  Pirl block 2,442,442 is a historical event not only for Pirl but for blockchain security in general.\nAs most of the Pirl community is aware the Pirl Team been researching different ways to secure our blockchain against both ASICS and 51% attacks for several months, openly within our Discord and behind the scenes. During this time Pirl fell victim to a 51% attack along with many other blockchains.\n\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt; HEAD\n \u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt; local_version\nOne of the contributing threat factors that has recently made nearly all PoW consensus mechanism Blockchains susceptible to 51% attacks has been the decline of mining profits leading to excess amounts of cheap hash power.\nMost sources available explain the complexity of those attacks and showcase PoS and 3rd party solutions as a good measure for protecting against such attacks. One solution would involve rolling back the blockchain which would still harm the miners, investors, and holders of Pirl. While a PoS consensus mechanism is also vulnerable other kinds of attacks such as “Nothing-At-Stake” attack.\nAfter thorough research and analysis of blockchain security methods the Pirl team did not view any of the currently available options as acceptable long-term preventable measures against these types of attacks. This left the team with the only possible choice available, to develop a new Security Protocol.\nIn order to understand the PirlGuard Protocol including the how and why behind Pirl developing the innovative solution, you must understand how a 51% attack works. If you are confident in your knowledge regarding the anatomy of a 51% attack feel free to skip to the“How PirlGuard works?” section of this article.\nHow a 51% attack works Source: CoinMonks\nAuthor: Jimi.S\nWhen a Bitcoin owner signs off on a transaction, it is put into a local pool of unconfirmed transactions. Miners select transactions from these pools to form a block of transactions. In order to add this block of transactions to the blockchain, they need to find a solution to a very difficult mathematical problem. They try to find this solution using computational power. This is called hashing. The more computational power a miner has, the better their chances are to find a solution before other miners find theirs. When a miner finds a solution, it will be broadcasted (along with their block) to the other miners and they will only verify it if all transactions inside the block are valid according to the existing record of transactions on the blockchain. Note that even a corrupted miner can never create a transaction for someone else because they would need the digital signature of that person in order to do that (their private key). Sending Bitcoin from someone else’s account is therefore simply impossible without access to the corresponding private key.\nStealth mining — creating an offspring of the blockchain Now pay attention. A malicious miner can however, try to reverse existing transactions. When a miner finds a solution, it is supposed to be broadcasted to all other miners so that they can verify it whereafter the block is added to the blockchain (the miners reach consensus). However, a corrupt miner can create an offspring of the blockchain by not broadcasting the solutions of his blocks to the rest of the network. There are now two versions of the blockchain.\n\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt; HEAD\n \u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt; local_version\nThere are now two versions of the blockchain. The red blockchain can be considered in ‘stealth’ mode.\nOne version that is being followed by the uncorrupted miners, and one that is being followed by the corrupted miner. The corrupted miner is now working on his own version of that blockchain and is not broadcasting it to the rest of the network. The rest of the network doesn’t pick up on this chain, because after all, it hasn’t been broadcasted. It is isolated to the rest of the network. The corrupted miner can now spend all his Bitcoins on the truthful version of the blockchain, the one that all the other miners are working on. Let’s say he spends it on a Lamborghini for example. On the truthful blockchain, his Bitcoins are now spent. Meanwhile, he does not include these transactions on his isolated version of the blockchain. On his isolated version of the blockchain, he still has those Bitcoins.\n\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt; HEAD\n \u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt; local_version\nMeanwhile, he is still picking up blocks and he verifies them all by himself on his isolated version of the blockchain. This is where all trouble starts… The blockchain is programmed to follow a model of democratic governance, aka the majority. The blockchain does this by always following the longest chain, after all, the majority of the miners add blocks to their version of the blockchain faster than the rest of the network (so; longest chain = majority). This is how the blockchain determines which version of its chain is the truth, and in turn what all balances of wallets are based on. A race has now started. Whoever has the most hashing power will add blocks to their version of the chain faster.\n\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt; HEAD\n \u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt; local_version\nA race — reversing existing transactions by broadcasting a new chain The corrupted miner will now try to add blocks to his isolated blockchain faster than the other miners add blocks to their blockchain (the truthful one). As soon as the corrupted miner creates a longer blockchain, he suddenly broadcasts this version of the blockchain to the rest of the network. The rest of the network will now detect that this (corrupt) version of the blockchain is actually longer than the one they were working on, and the protocol forces them to switch to this chain.\n\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt; HEAD\n \u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt; local_version\nThe corrupted blockchain is now considered the truthful blockchain, and all transactions that are not included on this chain will be reversed immediately. The attacker has spent his Bitcoins on a Lamborghini before, but this transaction was not included in his stealth chain, the chain that is now in control, and so he is now once again in control of those Bitcoins. He is able to spend them again.\n\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt; HEAD\n \u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt; local_version\nThis is a double-spend attack. It is commonly referred to as a 51% attack because the malicious miner will require more hashing power than the rest of the network combined (thus 51% of the hashing power) in order to add blocks to his version of the blockchain faster, eventually allowing him to build a longer chain.\nNow that we know how the attack works we can summarize it in a few key moments.\nA) The attacker needs to mine his own version of the blockchain in private with hashrate greater than the one on the main network in order to be faster and create a longer chain. This is often a race for getting a chain with 10–20–50 blocks longer.\nB) Once he is in possession of a longer blockchain he needs to broadcast it to the network. Then the network needs to recognize it as the longest chain and accept it.\nC) A successful double spend would orphan the initial transactions making the coins available in the attacker wallet once again after the applied longer chain.\nHow PirlGuard works? In order to disrupt the mechanics behind 51% attack that allows an attacker to be successful, we have deployed a core solution with a modified consensus algorithm that will defend our blockchain and many others in the near future from virtually all 51% attacks.\nPirlGuard System With the PirlGuard Protocol deployed the chances of an attack succeeding are vastly reduced. As we know once the attacker has created a longer chain through privately mining a separate chain they will then have to broadcast it to the network. Once the attacker opens their node for peering it will attempt to peer with rest of the nodes on the network, telling them that they are wrong. However, once this happens PirlGuard will drop the peer and penalize them by sentencing them to mine X amount of penalty blocks due to their un-peered mining. The amount of penalty blocks assigned depends on the amount of blocks that the malicious miner mined in private.\n\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt; HEAD\n \u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt; local_version\nThe PirlGuard security protocol greatly deters attackers from attempting malicious peering giving the main network a much needed boost in security. This new security mechanism reduces the chances to approximately 0.03%.\nBut, this is not the only security measure we have prepared.\nMasternode operated notary contracts on multiple blockchains and monitoring system. The masternodes will take upon a new role altogether with their other utility functions. They will notarize the blockchain and be allowed to act in the processes of penalizing bad actors and preserve honest consensus on the Pirl blockchain.\nIn case an attacker is still determined to apply a large amount of funds and resources to attempt their luck(0.03% chance), and somehow succeeds to enforce a longer chain onto the network a newly initialized orphan monitoring system will detect the reorganizations of orphaned blocks which will alert the team to take necessary actions and countermeasures.\nAs additional safety measure the notary contract will be deployed both on Pirl and Ethereum blockchains.\nIncreasing the amount of required confirmations for exchanges. An additional measure that will be implemented is a higher requirement of block confirmations on exchanges to validate deposits. Another step towards making an attack close to impossible and not even worth an attackers time.\nOpen Source Pirl has so far contributed to blockchain by developing the first Ethash code based masternode network, the first private IPFS implementation running over a masternode network and is currently working on their own private encrypted blockchain storage solution. The PirlGuard Security Protocol will be added to our open source library along with the core of the project. At Pirl we are developing to revolutionize and streamline blockchain technology for the entire blockchain industry. This means our code will be available to anyone to study, educate, test, modify or apply towards their own blockchain network security against future 51% attacks.\nSource Code: Website:\n#PirlTogetherStrong\nYours,\nPirl Team\nAuthor(s):\n@Fawkes\nContributor():\n@dptelecom\n"
},
{
	"uri": "https://pirl.live/ipns/QmVKFJs81erni4KV6Hzt2xVwGtC2P1WtE9A4MxNThFVFVh/en/press-releases/",
	"title": "Press releases",
	"tags": [],
	"description": "",
	"content": " \u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt; HEAD ======= content \u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt; local_version\nPress releases 1.) In Depth Review by the Altlook  2.) Proof of review  3.) PirlGuard at the press and other projects using the PirlGuard solution  Author(s):\n@dptelecom\nContributor():\n"
},
{
	"uri": "https://pirl.live/ipns/QmVKFJs81erni4KV6Hzt2xVwGtC2P1WtE9A4MxNThFVFVh/en/solidity/rpc-sub/",
	"title": "RPC Subscriptions",
	"tags": [],
	"description": "",
	"content": " Introduction experimental support for pub/sub using subscriptions as defined in the JSON-RPC 2.0 specification. This allows clients to wait for events instead of polling for them.\nIt works by subscribing to particular events. The node will return a subscription id. For each event that matches the subscription a notification with relevant data is send together with the subscription id.\nExample:\n// create subscription \u0026gt;\u0026gt; {\u0026quot;id\u0026quot;: 1, \u0026quot;method\u0026quot;: \u0026quot;eth_subscribe\u0026quot;, \u0026quot;params\u0026quot;: [\u0026quot;newHeads\u0026quot;, {}]} \u0026lt;\u0026lt; {\u0026quot;jsonrpc\u0026quot;:\u0026quot;2.0\u0026quot;,\u0026quot;id\u0026quot;:1,\u0026quot;result\u0026quot;:\u0026quot;0xcd0c3e8af590364c09d0fa6a1210faf5\u0026quot;} // incoming notifications \u0026lt;\u0026lt; {\u0026quot;jsonrpc\u0026quot;:\u0026quot;2.0\u0026quot;,\u0026quot;method\u0026quot;:\u0026quot;eth_subscription\u0026quot;,\u0026quot;params\u0026quot;:{\u0026quot;subscription\u0026quot;:\u0026quot;0xcd0c3e8af590364c09d0fa6a1210faf5\u0026quot;,\u0026quot;result\u0026quot;:{\u0026quot;difficulty\u0026quot;:\u0026quot;0xd9263f42a87\u0026quot;,\u0026lt;...\u0026gt;, \u0026quot;uncles\u0026quot;:[]}}} \u0026lt;\u0026lt; {\u0026quot;jsonrpc\u0026quot;:\u0026quot;2.0\u0026quot;,\u0026quot;method\u0026quot;:\u0026quot;eth_subscription\u0026quot;,\u0026quot;params\u0026quot;:{\u0026quot;subscription\u0026quot;:\u0026quot;0xcd0c3e8af590364c09d0fa6a1210faf5\u0026quot;,\u0026quot;result\u0026quot;:{\u0026quot;difficulty\u0026quot;:\u0026quot;0xd90b1a7ad02\u0026quot;, \u0026lt;...\u0026gt;, \u0026quot;uncles\u0026quot;:[\u0026quot;0x80aacd1ea4c9da32efd8c2cc9ab38f8f70578fcd46a1a4ed73f82f3e0957f936\u0026quot;]}}} // cancel subscription \u0026gt;\u0026gt; {\u0026quot;id\u0026quot;: 1, \u0026quot;method\u0026quot;: \u0026quot;eth_unsubscribe\u0026quot;, \u0026quot;params\u0026quot;: [\u0026quot;0xcd0c3e8af590364c09d0fa6a1210faf5\u0026quot;]} \u0026lt;\u0026lt; {\u0026quot;jsonrpc\u0026quot;:\u0026quot;2.0\u0026quot;,\u0026quot;id\u0026quot;:1,\u0026quot;result\u0026quot;:true}  Considerations  notifications are send for current events and not for past events. If your use case requires you not to miss any notifications than subscriptions are probably not the best option. subscriptions require a full duplex connection. Pirl offers such connections in the form of websockets (enable with \u0026ndash;ws) and ipc (enabled by default). subscriptions are coupled to a connection. If the connection is closed all subscriptions that are created over this connection are removed. notifications are stored in an internal buffer and sent from this buffer to the client. If the client is unable to keep up and the number of buffered notifications reaches a limit (currently 10k) the connection is closed. Keep in mind that subscribing to some events can cause a flood of notifications, e.g. listening for all logs/blocks when the node starts to synchronize.  Create subscription Subscriptions are creates with a regular RPC call with eth_subscribe as method and the subscription name as first parameter. If successful it returns the subscription id.\nParameters  subscription name optional arguments  Example \u0026gt;\u0026gt; {\u0026quot;id\u0026quot;: 1, \u0026quot;method\u0026quot;: \u0026quot;eth_subscribe\u0026quot;, \u0026quot;params\u0026quot;: [\u0026quot;newHeads\u0026quot;, {\u0026quot;includeTransactions\u0026quot;: true}]} \u0026lt;\u0026lt; {\u0026quot;id\u0026quot;: 1, \u0026quot;jsonrpc\u0026quot;: \u0026quot;2.0\u0026quot;, \u0026quot;result\u0026quot;: \u0026quot;0x9cef478923ff08bf67fde6c64013158d\u0026quot;}  Cancel subscription Subscriptions are cancelled with a regular RPC call with eth_unsubscribe as method and the subscription id as first parameter. It returns a bool indicating if the subscription was cancelled successful.\nParameters  subscription id  Example \u0026gt;\u0026gt; {\u0026quot;id\u0026quot;: 1, \u0026quot;method\u0026quot;: \u0026quot;eth_unsubscribe\u0026quot;, \u0026quot;params\u0026quot;: [\u0026quot;0x9cef478923ff08bf67fde6c64013158d\u0026quot;]} \u0026lt;\u0026lt; {\u0026quot;jsonrpc\u0026quot;:\u0026quot;2.0\u0026quot;,\u0026quot;id\u0026quot;:1,\u0026quot;result\u0026quot;:true}  Supported subscriptions newHeads Fires a notification each time a new header is appended to the chain, including chain reorganizations. Users can use the bloom filter to determine if the block contains logs that are interested to them.\nIn case of a chain reorganization the subscription will emit all new headers for the new chain. Therefore the subscription can emit multiple headers on the same height.\nExample  \u0026gt;\u0026gt; {\u0026quot;id\u0026quot;: 1, \u0026quot;method\u0026quot;: \u0026quot;eth_subscribe\u0026quot;, \u0026quot;params\u0026quot;: [\u0026quot;newHeads\u0026quot;]} \u0026lt;\u0026lt; {\u0026quot;jsonrpc\u0026quot;:\u0026quot;2.0\u0026quot;,\u0026quot;id\u0026quot;:2,\u0026quot;result\u0026quot;:\u0026quot;0x9ce59a13059e417087c02d3236a0b1cc\u0026quot;} \u0026lt;\u0026lt; { \u0026quot;jsonrpc\u0026quot;: \u0026quot;2.0\u0026quot;, \u0026quot;method\u0026quot;: \u0026quot;eth_subscription\u0026quot;, \u0026quot;params\u0026quot;: { \u0026quot;result\u0026quot;: { \u0026quot;difficulty\u0026quot;: \u0026quot;0x15d9223a23aa\u0026quot;, \u0026quot;extraData\u0026quot;: \u0026quot;0xd983010305844765746887676f312e342e328777696e646f7773\u0026quot;, \u0026quot;gasLimit\u0026quot;: \u0026quot;0x47e7c4\u0026quot;, \u0026quot;gasUsed\u0026quot;: \u0026quot;0x38658\u0026quot;, \u0026quot;logsBloom\u0026quot;: \u0026quot;0xu0026quot;, \u0026quot;miner\u0026quot;: \u0026quot;0xf8b483dba2c3b7176a3da549ad41a48bb3121069\u0026quot;, \u0026quot;nonce\u0026quot;: \u0026quot;0x084149998194cc5f\u0026quot;, \u0026quot;number\u0026quot;: \u0026quot;0x1348c9\u0026quot;, \u0026quot;parentHash\u0026quot;: \u0026quot;0x7736fab79e05dc611604d22470dadad26f56fe494421b5b333de816ce1f25701\u0026quot;, \u0026quot;receiptRoot\u0026quot;: \u0026quot;0x2fab35823ad00c7bb388595cb46652fe7886e00660a01e867824d3dceb1c8d36\u0026quot;, \u0026quot;sha3Uncles\u0026quot;: \u0026quot;0x1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347\u0026quot;, \u0026quot;stateRoot\u0026quot;: \u0026quot;0xb3346685172db67de536d8765c43c31009d0eb3bd9c501c9be3229203f15f378\u0026quot;, \u0026quot;timestamp\u0026quot;: \u0026quot;0x56ffeff8\u0026quot;, \u0026quot;transactionsRoot\u0026quot;: \u0026quot;0x0167ffa60e3ebc0b080cdb95f7c0087dd6c0e61413140e39d94d3468d7c9689f\u0026quot; }, \u0026quot;subscription\u0026quot;: \u0026quot;0x9ce59a13059e417087c02d3236a0b1cc\u0026quot; } }  logs Returns logs that are included in new imported blocks and match the given filter criteria.\nIn case of a chain reorganization previous sent logs that are on the old chain will be resend with the removed property set to true. Logs from transactions that ended up in the new chain are emitted. Therefore a subscription can emit logs for the same transaction multiple times.\nParameters  object with the following (optional) fields  address, either an address or an array of addresses. Only logs that are created from these addresses are returned (optional) topics, only logs which match the specified topics (optional)   Example \u0026gt;\u0026gt; {\u0026quot;id\u0026quot;: 1, \u0026quot;method\u0026quot;: \u0026quot;eth_subscribe\u0026quot;, \u0026quot;params\u0026quot;: [\u0026quot;logs\u0026quot;, {\u0026quot;address\u0026quot;: \u0026quot;0x8320fe7702b96808f7bbc0d4a888ed1468216cfd\u0026quot;, \u0026quot;topics\u0026quot;: [\u0026quot;0xd78a0cb8bb633d06981248b816e7bd33c2a35a6089241d099fa519e361cab902\u0026quot;]}]} \u0026lt;\u0026lt; {\u0026quot;jsonrpc\u0026quot;:\u0026quot;2.0\u0026quot;,\u0026quot;id\u0026quot;:2,\u0026quot;result\u0026quot;:\u0026quot;0x4a8a4c0517381924f9838102c5a4dcb7\u0026quot;} \u0026lt;\u0026lt; {\u0026quot;jsonrpc\u0026quot;:\u0026quot;2.0\u0026quot;,\u0026quot;method\u0026quot;:\u0026quot;eth_subscription\u0026quot;,\u0026quot;params\u0026quot;: {\u0026quot;subscription\u0026quot;:\u0026quot;0x4a8a4c0517381924f9838102c5a4dcb7\u0026quot;,\u0026quot;result\u0026quot;:{\u0026quot;address\u0026quot;:\u0026quot;0x8320fe7702b96808f7bbc0d4a888ed1468216cfd\u0026quot;,\u0026quot;blockHash\u0026quot;:\u0026quot;0x61cdb2a09ab99abf791d474f20c2ea89bf8de2923a2d42bb49944c8c993cbf04\u0026quot;,\u0026quot;blockNumber\u0026quot;:\u0026quot;0x29e87\u0026quot;,\u0026quot;data\u0026quot;:\u0026quot;0x00000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000003\u0026quot;,\u0026quot;logIndex\u0026quot;:\u0026quot;0x0\u0026quot;,\u0026quot;topics\u0026quot;:[\u0026quot;0xd78a0cb8bb633d06981248b816e7bd33c2a35a6089241d099fa519e361cab902\u0026quot;],\u0026quot;transactionHash\u0026quot;:\u0026quot;0xe044554a0a55067caafd07f8020ab9f2af60bdfe337e395ecd84b4877a3d1ab4\u0026quot;,\u0026quot;transactionIndex\u0026quot;:\u0026quot;0x0\u0026quot;}}}  newPendingTransactions Returns the hash for all transactions that are added to the pending state and are signed with a key that is available in the node.\nWhen a transaction that was previously part of the canonical chain isn\u0026rsquo;t part of the new canonical chain after a reogranization its again emitted.\nParameters none\nExample \u0026gt;\u0026gt; {\u0026quot;id\u0026quot;: 1, \u0026quot;method\u0026quot;: \u0026quot;eth_subscribe\u0026quot;, \u0026quot;params\u0026quot;: [\u0026quot;newPendingTransactions\u0026quot;]} \u0026lt;\u0026lt; {\u0026quot;jsonrpc\u0026quot;:\u0026quot;2.0\u0026quot;,\u0026quot;id\u0026quot;:2,\u0026quot;result\u0026quot;:\u0026quot;0xc3b33aa549fb9a60e95d21862596617c\u0026quot;} \u0026lt;\u0026lt; { \u0026quot;jsonrpc\u0026quot;:\u0026quot;2.0\u0026quot;, \u0026quot;method\u0026quot;:\u0026quot;eth_subscription\u0026quot;, \u0026quot;params\u0026quot;:{ \u0026quot;subscription\u0026quot;:\u0026quot;0xc3b33aa549fb9a60e95d21862596617c\u0026quot;, \u0026quot;result\u0026quot;:\u0026quot;0xd6fdc5cc41a9959e922f30cb772a9aef46f4daea279307bc5f7024edc4ccd7fa\u0026quot; } }  syncing Indicates when the node starts or stops synchronizing. The result can either be a boolean indicating that the synchronization has started (true), finished (false) or an object with various progress indicators.\nParameters none\nExample \u0026gt;\u0026gt; {\u0026quot;id\u0026quot;: 1, \u0026quot;method\u0026quot;: \u0026quot;eth_subscribe\u0026quot;, \u0026quot;params\u0026quot;: [\u0026quot;syncing\u0026quot;]} \u0026lt;\u0026lt; {\u0026quot;jsonrpc\u0026quot;:\u0026quot;2.0\u0026quot;,\u0026quot;id\u0026quot;:2,\u0026quot;result\u0026quot;:\u0026quot;0xe2ffeb2703bcf602d42922385829ce96\u0026quot;} \u0026lt;\u0026lt; {\u0026quot;subscription\u0026quot;:\u0026quot;0xe2ffeb2703bcf602d42922385829ce96\u0026quot;,\u0026quot;result\u0026quot;:{\u0026quot;syncing\u0026quot;:true,\u0026quot;status\u0026quot;:{\u0026quot;startingBlock\u0026quot;:674427,\u0026quot;currentBlock\u0026quot;:67400,\u0026quot;highestBlock\u0026quot;:674432,\u0026quot;pulledStates\u0026quot;:0,\u0026quot;knownStates\u0026quot;:0}}}}  Possible future subscription:  balance changes account changes nonce changes storage changes in contracts  Author(s):\n@Fawkes\nContributor(s):\n@Dptelecom\n"
},
{
	"uri": "https://pirl.live/ipns/QmVKFJs81erni4KV6Hzt2xVwGtC2P1WtE9A4MxNThFVFVh/en/wallets/send-pirl-from-ether-web-wallet/",
	"title": "Send Pirl from Ether web wallet",
	"tags": [],
	"description": "",
	"content": " Introduction This Kb article will explain how to send Pirl from your Ether wallet to another address of your choosing. There are many ways to access your Ether wallet. View with address only, Meta mask/mist, Ledger wallet, TREZOR, Keystore JSON File, Mnemonic Phrase and Private key. We will be Accessing our wallet through the Private key option for this article. Please note this option is not the most secure way to store your Pirl coins and therefore is not recommended. wallet.pirl.io does not hold your keys for you. We cannot access accounts, recover keys, reset passwords, nor reverse transactions. Protect your keys \u0026amp; always check that you are on correct URL. You are responsible for your security.\nNote All the photos in this article are being hosted on Pirls own If you want to learn more, please click this link.\nHow to send Pirl from Ether web wallet  Go to https://wallet.pirl.io/ .If you haven’t created a wallet already click [here](). If you have created a wallet using the private key function and want to learn how to send a Pirl coin continue.   Click Send Ether \u0026amp; Tokens.   Click on the Private key option.   Enter your private key that you have safely stored. Click Unlock.  On this page please note on the right-hand side; your account address, account balance and transaction history.\n Enter the address you want to send the Pirl to Enter the amount of Pirl you want to send Click Generate Transaction   Click Send transaction   Click Yes, I am sure! Make transaction (If you have made a mistake this is your last chance click NO, get me out of here!) That’s it You can check Pirl Poseidon to see your transaction history.  Mission Complete!\nOver and out,\nnumnah\nAuthor(s):\n@numnah\nContributor(s):\n"
},
{
	"uri": "https://pirl.live/ipns/QmVKFJs81erni4KV6Hzt2xVwGtC2P1WtE9A4MxNThFVFVh/en/solidity/p2p-protocol/",
	"title": "P2P Protocol",
	"tags": [],
	"description": "",
	"content": "The peer to peer package allows you to rapidly and easily add peer to peer networking to any type of application. The p2p package is set up in a modular structure and extending the p2p with your own additional sub protocols is easy and straight forward.\nStarting the p2p service only requires you setup a p2p.Server{} with a few settings:\nimport \u0026quot;github.com/pirl/pirl/crypto\u0026quot; import \u0026quot;github.com/pirl/pirl/p2p\u0026quot; nodekey, _ := crypto.GenerateKey() srv := p2p.Server{ MaxPeers: 10, PrivateKey: nodekey, Name: \u0026quot;my node name\u0026quot;, ListenAddr: \u0026quot;:30300\u0026quot;, Protocols: []p2p.Protocol{}, } srv.Start()  If we wanted to extend the capabilities of our p2p server we\u0026rsquo;d need to pass it an additional sub protocol in the Protocol: []p2p.Protocol{} array.\nAn additional sub protocol that has the ability to respond to the message \u0026ldquo;foo\u0026rdquo; with \u0026ldquo;bar\u0026rdquo; requires you to setup an p2p.Protocol{}:\nfunc MyProtocol() p2p.Protocol { return p2p.Protocol{ // 1. Name: \u0026quot;MyProtocol\u0026quot;, // 2. Version: 1, // 3. Length: 1, // 4. Run: func(peer *p2p.Peer, ws p2p.MsgReadWriter) error { return nil }, // 5. } }   A sub-protocol object in the p2p package is called Protocol{}. Each time a peer connects with the capability of handling this type of protocol will use this; The name of your protocol to identify the protocol on the network; The version of the protocol. The amount of messages this protocol relies on. Because the p2p is extendible and thus has the ability to send an arbitrary amount of messages (with a type, which we\u0026rsquo;ll see later) the p2p handler needs to know how much space it needs to reserve for your protocol, this to ensure consensus can be reached between the peers doing a negotiation over the message IDs. Our protocol supports only one; message (as you\u0026rsquo;ll see later). The main handler of your protocol. We\u0026rsquo;ve left this intentionally blank for now. The peer variable is the peer connected to you and provides you with some basic information regarding the peer. The ws variable which is a reader and a writer allows you to communicate with the peer. If a message is being send to us by that peer the MsgReadWriter will handle it and vice versa.  Lets fill in the blanks and create a somewhat useful peer by allowing it to communicate with another peer:\nconst messageId = 0 // 1. type Message string // 2. func msgHandler(peer *p2p.Peer, ws p2p.MsgReadWriter) error { for { msg, err := ws.ReadMsg() // 3. if err != nil { // 4. return err // if reading fails return err which will disconnect the peer. } var myMessage [1]Message err = msg.Decode(\u0026amp;myMessage) // 5. if err != nil { // handle decode error continue } switch myMessage[0] { case \u0026quot;foo\u0026quot;: err := p2p.SendItems(ws, messageId, \u0026quot;bar\u0026quot;) // 6. if err != nil { return err // return (and disconnect) error if writing fails. } default: fmt.Println(\u0026quot;recv:\u0026quot;, myMessage) } } return nil }   The one and only message we know about; A typed string we decode in to; ReadMsg waits on the line until it receives a message, an error or EOF. In case of an error during reading it\u0026rsquo;s best to return that error and let the p2p server handle it. This usually results in a disconnect from the peer. msg contains two fields and a decoding method:  Code contains the message id, Code == messageId (i.e., 0) Payload the contents of the message. Decode(\u0026lt;ptr\u0026gt;) is a helper method for: take msg.Payload and decodes the rest of the message in to the given interface. If it fails it will return an error.  If the message we decoded was foo respond with a NewMessage using the messageId message identifier and respond with the message bar. The bar message would be handled in the default case in the same switch.  Now if we\u0026rsquo;d tie this all up we\u0026rsquo;d have a working p2p server with a message passing sub protocol.\npackage main import ( \u0026quot;fmt\u0026quot; \u0026quot;os\u0026quot; import \u0026quot;github.com/pirl/pirl/crypto\u0026quot; import \u0026quot;github.com/pirl/pirl/p2p\u0026quot; ) const messageId = 0 type Message string func MyProtocol() p2p.Protocol { return p2p.Protocol{ Name: \u0026quot;MyProtocol\u0026quot;, Version: 1, Length: 1, Run: msgHandler, } } func main() { nodekey, _ := crypto.GenerateKey() srv := p2p.Server{ MaxPeers: 10, PrivateKey: nodekey, Name: \u0026quot;my node name\u0026quot;, ListenAddr: \u0026quot;:30300\u0026quot;, Protocols: []p2p.Protocol{MyProtocol()}, } if err := srv.Start(); err != nil { fmt.Println(err) os.Exit(1) } select {} } func msgHandler(peer *p2p.Peer, ws p2p.MsgReadWriter) error { for { msg, err := ws.ReadMsg() if err != nil { return err } var myMessage Message err = msg.Decode(\u0026amp;myMessage) if err != nil { // handle decode error continue } switch myMessage { case \u0026quot;foo\u0026quot;: err := p2p.SendItems(ws, messageId, \u0026quot;bar\u0026quot;)) if err != nil { return err } default: fmt.Println(\u0026quot;recv:\u0026quot;, myMessage) } } return nil }  Author(s):\n@Fawkes\nContributor(s):\n@Dptelecom\n"
},
{
	"uri": "https://pirl.live/ipns/QmVKFJs81erni4KV6Hzt2xVwGtC2P1WtE9A4MxNThFVFVh/en/pirl-roundtable-meeting/",
	"title": "Pirl Roundtable Meeting",
	"tags": [],
	"description": "",
	"content": " \u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt; HEAD\n \u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt; local_version\nRound table philosophy of PIRL We in PIRL believe that an active and loyal community is a healthy core of every successful blockchain based project. Thanks to your ideas and constructive critique we can improve, enhance, ameliorate. Thanks to the cardinality of active members we have around our self we can sense the feeling our community cares. At the roundtable, you have great opportunity to reach the developers, high to mid-range managers and mainly the CEO. Thanks to the Round Table sessions which we set for every Saturday afternoon at 11 AM EST (after 5 pm CET), we can show you that we do care as well.\nCome to the Round Table where the voice of each community member has the same value and let us know what your future wishes and momentary doubts are. Come to hear our feedback to your recent contribution and let us reward you for your initiative work we appreciated and welcomed so much. We are looking forward to meeting you there.\nFocus:  Discussing new implementation and innovations for our applications Sharing the testing results and possible outcome for our Beta testing Official announcements and community rewarding Answering Q Sharing our ideas about a future evolvement  For the people and their future; by the people. Join our Discord channel and let\u0026rsquo;s get down to business.\nAuthor: Mickey Maler\nContributor(s): @dptelecom\n"
},
{
	"uri": "https://pirl.live/ipns/QmVKFJs81erni4KV6Hzt2xVwGtC2P1WtE9A4MxNThFVFVh/en/links/",
	"title": "Links",
	"tags": [],
	"description": "",
	"content": " \u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt; HEAD\n \u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt; local_version\nPirlWebsite PirlDocs PirlPools PirlDiscord PirlPoseidon PirlNetwork Pirl on Blockfolio if you want to participate in the future grow and security you can join in with you hash power: PirlTestNetwork Pool. PirlTestNetwork Stats. Author(s):\n@dptelecom\nContributor():\n"
},
{
	"uri": "https://pirl.live/ipns/QmVKFJs81erni4KV6Hzt2xVwGtC2P1WtE9A4MxNThFVFVh/en/solidity/install-win/",
	"title": "Pirl Node - Installing on Win.",
	"tags": [],
	"description": "",
	"content": " Binaries Download stable binaries All versions of Geth are built and available for download at https://git.pirl.io/community/pirl/tags.\nThe download page provides an installer as well as a zip file. The installer puts geth into your PATH automatically. The zip file contains the command .exe files and can be used without installing.\n Download zip file Extract geth.exe from zip Open a command prompt chdir  open geth.exe  Source Compiling pirl-node with tools from chocolatey The Chocolatey package manager provides an easy way to get the required build tools installed. If you don\u0026rsquo;t have chocolatey yet, follow the instructions on https://chocolatey.org to install it first.\nThen open an Administrator command prompt and install the build tools we need:\nC:\\Windows\\system32\u0026gt; choco install git C:\\Windows\\system32\u0026gt; choco install golang C:\\Windows\\system32\u0026gt; choco install mingw  Installing these packages will set up the Path environment variable. Open a new command prompt to get the new Path. The following steps don\u0026rsquo;t need Administrator privileges.\nPlease ensure that the installed Go version is 1.7 (or any later version).\nFirst we\u0026rsquo;ll create and set up a Go workspace directory layout, then clone the source.\nOBS If, during the commands below, you get the following message:\n WARNING: The data being saved is truncated to 1024 characters.  Then that means that the setx command will fail, and proceeding will truncate the Path/GOPATH. If this happens, it\u0026rsquo;s better to abort, and try to make some more room in Path before trying again.\nC:\\Users\\xxx\u0026gt; set \u0026quot;GOPATH=%USERPROFILE%\u0026quot; C:\\Users\\xxx\u0026gt; set \u0026quot;Path=%USERPROFILE%\\bin;%Path%\u0026quot; C:\\Users\\xxx\u0026gt; setx GOPATH \u0026quot;%GOPATH%\u0026quot; C:\\Users\\xxx\u0026gt; setx Path \u0026quot;%Path%\u0026quot; C:\\Users\\xxx\u0026gt; mkdir src\\github.com\\pirl C:\\Users\\xxx\u0026gt; git clone https://git.pirl.io/community/pirl src\\git.pirl.io\\community\\pirl C:\\Users\\xxx\u0026gt; cd src\\github.com\\pirl\\pirl C:\\Users\\xxx\u0026gt; go get -u -v golang.org/x/net/context  Finally, the command to compile pirl node is:\nC:\\Users\\xxx\\src\\git.pirl.io\\community\\pirl\u0026gt; go install -v ./cmd/...  Author(s):\n@Fawkes\nContributor(s):\n@Dptelecom\n"
},
{
	"uri": "https://pirl.live/ipns/QmVKFJs81erni4KV6Hzt2xVwGtC2P1WtE9A4MxNThFVFVh/en/development/",
	"title": "Development",
	"tags": [],
	"description": "",
	"content": " \u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt; HEAD ======= \u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt; local_version\nUpdates about development for Pirl Updates about development for Pirl can be found on the next pages.\n1.) Core 2.) Wallets Author(s):\n@dptelecom\nContributor():\nFawkes thanks buddy for making the header-banner\n"
},
{
	"uri": "https://pirl.live/ipns/QmVKFJs81erni4KV6Hzt2xVwGtC2P1WtE9A4MxNThFVFVh/en/solidity/install-mac/",
	"title": "Pirl Node - Installing on Mac",
	"tags": [],
	"description": "",
	"content": " Building from source Building Pirl (command line client) Clone the repository to a directory of your choosing:\ngit clone https://git.pirl.io/community/pirl  Building pirl requires the Go compiler:\nbrew install go  Finally, build the Pirl program using the following command.\ncd pirl make pirl  If you see some errors related to header files of Mac OS system library, install XCode Command Line Tools, and try again.\nxcode-select --install  You can now run build/bin/Pirl to start your node.\nAuthor(s):\n@Fawkes\nContributor(s):\n@Dptelecom\n"
},
{
	"uri": "https://pirl.live/ipns/QmVKFJs81erni4KV6Hzt2xVwGtC2P1WtE9A4MxNThFVFVh/en/downloads/",
	"title": "Downloads",
	"tags": [],
	"description": "",
	"content": " \u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt; HEAD\n \u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt; local_version\nPirlWebsite PirlDocs PirlApp download: Download here the PirlApp 1.0.3-2 for MacOs. Download here the PirlApp 1.0.3-2 for Windows. PirlWallets: Download here the Pirl Nautilus Wallet-0.9.2 Linux. Download here the Pirl Nautilus Wallet-0.9.2 MacOs. Download here the Pirl Nautilus Wallet-0.9.2 Windows. EZminer: Download and mine Pirl with ezMiner v2.0. Masternode binary: NEW hulk-v1 binary: Masternode hulk-v1 binary. PirlPool software: PirlPool software. PirlPool binary PirlTestnetwork: Phoenix Windows miner 3.5d for testnetwork. Google Authenticator for the two-factor authentication * Play store for Android * App Store for Iphone Author(s):\n@dptelecom\nContributor():\n"
},
{
	"uri": "https://pirl.live/ipns/QmVKFJs81erni4KV6Hzt2xVwGtC2P1WtE9A4MxNThFVFVh/en/solidity/install-arch/",
	"title": "Installing from source",
	"tags": [],
	"description": "",
	"content": " Installing from source Download and build pirl node\ngit clone https://git.pirl.io/community/pirl cd pirl make pirl  Author(s):\n@Fawkes\nContributor(s):\n@Dptelecom\n"
},
{
	"uri": "https://pirl.live/ipns/QmVKFJs81erni4KV6Hzt2xVwGtC2P1WtE9A4MxNThFVFVh/en/pirlcloud/poseidon/changelog/",
	"title": "Poseidon Changelog",
	"tags": [],
	"description": "",
	"content": " \u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt; HEAD\n \u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt; local_version\nAll notable changes to this unique all-in-one platform will be documented in this file. Poseidon Version V2 Added  2FA ( google + sms )\n password reset\n login / logout / subscribe\n masternode detail view ( stats of report and payments + latest blocks )\n accounting ( with pending )\n list of last 30 days\n total pending money\n export masternodes payments as csv\n poseidon check when user add a one-click, I check the connection, if it\u0026rsquo;s CentOS and if it\u0026rsquo;s more or equal to version 7\n validator check if it\u0026rsquo;s a correct tx if it\u0026rsquo;s a correct address and if that\u0026rsquo;s correct it check that this tx was sended to poseidon it check if it\u0026rsquo;s a content or premium masternode ( for user point of view )\n error handling on masternode creation\n wallet ( withdraw )\n user can restart one-click\n  Changed  DISABLE old login url / reset / ( accounts/login ) and set account/login as default\n  Removed -\nUnreleased -\nAuthor(s):\nMasterdubs\nContributor():\n@dptelecom\n"
},
{
	"uri": "https://pirl.live/ipns/QmVKFJs81erni4KV6Hzt2xVwGtC2P1WtE9A4MxNThFVFVh/en/services/",
	"title": "Services",
	"tags": [],
	"description": "",
	"content": " \u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt; HEAD\n \u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt; local_version\nPirlServices  Author(s):\n@dptelecom\nContributor():\n"
},
{
	"uri": "https://pirl.live/ipns/QmVKFJs81erni4KV6Hzt2xVwGtC2P1WtE9A4MxNThFVFVh/en/mailing/",
	"title": "Newsletter signup",
	"tags": [],
	"description": "",
	"content": " \u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt; HEAD\n \u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt; local_version\nNewsletter signup window.dojoRequire([\"mojo/signup-forms/Loader\"], function(L) { L.start({\"baseUrl\":\"mc.us19.list-manage.com\",\"uuid\":\"82b73156e22b2dcf88fb46c98\",\"lid\":\"2c529ef6b9\",\"uniqueMethods\":true}) }) Author(s):\n@dptelecom\nContributor():\n"
},
{
	"uri": "https://pirl.live/ipns/QmVKFJs81erni4KV6Hzt2xVwGtC2P1WtE9A4MxNThFVFVh/en/solidity/",
	"title": "Technical Documentation",
	"tags": [],
	"description": "",
	"content": " \u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt; HEAD\n \u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt; local_version\n1.) Create-token 2.) JSON-RPC-API 3.) Command-line-interface 4.) Management-APIs 5.) Smart-ContractsI 6.) RPC Subscribtions 7.) P2P Protocol 8.) Pirl Node - Installing on Windows 9.) Pirl Node - Installing on Mac 10.) Installing from source Author(s):\n@Fawkes\nContributor(s):\n@Dptelecom\n"
},
{
	"uri": "https://pirl.live/ipns/QmVKFJs81erni4KV6Hzt2xVwGtC2P1WtE9A4MxNThFVFVh/en/bounty-contributions/",
	"title": "Bounty",
	"tags": [],
	"description": "",
	"content": " \u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt; HEAD =======\n\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt; local_version\nIf you are an active part of the Pirl Community and would like to contribute to the project.\nWe would like to welcome you to our Bounty \u0026amp; Contribution initiatives where you can both put your talent to user, help us grow and get rewarded for it!\nOur currently open Bounty Campaigns: 1.) Article-Bounty 2.) Marketing-Bounty For Questions, please Join Discord\nAuthor(s):\n@Fawkes\nContributor(s):\n@Dptelecom\n"
},
{
	"uri": "https://pirl.live/ipns/QmVKFJs81erni4KV6Hzt2xVwGtC2P1WtE9A4MxNThFVFVh/en/pirl-roundtable-meeting/2019-02-23/_index.en.md/",
	"title": "Roundtable 2019-02-23",
	"tags": [],
	"description": "",
	"content": " Round Table 02.23.2019 PIRL ROUNDTABLE MEETING SUMMARY\nDate: February 23, 2019\nParticipants:\n The People  Meeting Agenda:\n Complete transparency\n The idea of the round table meetings is direct communication with the Pirl community.\n  Summary:\nRegular start of meeting banter\n4:45 masterdubs:\nWelcomes the community to the meeting.\nAsk’s the community for questions.\nWe have a new service in place. Phatblinkie will talk about it.\n5:00 Phatblinkie:\nWe get a lot of support requests. They come in at all times of the day or night. They don’t get tracked very well. We have put in a support ticket system. You can email it. It will generate a ticket for you. You can track it. Moving forward there will be service level agreements and for other services we create, this system will help us. It’s part of a bigger picture. The email is\nsupport@pirl.io\n7:00 masterdubs:\nLater there will be a website for this. I want to keep it simple that’s why we’re using the email system for now. If you need to change or are having problems with Poseidon and your two-factor authentication you now have an email you can contact for support. You just need to provide us with your user name and email that is registered with Posedion. We will deactivate it for you please use the email support@pirl.io thanks.\nI want to go over the financial statement for Pirl as it was asked on Twitter. The process for Mauritius was very difficult we made a 40-page business plan. They checked everything. Our finical statements, if we can pay the people. It was very difficult to write this plan; the plan went very deep. Therefore, we are confident.\n10:00 Fawkes:\nThe government of Mauritius has a department of specialist, who’s primary focus is the FinTech companies. They’ve done their research on us. In the business plan we explained how we will expand locally and globally. And our plans for expansions in the years ahead. Why the world needs what Pirl can bring to the table. This is what we need! We’re so excited. Out of all the projects out there, we’re in the batch of the first 5 it means so much to us. Document requirements. Link\n11:45 masterdubs:\nThey did a criminal record and background check.\n13:00 Fawkes:\nFor the people who weren’t in attendance for the last meeting we announce the sandbox license from Mauritius’s. We told the community what it’s about you can check out the last round table for more information.\nWe try to be as transparent as possible even with the Roundtable meetings. All questions are welcome at the roundtables.\n14:50 masterdubs:\nPirlEx won’t be decentralized we will be dealing with fiat. It’s pretty much impossible to be decentralized with Fiat.\n16:30 Fawkes:\nTalk of Binance, how many nodes they hold. They’re holding a permanent consensus. This is not decentralized. To list a coin, it cost’s 100k.\n17:30 masterdubs:\nPirlCloud is coming to the wallets/PirlApp, this is something that we’ve been working on integrating. This is coming soon.\n18:00 Phatblinkie:\nOne of the long-term goals of this project is to deliver content for lots of different things. Blockchain access, file storage access, app access, as well as services built on-top of that. You could store you files right now. There are still somethings to work out on the development end. We still plan to release another MasterNode that will be for private storage, that has yet to be released.\n19:00 Fawkes:\nIt’s not so much a trading platform, more of an exchange. We want easy entry into the eco system. Not so much listing other assets. A good eco system has easy entry. This is what we want. You need easy entry. There will be fees. This is not a trading platform. This is an exchange.\n21:05 masterdubs:\nPirlEx will be the way to swap Pirl to fiat. This is the main goal. PirlEx will be linked to PirlPay for e-commerce and stuff like that. You will be able to split how you get paid 10% in fiat 90% in Pirl, or however you would like to split it.\nRegarding the poll we made on twitter. PirlPay is in the lead, a lot of people want it.\n22:36 Phatblinkie:\nThere is a huge vacuum for online payment services, fiat to crypto that have other services tied to them. Exchanges just want to suck up you funds with all sorts of fees. We’re not trying to do that.\n23:40 Fawkes:\nShout out to @shitcoinsherpa, thanks for the review. Feed back is always welcome. The public storage comes with the marlin network. PirlCloud will have public and private storage. With the content MasterNode we have, the public storage in the future for hosting websites and dApps. For delivering content to the MasterNode network around the globe.\nThe second part of the will be the storage MasterNodes that will provide encrypted private storage. Like google drive through a MasterNode network. Completely encrypted nobody will be holding a copy of the file. It will be the first of its kind.\n26:40 masterdubs:\nPirl documents are now running on our own network.\nPeople will be able to buy more space in the network when it’s ready.\n27:00 Fawkes:\nWe have the hard part done. The way the infrastructure is, that was the hard part. The rest is the front gate.\n27:45 masterdubs:\nYeah, we need to make it use and user friendly. Otherwise people will not use it.\nThere is no timeframe for PirlPay and PirlEx. There are a lot of security checks. There should be a beta ready this year. You will be able to implement it in your web shop. We will use plugins and need to test.\n29:00 Fawkes:\nSecurity is very important. You guys see what’s going on in the industry. This is a huge concern for us and is priority number one. When people’s money and investment are on the line its our job to see that it’s secure. You saw how we handled the 51% attack.\n29:50 masterdubs:\nAbout the 51% attack we’re in discussion with a few other coins to be their security, firewall and monitoring place.\nWe’re working on completely decentralized so it’s slow for the moment. For the moment it will be anonymously you will not require a phone number but in the future you can to retrieve your history. It will require a small fee for the transaction. It’s encrypted and it’s running on the Pirl chain. Each line is a transaction. It will be available for IOS and android. Only you and the guy on the other end have the keys. The information will not be stored in a database. The database is the blockchain.\n35:00 Fawkes:\nWith the blockchain you can send a transaction, in the transaction, you can send text. You can send it not encrypted. You can also build complexly decentralized applications. The message only has 2 access points. There is no main key that holds this information.\n36:00 masterdubs:\nWe want to create an advertisement, so you will use the chat app. Like watch this advertisement receive 10 Pirl to use the PirlChat.\n37:00 Fawkes:\nIt will help with adoption. Right now, the process is very hard. One msg will cost nothing in terms of money. You’re paying for encrypted chat it cost next to nothing in terms of money. Like way less than a penny. We need easier adoption this is one way we can accomplish this. Even with one Pirl you will be able to send a lot of messages. Later on, we will have the fiat gateway then it will be as simple as click here send five dollars and fund your account with x amount of Pirl.\nDecentralized chat, decentralized video sharing platform, decentralized marketplace, easy entry fiat and many other things all off this under one roof.\n44:45 masterdubs:\nPirlChat will be on iOS and android. It will be web based as well.\n47:00 Fawkes:\nOn the PirlApp version you won’t need a MetaMask. You can use it on mobile. There are not many dApp’s on mobile. They don’t have internal functionality for paying the transactions. On PirlApp you will have internal wallet functionality it will be your wallet, you will have access to exchange, video application, video sharing chat encrypted data storage and more.\n53:15 masterdubs:\nWe plan to be POW, of course we could implement other mechanisms, we’re not asic resistant atm, we will work on it in the future. It was a big concern before because of 51 percent attack. We have PirlGuard. https://medium.com/pirl/pirlguard-innovative-solution-against-51-attacks-87dd45aa1109 There are 6 and counting protected by PirlGuard. If you want this ecosystem to advance it must be secure. We want to protect our investor.\nSpread the hash, there are a lot of pools available. MK and Phat are very good pool operators. There are many options for pools. Setting up a pool is easy. Maintaining it is the hard part. It’s kind of like setting up a blockchain. No plans to launch a dev pool.\n57:00\nEnd of meeting banter.\nOver and out,\nnumnah\n Author:\n@numnah\nContributor(s):\n@Dptelecom\n"
},
{
	"uri": "https://pirl.live/ipns/QmVKFJs81erni4KV6Hzt2xVwGtC2P1WtE9A4MxNThFVFVh/en/pirl-roundtable-meeting/2019-02-16/_index.en.md/",
	"title": "Roundtable 2019-02-16",
	"tags": [],
	"description": "",
	"content": " Round Table 02.16.2019 PIRL ROUNDTABLE MEETING SUMMARY\nDate: February 16, 2019\nParticipants:\n The People  Meeting Agenda:\n Complete transparency\n The idea of the round table meetings is direct communication with the Pirl community.\n  Summary:\n4:00 masterdubs:\nAsks the Pirl community for questions.\nPirlEx will be like CoinBase but for Pirl. It will be very simple and nice. There will be two parts to PirlEx. The first part you will put your credit card onto PirlEx and you will buy Pirl. The second part will be a real trading platform with a few coins to trade. We don’t want to be a huge exchange. That’s not the goal. This will help with the all in one platform that we’re creating.\n6:30 Socal:\nKYC- Know Your Customer will be implemented in PirlEx. It’s pretty much the standard around the world currently.\n7:00 masterdubs:\nThis is one of the reasons PirlEx won’t be on Poseidon.\n7:30 Socal:\nCreating PirlEx will make it so the user has an easy to access on ramp to purchase Pirl. This will be part of the all in one package. Also, you won’t have to pay as many fees to do the multiple exchanges it takes to get money to Pirl now.\n8:45 Phatblinkie:\nThere are other reasons for wanting to build PirlEx. Most exchanges charge way too much money to get listed. They often get hacked. Being able to provide our own payment services will be a great addition.\n9:15 masterdubs:\nAnother huge reason is it takes away the fear of being de-listed.\n10:00 Socal:\nHow the pricing will be based is up to the market. We won’t be regulating the price. It will be a free market\n11:00 masterdubs:\nWe don’t want to influence the market because that’s cheating. We don’t want to cheat.\nPirlPay will be like a point of sale.\n11:15 masterdubs:\nThe software that will drive PirlEx is rather complicated we want to implement it all correctly. It will take some time.\n11:45 Socal:\nPirlEx will be paired with USD and the Euro maybe more as time goes on. When PirlEx is live that doesn’t mean we won’t still be on other exchanges. We just want to simplify the process of on ramping onto Pirl.\n13:30 masterdubs:\nThere is a possibility that Egem will be on PirlEx, we will talk to them.\nWhen we release PirlEx it’s not just for Pirl. The purpose is to push Pirl and to push usability. If a token makes sense, we will think about putting it on PirlEx. As for the release date of PirlEx, I won’t say until I know for sure. We want to make sure the security is OK we need it to be 200 percent right.\nIt’s best not to put an ETA on development like this. We don’t want a hard deadline.\n16:30 Fawkes:\nWhat really matters is you guys see the results. When you see results you see that Pirl is growing, the team is growing.\n17:00 masterdubs:\nWe need to take time. It needs to be secure.\n17:20 Fawkes:\nEvery step in the right direction is being worked on.\n18:00 masterdubs:\nAbout the security of PirlEx, the best security are the ones you don’t speak about. We will make some audits it will be a huge point for us.\n18:15 Fawkes:\nWe have a few people on the team that are really into security. MinerAllen, Phat, Victor and George. MinerAllen is a white-hat. If we need to hire a third party to do an audit, we will. It’s top priority for us. We will do everything in our power to keep our people safe.\n20:00 masterdubs:\nAnother idea that we’re pushing. Coins are coming to us to implement PirlGuard. We will do it for a fee. We will charge them in Pirl not in bitcoin, USD or Euro. This is a business case we want to develop. We want to open a security department. We want to offer and develop blockchain security. This is a real business case. This will help with us create more money. More demand for Pirl.\n22:00 Fawkes:\nSteven Segal is now a fan boy of Pirl. He’s an ambassador for the coin that we just implemented PirlGuard on.\n23:00\nEgem team member is in the chat.\n24:00 tresdk:\nIntroduces him self to the team. I’m a graphic designer from the south of Spain. I do web design, 3d graphics, and a little back end and server-side stuff. I want to expand my knowledge of crypto, I love the crypto markets. I have lots of experience in graphic design. I’m here to do work!\n25:00 Fawkes:\nThis is what we’re looking for in the team.\nShoutout to our community!\nShoutout to the Egem community!\n26:45 masterdubs:\nI don’t have any news on Cryptopia. Any news we get from them will be passed onto the community. Chance’s are we will all find out together from their twitter. They say they can open. As far as we know only Ethereum wallets were hacked on Cryptopia. The Pirl funds are still in the Pirl wallet as far as we know.\n28:00 Fawkes:\nWe think all they had exposed are the Ethereum wallets. Link to the wallet here.\n29:00 masterdubs\nIt’s strange how Cryptopia handled everything.\nThe new node is ready. You can check it out on our Gitlab. The node is there you can update. The MasterNode release will be coming in the near future. We will release PirlEx and PirlPay. We will have PirlCloud as well. The goal after that is to market it. We will have an API so people can build on it as well. Gobitcoin is our security department we want to build.\nI want to thank the team and Fawkes for helping me with the business plan. Pirl\u0026rsquo;s new home is in Mauritius. Pirl has a sandbox license. Here is a press release.\n34:00 Fawkes:\nThis is not just an incorporation. It’s one of the first batches of regulatory sandbox licenses. Making Pirl a actual blockchain technology company. We’re one of the first blockchain technology companies. The sandbox license allows the government to be flexible and allow areas of business through blockchain that are not yet regulated. The difference with Malta is they give you a strict license that is regulated. It doesn’t have the flexibility. It gives you a specific license for one thing. The sandbox license allows the company to work with the government to come up with new regulations. There are five company’s in this first batch of licenses.\n36:30 masterdubs:\nI will be moving there. It’s a more open space for Pirl. I have more projects in mind for Pirl but that won’t be for another year. I want to push a blockchain academy. I must move there. I don’t want to make an offshore, I can do that in company in 5 min.\n37:45 Fawkes:\nWe don’t want another offshore company. We want to have a head quarters, work with the government, open things like the blockchain academy. This is just the beginning, it’s a huge milestone for the project.\n38:00 masterdubs:\nIt’s official you can check the website for the documentation. This allows us to be legal to make contracts with other companies to sell or products. It will also allow the community to spend Pirl in real life.\nI will be moving in July. After my wedding.\n41:15 Fawkes:\nEveryone is welcome to come check it out. It will be nice to have co working spaces, the academy and more.\n42:00 masterdubs:\nWe really want to educate people on the blockchain.\nMauritius a nice place. It is a tourist place although the thing with Mauritius is they want to be the financial capital of Africa. This will open a lot of doors. They Have good internet, good financial banking like HSBC so it’s really connected to the world. It’s nice there!\n44:30 Fawkes:\nIn time maybe, we will get some locals to work for Pirl also, some of the team will maybe move as time goes on. But for now, its only dubs moving. Our team can work from anywhere in the world.\nThe team is on multiple different contents.\n47:00 masterdubs:\nThe project has been funded and started by me. I didn’t want to bring in outside investors that I had to answer to. This isn’t a venture capital investment. If you want to help the Pirl project buy some Pirl! The Pirl company won’t hold the Pirl blockchain it will develop the blockchain its two different parts. We’re not a security.\n51:30 Fawkes\nWhat we need to get listed on exchanges, is to show them how we test, show them we’re a legit company and many exchanges want a lot of money.\n52:40 masterdubs:\nWe have some Pirl goods coming out. Starting with stickers for the community. The community is growing. Our team is growing, exciting times ahead.\nOver and out\nnumnah\n Author:\n@numnah\nContributor(s):\n@Dptelecom\n"
},
{
	"uri": "https://pirl.live/ipns/QmVKFJs81erni4KV6Hzt2xVwGtC2P1WtE9A4MxNThFVFVh/en/pirl-roundtable-meeting/2019-02-09/",
	"title": "Roundtable 2019-02-09",
	"tags": [],
	"description": "",
	"content": " \u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt; HEAD\n \u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt; local_version\nRound Table 02.09.2019 PIRL ROUNDTABLE MEETING SUMMARY\nDate: Febuary 9 , 2019\nParticipants:\n The People  Meeting Agenda:\n Complete transparency\n The idea of the round table meetings is direct communication with the Pirl community.\n  Summary:\n1:30\nStart of meeting banter.\n4:30\nThe team is from all around the world Bulgaria, USA, Canada, Belgium, Holland.\n7:00 masterdubs:\nWelcomes the new team members, new members say a few words;\nLyndros: I love computers, I’m new to crypto. Since I was a child I have been working hard. I’ve had several companies. I’ve worked on many different projects. Now I’m looking for new challenges. That’s why I’m here! Thank you for letting me join the team.\n10:30 Fawkes:\nKeeping your information private in crypto is fine, it’s a new industry, everyone starts somewhere, sometimes you don’t want exposure.\nNiklas-e; I’m from Finland I’ve been doing web development for 8 years in a full-stack roll. For around 4 years I’ve been involved in architectural designee, so I know a little bit from that end as well. Web development as well.\n12:30 Fawkes:\nThis was a part of the team were missing, all the suggestions about the website and the revamp. Niklas-e is now here to help with this stuff. If you have any other suggestions for the site, please share it with us.\n13:00 masterdubs:\nnumnah has also joined the team although he’s not so new numnah’s now part of the team.\nnumnah: Friendly Canadian here, not as tech as most of you. Owned a chain of skateboard, snowboard shops in Canada for 15 years. Took break from the industry and went to complete an IT course through Google. Got into crypto and investing, started doing some docs and writing the round table meetings for Pirl. Also learned Markdown to help with being a contributor.\n15:30 Fawkes:\nThe team is growing, it’s very exciting. There is a lot to do. This allows for a lot of growth in the future. This is the right time to be growing. We’re very optimistic on how this technology is growing, not only blockchain but the way Pirl utilizes the blockchain with all the other layers to help make it decentralized. With content hosting and the MasterNodes, in general the future is coming with encrypted storage. These are things we don’t have to repeat.\nIf there are questions that are not in the FAQ. You can ask me @Fawkes and I can reward you for the question if it’s a relevant question.\nYou can style this and put it as a document and you will receive 100 Pirl for this contribution to documents. You can also upload it to the GIT @Dptelecome can help with this.\nThere is a guide inside the documents that describes how you can contribute. https://docs.pirl.io/en/getting-started/how-to-contribute/\n19:40 masterdubs:\nAbout the country where the company will be located. I received some papers this week I shared them with the team. I will share more with the Pirl community next week.\n20:00 Fawkes:\nTo help with the docs, it’s a Hugo implementation. It’s quite simple if you check out the docs.\n20:30 masterdubs:\nThe company is on a good track to be completed.\n21:00 Phatblinkie:\nmasterdubs has shared with the team the location of the company. We can validate it’s website is listing Pirl. We can’t divulge where it’s located yet. First person to find the publication will get 500 pirl from phatblinkie if you guess right.\n22:14 masterdubs:\nIn total this could take around 3 weeks to get all the documents in order.\n24:00 MinerAllen:\nWe don’t manage or talk to Cryptopia, don’t hold your coins on an exchange. Do your transfers and get it off the exchanges so you don’t have to worry about it getting stuck.\n24:35 masterdubs:\nPirlEx will be basically be CoinBase but for Pirl. Just swap your token for money or money for token. We don’t want to make a Binance type of exchange.\nIt’s not a trading platform so much more like an actual exchange. You will be able to trade for a couple of different coins because we need volume for the exchange. It will not be a trading platform. We shouldn’t have any problems in terms of dealing with other countries.\n26:45 Fawkes:\nIf you want to build something on the Pirl network you can contact the Pirl team, we can help with any information needed.\nWe have opened bounties for documentation. We are always open to community contributions. This project is for the people by the people ever since it was created.\n1) Never keep your coins on an exchange.\n2) Spread the hash if you’re a miner, this helps with decentralization.\n3) Never mine to an exchange.\nThese are the 3 Golden rules!\nWattpool is new. Check it out.\n30:00 Phatblinkie:\nI think it would be cool if somebody made a music sharing service.\n30:22 masterdubs:\nYou could do something like that using Posedion and smart contracts. It’s kind of like PirlTube.\n30:45 Fawkes:\nWe’re looking for a UI and a UEx guy if anybody knows send them our way. We’re short on this. We have a couple applications that are ready to come out of beta, we have the backend. We need to get as close to traditional user experience as possible. we don\u0026rsquo;t want people to feel so alienated when experiencing blockchain technology.\n34:00 masterdubs:\nMeeting over! Shout out to all the new guys. Bye\nOver and out, numnah\nOver and out,\nNumnah\n Author:\n@numnah\nContributor(s):\n@Dptelecom\n"
},
{
	"uri": "https://pirl.live/ipns/QmVKFJs81erni4KV6Hzt2xVwGtC2P1WtE9A4MxNThFVFVh/en/pirl-roundtable-meeting/2019-02-02/",
	"title": "Roundtable 2019-02-02",
	"tags": [],
	"description": "",
	"content": " \u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt; HEAD\n \u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt; local_version\nRound Table 02.02.2019 PIRL ROUNDTABLE MEETING SUMMARY\nDate: 2, 2, 2019\nParticipants:\n The People  Meeting Agenda:\n Complete transparency\n The idea of the round table meetings is direct communication with the Pirl community.\n  Summary:\n7:00\nStart of meeting banter.\n8:00 Fawkes:\nAsks community for questions. On the Pirl end it has been a week of work. Not many new things to show. (Maybe)\nIn terms of the exchange we have the government approval. We will be getting incorporated with this approval. We are very close to the end of the proposal.\nOnce we’re approved we will do another round of applications to exchanges. After all the documentation is ready with legal status there is no reason any exchange should not approve of us. We have a product and a working chain.\nIncorporation will be done soon\n12:30 masterdubs:\nThe current exchange to use is Stex.com it’s safe, don’t leave your money on the exchanges. We also unlocked system coin, be careful with them and any other exchange. Keep your money in your wallet.\n15:00 [0x1337]:\nPirlGuard is there, it’s ready it doesn’t need any work. PirlTube will be out of beta very soon. PirlCloud and Poseidon are getting a lot of attention from our team. There is lots being done with a very small team.\n15:45 Fawkes:\nWe commit to getlab, we rank number 7 out of 900 crypto projects. Our dev team is small. Lots is still in beta. Lots of proof of concepts are being built. PirlTube has had some massive upgrades and will be out of beta. PirlCloud is a proof of our network and its capability’s. We gave it to you not because it’s ready but because your part of the community. So, we’re testing and making it better and better as a community. This helps it be a community product.\n17:30 masterdubs:\nThis is a product for all of us. We get community feedback. We know what we need to improve. We’re a small team. We don’t have an ICO and we still develop.\n19:00 MinerAllen:\nI’m really impressed with the Pirl team and what’s going on compared to some of the other crypto teams out there. Many are failing because of lack of funding. Our team is dedicated to Crypto and not getting rich quick.\n20:00 Fawkes:\nWe get help from the community, numnah on the Docs and Nicolas on the website and other web development. As well MK with his support.\n20:30 [0x1337]\nWe don’t need a 100-man team and 900 million per month. Things are getting done with Pirl.\n21:40 masterdubs:\nIf you want to spend lots of money, it’s easy. Even if you don’t need it. Money can go fast so some time we have to say no we can’t do that. It’s important to survive.\nPirltube has a lag because I haven’t deployed the update. I need to fix some problems. I will update it soon. PirlCloud will drive usage you will be able to host your website, your content and your CDN. With that we can reach enterprise level. We will be able to make contracts with them. This will open up PirlPay with the fiat gateway. This will help the mainstream with adoption. We want to reach outside the crypto community.\n24:45 Phatblinie:\nSo, this can be helpful. You can go to a site to host your website on a decentralized chain with an IPFS back end shared with thousands of nodes. Being able to have a fiat gateway right there turns end users that don’t know anything about block chain turns Pirl into the equivalent to buying credit, so they can start doing what they want to do without having to signup on a exchange or buy Pirl some other way or mine it. Instead the just use their credit card.\n25:30 Fawkes:\nThis is a different way to do business. There is a huge conventional market for stuff like this but in terms of decentralized markets nothing close to the conventional one. This is an interesting technology that can be used in other markets other than crypto. We’re entering a different business sphere. This is good because of the bear markets, this helps with different sources of income for the company.\n26:40 masterdubs:\nThe license is the license for the exchange. It can convert crypto to fiat. The company will open our doors for business.\n27:00 Fawkes:\nMore information will come out soon on an update of Pirl as a whole, stay tuned. You can’t have the name of files on IPFS it’s only the Hash. Soon you will have a dedicated hash where you can put everything. Otherwise its not possible.\nSomeone from the community can make a browser if they want. There are opensource browsers.\n28:30 Phat:\nFile extensions get lost in translation. There is a way to fix this problem in the future. IPNS is a kind of name server. You will get your own private hash and you will upload the folders.\n29:00\nThe ending hash you use will have the file extension on it. This will make it work a lot better.\n29:40 masterdubs:\nThe road map is pretty much up to date. The roadmap isn’t fixed it’s always changing. We might update it a little bit.\n31:11 MinerAllen:\nAll the roundtables have been uploaded to PirlTube. A lot of bugs were fixed this week on PirlTube.\n32:00 masterdubs:\nWe have started the exchange coding. Here is the first draft. There is no ICO, it’s just us coding as normal. The name will be PirlEx.com. I will enable crypto just to test, after the testing we will enable to the gateway to fiat. This exchange will be the central point with the api, this means you will be able to interact with it, conversion services and so. The exchange is built from scratch, we hope to build it fast as f*ck. Our goal isn’t to beat Binance, our goal is to be secure and to be reliable. We want to make a user-friendly environment. Also, when an exchange goes down we don’t have to worry anymore.\n34:00 Fawkes:\nAlways the case with Pirl, people keep on asking how we plan to beat YouTube with PirlTube? We don’t, the plan is to build a complete ecosystem and complete experience. So, when you are in the Pirl ecosystem you have Pirl to fiat exchange, video sharing platform, messaging systems, PirlCloud, content, blogs with no political censorship. We don’t want to beat anybody like amazon or Youtube. We just want to make a complete ecosystem for the Pirl users.\n35:15 masterdubs:\nIt will be a hybrid we don’t want to release to much detail. It will be used as an exchange but all Pirl services will revolve around. A bit like Coinbase. There will also be Pirl exchange where you trade and so on. You need both because you need the exchange to get the volume to be able to swap the coin. PirlExchange will support other coins. We need to pick some good coins. We don’t plan to put big fees either we don’t care about that, we also don’t want to list all the coins in the world. Other coins will be listed to get more volume.\nThis is a entry and a exit of the eco-system. Contributions for the docs are welcome. There is documentation on how to do documentation. Translating documentation is the next step. In term of security and our exchange we have Phat and MinerAllen who both have their security. We have a great team.\n45:30 Fawkes:\nThere is no unbreakable system. There are good practices in security. There are a lot of people that can help us in and outside the team.\n45:45 masterdubs:\nAbout the cold wallet, sometimes I prefer to say you will have you withdraw in 12 hrs people will know it from the start. But I prefer people unhappy and keep them secure rather than have a security breach then nobody is happy.\n46:00 [0x1337]\nWe were approached by a researcher wanting money to attack our system. He talked about the 51 percent attack then a sybill attack. This attack wont work because of our MasterNode network, ddos is hated. Its very hard with Pirl because of our network. PirlGuard secures our network. It can be a platform for other networks. The Cybill attack didn’t work on our network because it’s very healthy and all the MasterNodes. Thanks for the attack and then telling us. Thanks for the free test.\n51:00 Fawkes:\nPirlGuard is now on 4 other chains. More talk of attacking.\n52:00 masterdubs:\nEven if we have the best product in the world we will still be always updating being active rather than re active.\n53:00 Fawkes:\nIt’s always a race. All that matters is you trust the people behind the technology who handle it. We never want to say something is un hackable. You never know what will happen. 51 percent attack on us was good as it shows how we can react when we need to.\n54:00 [0x1337]\nYes, it’s true nothing is un-hackable. With blockchain things are immutable so the goal is to tighten things up. We’ve done this, we will continue to-do this in the future. We have a good start. We’re proud of not only PirlGuard but also how many nodes we have and this comes from the Pirl community.\n55:30 Fawkes:\nAlmost every chain is getting attacked right now.\n55:40 MinerAllen:\nI saw this coming a while ago when a company dropped the stats on how much it would cost to 51 percent attack different POW coins.\n57:00 Fawkes:\nIt’s estimated 3-5 million on cryptopia. 44 percent locked up in nodes. 200k Pirl on stex.\nOver and out,\nNumnah\n Author:\n@numnah\nContributor(s):\n@Dptelecom\n"
},
{
	"uri": "https://pirl.live/ipns/QmVKFJs81erni4KV6Hzt2xVwGtC2P1WtE9A4MxNThFVFVh/en/pirl-roundtable-meeting/2019-01-26/",
	"title": "Roundtable 2019-01-26",
	"tags": [],
	"description": "",
	"content": " \u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt; HEAD\n \u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt; local_version\nRound Table 26.01.2019 PIRL ROUNDTABLE MEETING SUMMARY\nDate: January 26, 2019\nParticipants:\n The People  Meeting Agenda:\n Complete transparency\n The idea of the round table meetings is direct communication with the Pirl community.\n  Summary:\n﻿4:00 masterdubs:\nHi everybody\nHappy birthday to Dennis DPtelecom.\nAsks community for questions.\nAs for the country that the company is located I don’t want to disclose the location of the company just yet. We got the company license, this is cool! It allows us to do everything we want to do. There are 2 steps. First, we need to start the company and complete all legal requirements.\nAfter that we can then start working on PirlPay e-comers will be able to do fiat to crypto then crypto to fiat using Pirl directly. This will be a complete package, we will be able to provide a lot of services for the Pirl community. So, the news of the company doesn’t seem big, but in truth in a really big deal it makes us free to continue our business.\nThis is a new service that will be disclosed and started by us. We must start small and then we will adjust. There is still lots of work to do with the company. Lots of paperwork, set up an office. I plan to move there. We will target the biggest e-comers plugins. We will try integration one on one. This will be open source.\n11:00 Phat:\nWe want wide spread adoption. We must start somewhere. It can’t start with amazon or Ebay plus were creating the product. We’re just getting on the road to start putting our own stuff out there to start creating some sort of market value. Without doing any other crazy tricks that other coins do.\n12:00 masterdubs:\nIt will be easy to use plug ins. You will be able to have a mobile app that you can take payments receive payments and so on. It will be easy to use. You can also partition the way you receive payments 10 percent fiat 90 percent Pirl if you want. We will also integrate \u0026lsquo;know your customer\u0026rsquo;.\nAs far as other coins that are doing the same thing as Pirl, we don’t know if there is anybody else out there doing the same stuff as us.\n13:45 Phat:\nThe registered company that we have allows us to form legal partnerships with legit companies. The future api that we develop will be open source. We want to start a Pirl exchange. First step is building the platform.\n14:15 masterdubs:\nFor the exchange the first step is to make it. We will put Pirl on the exchange. Then after that if there are coins that have value, real value with a good development core team with uniqueness. We will help them. We don’t want to be the next shit exchange.\n15:00 Phat:\nOur chain will work the with arc 20 tokens. We should eventually get some on our chain. If you’re going to create a token, you want the backing layer to be very large that’s world wide with as many nodes as possible. Currently Pirl has about 1000 nodes backing up its system. We have been around for over a year and have legal company backing us. There are not a lot of ethash coins that can boast what we have. We want tokens to come in. We want people to make games and apps things that are real world deliverable. If anybody knows or wants to make a token, please do.\n16:20 masterdubs:\nWe are still making lots of improvements. Example, now we have released a new node version with lots of bug fixes. Some people are calling crypto the wild west. For Pirl its not the wild west other coins are about hype because they say they will do this that and that. Then they only accomplish 10 percent of what they say. This is not the goal of Pirl. Therefore, we went with a legal company. This will help provide security for our users.\nPirl is now in a completely new world. The second part of the plan is adoption, now we can reach this with PirlPay and our fiat gateway.\nWe will now be able to sell to companies. We will be able to invoice them. We couldn’t do this before without the company. We have more endpoints than Microsoft. This is a massive step for Pirl and all the MasterNode holders as you will be getting more rewards. We have an enterprise class network.\nWhen we talk about security tokenization you talk about company shares. We will have a new PirlApp version coming out for both windows and mac.\nWe want real feedback from real people about our products. We don’t care about advertising at them moment. Tell the real facts about what we do. What you love about it and spread the news. If you go to PirlTube.com there should be a link there with a button share.\n24:00 masterdubs:\nWe will have some websites for testing coming. The perks of a company like stated above, we will be able to sign legal contracts and provide more services. We can make an exchange fiat to crypto or vise versa and make it, so it’s used everywhere.\nPhat shares his site hosted Ipfs. No plans or contracts in terms of e-commers. We will have plugins, we will need to test.\nPoseidon shows lots of stats about the MasterNode. Yes, we’re thinking about a real decentralized exchange, but its not the main priority at the moment. It will be included in PirlServices later. Most counties will be allowed Fiat to crypto. Very little will be excluded.\nStorage MasterNode will happen later this year. There is lots of work to be done on it as we must develop the IPFS part of it not until after the summer.\n31:50 [0x1337]:\nMimbleWimble is interesting. For the moment were looking into it. I have been looking into since the beginning of it. We need to think how we will use it. Its different. We could implement. It has its ups and downs. We will have it as a protocol. How we will use it? we don’t know. We will build it, use test-net, See the complications. We’re a company we have legal obligations. We need to be protected if we must use it. I can present my implementation and we can take it from there.\nWhatever we do its open source (PirlGuard) we just want credit.\n39:00 minerAllen:\nYou can use MimbleWimble as means to hidden dex transactions. As an exchange user I don’t want anybody to know what I’m buying or selling MimbleWimble can been good in this sense.\n39:30 [0x1337]:\nThere is lots about MimbleWimble that’s interesting. It’s still young. Its very interesting. The dandelion peer to peer is nice, so we can have a more secure MasterNode network. In terms of MimbleWimble for private transactions we must look at it more closely. We will have test net set up in the further.\n40:00 masterdubs:\nWe will look at it deeper before making anymore decisions.\n42:30 [0x1337]\nWe have been working on it for some time. It contains some bug fixes, a new geth. It has a new implementation of Pirl as well as new security, we expect it to behave much better than the last one. Because it contains more bug fixes on our side as well as the geth side. It’s much faster on the sync.\n44:45 masterdubs:\nWe fixed a lot of stuff like memory leaks and to many files open.\nIf you download the new PirlApp you will be able to have a lite node version. Meaning you won’t have your node on your computer. We will soon enable the possibility to have a full node on your computer or use a remote node from a masternode.\n45:00 [0x1337]:\nMasterNode setup’s with OneClick are taking under 5 minutes Login credentials are correctly protected.\n46:30 masterdubs:\nWe’ve had some problems with OneClick that we had to fix. We are working on it. There will be a fix soon.\n48:00 numnah:\nGang waits on numnah. numnah, goes on to talk about PirlCloud and IPFS. How easy it is to use. You just drag and drop files into PirlCloud on the Poseidon site. You can use it for content management for your website.\n49:30 phat:\nYou can upload your websites onto it with the help of masterdubs. If anybody has a website, they want hosted they can contact masterdubs to help guide you.\n50:30 phat:\nYou will want to have your site in a zip file. Have your directory structure set up the way that it needs to be. Careful with mine types.\n51:00 masterdubs:\nSoon you will be able to upload your site your self on Poseidon.\nIf you want to buy more Pirl now that Cryptopia is down, you can buy it through Stex.com. We have good feedback from them.\nWe will move all docs to IPFS everything will be moved to IPFS. We should use our infrastructure.\nAll the roundtable videos will be hosted on PirlCloud. Sql and IPFS are not reliable. Were looking into our own solution.\nIPFS is a file system, not a programing language. We’re exploring more about the real computation of MasterNodes. This will take lots of time and research. We have a lot of miners with a lot of GPU power. We’re thinking of ways to use it. Maybe create some sort of cluster.\nTalk of finding aliens with our computing power.\n59:23 [0x1337]:\nWe’re looking for a new solution in terms of algorithms. That’s no surprise. We have good hashing power. Going to a new algorithm would be a lot of work. This isn’t number one priority. We can change the algorithm super easy. We need a secure network and have solutions. Now is not the time. In the future. The team is here to react if we must. If we get attacked by some huge farm we will deal with it. Now we only have 100 giga hash. This is fine. There is no problem with this.\nMeeting crashed. Meeting over\nOver and out Numnah\n Author:\n@numnah\nContributor(s):\n@Dptelecom\n"
},
{
	"uri": "https://pirl.live/ipns/QmVKFJs81erni4KV6Hzt2xVwGtC2P1WtE9A4MxNThFVFVh/en/pirl-roundtable-meeting/2019-01-19/",
	"title": "Roundtable 2019-01-19",
	"tags": [],
	"description": "",
	"content": " \u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt; HEAD\n \u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt; local_version\nRound Table 19.01.2019 ﻿PIRL ROUNDTABLE MEETING SUMMARY\nDate: January 19, 2019\nParticipants:\n The People  Meeting Agenda:\n Complete transparency\n The idea of the round table meetings is direct communication with the Pirl community.\n  Summary:\n1:30 Fawkes:\nThis will be a shorter meeting today. Asks community for questions.\nWe don\u0026rsquo;t know if @masterdubs will make it to the meeting today.\nAs for news about the company, next week we will have news about it. We will let the community know as soon as possible. At this stage what is clear is we will have some news about the company next week.\nThe Cryptopia situation is awful, it\u0026rsquo;s out of our hand\u0026rsquo;s, there is nothing we can do from our end. All we can do is track our main address in Cryptopia, so far all of our funds are still there. Following the events there seems to be an in-depth investigation, there is a task force involved. This process could take a very long time. There is no data saying it\u0026rsquo;s a inside job. We don\u0026rsquo;t know how long this will go. We need more official information.\n5:00 masterdubs:\nArrives to the meeting. (Fawkes catches dubs up to the meeting.)\nWe\u0026rsquo;re still waiting for word from the state, when I have the information I will share it with you.\nA statement about Cryptopia: We don\u0026rsquo;t have any relationship with Cryptopia, we aren\u0026rsquo;t in any communication with anybody there. We don\u0026rsquo;t know any answers. We know that there is still around 3 million Pirl still on the site, we don\u0026rsquo;t know when they will open. It could be months. Don\u0026rsquo;t store coins on a exchange! It\u0026rsquo;s not safe.\n6:30 Fawkes:\nDuring the 51 % attack we could help to ensure the safety of your funds. With the Cryptopia attack we cannot do anything about it. This is 3rd party.\nThe minimum amount is 3 million. It could be more because there address is collecting the deposit\u0026rsquo;s regularly. It hasn\u0026rsquo;t been swept for a while so there could be much more Pirl in there. We don\u0026rsquo;t know. It could be 4-5 million. It\u0026rsquo;s been 92 days since its been swept.\nWe have Trezor and Ledger support.\n9:00 Fawkes:\nPilPay is dependent on the company registration. After the company is registered we will be able to start the PirlPay and the exchange.\nOnce we have the company in place we will submit all of our new upgrades and documents to the exchanges and re apply. We have done a lot since the last round. We have a lot to show. With the new legal status this is the time to move and knock on the doors. With the company we have everything in place.\nWe wont be looking into a paid exchange. This is changing. Listing fees are a scam. If you have a legal project with a good product. There is no reason they can deny us.\n11:30 masterdubs:\nThere are no plans to change the monitory policy.\n12:00 Fawkes:\nTalks about changing the monetary policy and how the USA does it. They just Print money. Our policy will not change. We don\u0026rsquo;t want to just keep \u0026lsquo;printing\u0026rsquo; Pirl.\n14:00 numnah:\nTalks about experiences with IPFS. How he drags and drops his whole file into PirlCloud not knowing its immutable, goes on to share the ways he\u0026rsquo;s creating documents for Pirl and how all of the photos and snippets in the documents are all stored on IPFS. He also says how he was interacting and using the Pirl infrastructure. Really easy and really cool even for a amateur.\n17:00 Fawkes:\nEven we can\u0026rsquo;t fit into our heads what the capability\u0026rsquo;s are. There are many ways this can be used. It can help with censorship and control. There is lots to touch on in terms on censorship.\nNot only china but in Europe and USA they do not make it noticeable but there is a lot of censorship that we\u0026rsquo;re not aware of.\n18:30 masterdubs:\nYou often think you live in a country of democracy, when in fact it\u0026rsquo;s not!\nEverything on PirlCloud is public if somebody has the link it is live they will be able to read it.\n19:45 Fawkes:\nPirlCloud has two directions the one is PublicStorage and PrivateStorage. What you have right now is PublicStorage with the current network and Pirl Content MasterNodes. This is like a content distribution network. decentralize, immutable distribution network.\nPrivate storage will come with the Pirl Storage MasterNodes. Where you can privately store encrypted data on a decentralized network.\n21:42 masterdubs:\nYou will be able to upload your website, I will make a proof of concept with Phatblinkie.\nAlso we will start the migration of our website to IPFS. Step by step.\n22:45 Fawkes:\nIn IPFS so single node is the owner of a specific file. Every file inside IPFS is getting replicated and put onto multiple nodes. The file flows around the network.\n23:45 masterdubs:\nThe files are not stored as plain text. You don\u0026rsquo;t have a file system like a node. Its small chunk of that block and you can\u0026rsquo;t see it as a owner. The only way you can see a file is if you have the hash of the file. Then you have to download it and reconstruct the file to see what is in the file.\nIf you upload to google you\u0026rsquo;re responsible for your file. Same as this.\nYou can see hash on a node. But you only see hash not a description. You don\u0026rsquo;t know what it is until you open it. Like a kinder surprise!\n26:00 Fawkes:\nWe will have terms of use to free us of responsibility. We will be open to cooperate with the authorities.\n27:15 masterdubs:\nWe don\u0026rsquo;t know what the future holds for technology. It\u0026rsquo;s a cat and mouse game.\n28:15 Fawkes:\nWe don\u0026rsquo;t own the content we cannot track it.\n28:30 masterdubs:\nIf we take the case that we close the company. The content is still there. It\u0026rsquo;s a coin that\u0026rsquo;s actively traded. You have a self sustaining eco system. There is no master key to destroy the network.\n30:45 Fawkes:\nWe will have a single document with terms of use, and policies. This is a wild beast in terms or rules and regulations.\n31:30 masterdubs:\nTalks of Apple and the FBI and how they handled situations regarding the law and information stored on the network.\nIf you want to access data on the PirlCloud it\u0026rsquo;s public. On the private storage. You will be the only owner of the key. If the law enforcement want wants information that\u0026rsquo;s stored in the Private PirlCloud they will have to ask the owner as we will not have the key information.\nWe know what is Posted because of Poseidon. In the future we will be billing people.\nPirlPoseidon works with smart contracts. It makes easy access.\n33:45 Fawkes:\nPirlApp doesn\u0026rsquo;t rely on any infrastructure. No single point of failure.\n35:45 masterdubs:\n@oxenhouse has made some Pirl swag. We will publish it soon. There will be hats and more.\nThere will be a new version of PirlTube and PirlApp soon. Maybe next week.\nCryptopia is down. Don\u0026rsquo;t store your coins on exchanges.\nOver and out,\nnumnah\n Author:\n@numnah\nContributor(s):\n@Dptelecom\n"
},
{
	"uri": "https://pirl.live/ipns/QmVKFJs81erni4KV6Hzt2xVwGtC2P1WtE9A4MxNThFVFVh/en/pirl-roundtable-meeting/2019-01-12/",
	"title": "Roundtable 2019-01-12",
	"tags": [],
	"description": "",
	"content": " \u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt; HEAD\n \u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt; local_version\nRound Table 12.01.2019 ﻿PIRL ROUNDTABLE MEETING SUMMARY\nDate: January 12, 2019\nParticipants:\n The People  Meeting Agenda:\n Complete transparency\n The idea of the round table meetings is direct communication with the Pirl community.\n  Summary:\n1:00 masterdubs:\nHappy new year, this is our first Roundtable meeting of the year.\n1:45 Fawkes:\nHappy new year, asks community for questions.\n2:30 masterdubs:\nI’m happy with some community contributions like marketing. Shout out some community members @ClaudioPirl for his contribution and @numnah for his Kb article using IPFS and PirlCloud. And @niklas-e for his contribution. Here is a link https://loved-eel.cdn.pirl.live/ipfs/QmPAQz2yvYR7oCoQD7CHqiVdZtjsNSpSqNBrCtVWGGuCPX It’s a monetary policy. Hosted on PirlCloud\n4:00 Fawkes:\nTalks about PirlGuard and marketing it. It\u0026rsquo;s open source and free for anyone. We will advertise PirlCloud and PirlTube. PirlGuard is something the team wanted to share with everyone making the blockchain more secure which is better for the technology. For example, Ethereum classic got attacked. There are huge risks for anyone, storing value on the chain that’s not protected.\n5:15 masterdubs:\nFun fact, around Ethereum classic the attacker refunded 100 k to the exchange.\n6:30 Fawkes:\nAsks @niklas-e to present his work in a line or two.\n6:55 niklas-e:\nResponds in text that there was a suggestion to make a monetary policy based on live data. It’s all hosted on PirlCloud.\n7 :20 masterdubs:\nRecap on what’s going on. We upgraded the nodes to fix a few bugs. After this we can start to commit to new stuff. More security is a priority. We will enable more IPFS for marlin functionality. We will integrate the website deplorer, so you will be able to upload a website. Just click and deploy. We have done some testing but now we need a big scale test. My trip was good. Baggage was lost. I will get a reply from the state around the January 18th. I had a meeting with the state, they had a few questions. How Pirl works. It’s hard because you are talking to politicians and you only have a few hours to explain blockchain. They like the idea, we will wait and see.\n11:00 Fawkes:\nThis is the difference between normal hosting and website hosting. When you’re storing a web app or site right now you’re just using the IPFS hash this is not the right website hosting, but we can use it for testing. Later the functionality will point a website then you will get the / IPNS for website hosting.\n12:00 masterdubs:\nIt will be simplified, you will upload a zip file with all your data. It will be deployed and return the hash of the root of the folders that you can use to redirect to you website. iPfs is cool but it needs improvements it has drawbacks.\nWhat do we need to achieve? We need to improve security, 51% is bad. There are more attacks. Lots more to solve, we will develop. We will enable easy entry with PirPay and security that will be a good year. We have a plan. But we can adapt.\n13:30Fawkes:\nWe try to follow the plan but be flexible as needed. If we keep being flexible and good with development, we have a set up to go far.\n14:00 masterdubs:\nPeople can still contribute to the code on our getlab. PirlGuard is open source the more help the better. If you want to help with the docs, please help out.\n15:00 Fawkes:\nEgm has implemented PirlGuard and are happy with it. We’re getting interest from penetration testing people. It’s going well. We had some penetration attempts today. We have been monitoring, it’s getting nowhere. A guy was trying to sybill attack us. It didn’t work because we have 900 MasterNodes. It would work on other networks but not ours. Someone would have to have 901 nodes for this to work. It’s unrealistic at the moment.\n17:30 materdubs:\nThis seems to be the new way of making money is to attack.\n17:45 MineAllen:\nThe easies way would be to buy up all the Pirl on Cryptopia. It would cost you billions of dollars to execute this type of attack.\n18:00 Fawkes:\nThe Cybill attack was done to unguard PirlGuard. It didn’t work. The attacker didn’t consider our MasterNode network. If you have suggestions for the website. Please use the suggestion channel. Watch for updates.\n19:00 masterdubs:\nWe will do a webpage for PirlGuard. Shout out to AGM for using PirlGuard and mentioning Pirl on their website.\n19:30 Fawkes:\nExpanse is also interested in PirlGuard they have added us to their partnership page. We’re still waiting to hear from them. They have other priority’s. Music coin has also added PirlGuard. Ether 1 is also looking for a solution. They will test our solution. That makes 4 projects that we’re aware of. The next step for PirlGuard is for other developers from other algorithms to make it work for their algorithm.\n21:30 Phatblinkie:\nFor coin operators an attack is in hindsight. They’re not looking proactively when there is a solution out there.\n22:00 Fawkes:\nWe have been under attack. Someone trying to Ddos the nodes, it’s got nowhere. It was going on for about 2 hours today. We expect more and more attacks on the Pirl network.\n22:45 [0x1337]:\nSomeone was clearly attacking every node on the network. It’s great to be attacked like this as we can now evaluate the work we have done. With the 51 attack it had to come to our doorstep to be mitigated. As more test come we will make our code better.\n24:00 Fawkes:\nThis wasn’t a SSH attack they were basically trying to shut down every node.\n24:20 masterdubs:\nI just got news about the chain we already spoke about the algorithm change. People are pushing progppow but they have a company behind them . Here is a link. https://www.trustnodes.com/2019/01/12/the-progpow-team-admits-theyre-working-with-nvidia-and-amd This is why we don’t want to implement them. We want to implement our own algorithm but it’s not priority. The priority is security.\n25:40 Minerallen:\nAs now completed his security course. Congrats!!\n26:30 masterdubs:\nA little background on @Phatblinki he’s good at breaking stuff. We’re getting stronger and stronger. @Tptelecom is becoming a coder as well, on the website end.\n28:30 Fawkes:\nIn the coming months we will be working on PirlCloud, Poseidon update, PirlApp update keep an eye out.\n28:45 masterdubs:\nWe’re moving everything to PrilCloud this means we will drop all severs. The website the docs and everything will be moved to the decentralized platform. We’re starting test with egm team to test and try to break it. More on that later .\n29:30 Fawkes:\nThere is still lots to do before we start new projects. On the marketing side we have been doing a great job internally as a team. The dev team is always producing new stuff to share. The marketing for the new year is exciting. We will be focusing on products. Each product will have its own market. Each product will have its own separate service. Covering more areas like business services and more.\n32:30 Fawkes:\nPirlCloud is still in alpha stages. If the community could report all crashing, this helps out a lot.\n33:00 masterdubs:\nPirlCloud still needs some work and some integration. The load balancer was built from scratch. It’s not a copy paste, we built it. Therefore, we don’t want market it to much yet. This is why we offer free storage at the moment. We want to break it. We’re still in the testing period.\nGet on PirlCloud and test it. Large files are working well. The files are in good shape when the transfers are complete. There are great uses coming up.\n34:30 phatblinkie:\nIf you were at the last meeting nd you want your extra storage. Please upload something to your PirlCloud then go on Poseidon and upload something, your name will show up on my end. Then pm me for your extra storage.\n35:00 Fawkes:\nPirlCloud is something interesting for us to use. 1 gig of decentralized load balanced storage. This is something you will have to pay for monthly. We want and appreciate all feedback.\n36:45 Phatblinkie:\nEverybody is getting 100 MB for free. We’re a small team. We need more testing. We appreciate anybody to upload scenarios. More help the better.\n37:30 masterdubs:\nWe have tried multiple gigs at a time and its working great as well. No fading. It took about 20 min to upload 5 gigs.\n38:30 MinerAllen:\nAs a small tea we can’t test every country on all computers on all operating systems. Firewalls country’s we can’t do at all. We need the community’s help for testing.\n39:45 masterdubs:\nPlease add suggestions to the suggestion channel. We will add a suggestion section to the main website.\n40:30 Fawkes:\nThe PirlTube suggestions worked great. All reports have been cleared out. There will be an updated version coming soon with 40 suggestions from the community.\n41:15 masterdubs:\nDeleting files fom PirlCloud isn’t possible now. IPFS is immutable. You always have a risk that your file is on the network. You can’t guarantee it will be deleted. It will flush when there is more room needed on the server. F5 f5 f5.\n44:30 Phat:\nThere are some updates coming. We will be polishing everything.\n45:30 Fawkes:\nThis is our first week back for the new year. There will be some new stuff coming down the pipe we will let you know more when we know.\n47:00 masterdubs:\nPeer to peer network will be worked on very soon. Step by step were moving away from Ethereum. When we get bigger we will create our own code. We want to implement more security and immutability on the network.\n47:30 Fawkes:\nThe Pirl network holds a unique infrastructure. Our capacity is large. On the blockchain side we need to scale to improve the infrastructure.\n48:00 masterdubs:\nWe started to upgrade the nodes. We took bug fixes from eth. But this takes time because we have fixed the code, so we must merge the two.\n49:00 Fawkes:\nIt will be a year for more use cases, security and infrastructure. Our infrastructure sets us apart from anybody out there. We’re a step ahead of others. This will allow us to bring use cases with real decentralization. PirlTube is an example of proof of concept of what we can do.\n50:20 masterdubs:\nWe will upgrade our p2p network. Make it more reliable.\n51:00 [0x1337]:\nFor p2p as soon as the node connects to the network it knows the whole network. So eventually he will know all the network peers. Any network transaction can be correlated to a Ip address or server or whatever. This is a security issue. Also, as soon as you have a whole map of the network it can be much easier to plan an attack vector. P2p is very stable and good right now but it has this vulnerability inside the code. It doesn’t meet our needs. This will be a priority just not yet. This is a serious block chain challenge. We will pick our battles one by one.\n52:40 masterdubs:\nWe all have lots of ideas, the problem now is to pick which ones to prioritize.\n53:15 [0x1337]:\nOn the p2p isn’t just security because we got a ddos attack today the network can handle it unless someone has more MasterNodes than us then they could attack the whole rest of the network.\n55:30 Fawkes:\nPirlApp update is coming soon. Once we move with the official release on desktop then after that will be the mobile version.\nPirlApp is written in a framework that’s written for mobile. It will need some tweaking.\n57:30 masterdubs:\nJavaScript is working on the network that’s what PirlTube is built on as well as Nicola e page. So that proved. On our side we use cli. With Poseidon you upload a zip file we will host it for you.\n58:00 Fawkes:\nYou can easily host smart contracts in the backend, JavaScript in the front end. Upload on PirlCloud infrastructure.\n58:30\nLimitations is you cannot make server-side stuff. It’ only client side. For server-side stuff you can still use smart contracts.\nRendering and such can be done on the client side rather than on a server.\nMeeting finished, think of more questions for the next meeting.\nOver and out,\nNumnah.\n Author:\n@numnah\nContributor(s):\n@Dptelecom\n"
},
{
	"uri": "https://pirl.live/ipns/QmVKFJs81erni4KV6Hzt2xVwGtC2P1WtE9A4MxNThFVFVh/en/pirl-roundtable-meeting/2018-12-22/",
	"title": "Roundtable 2018-12-22",
	"tags": [],
	"description": "",
	"content": " \u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt; HEAD\n \u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt; local_version\nRound Table 22.12.2018 ﻿PIRL ROUNDTABLE MEETING SUMMARY\nDate: December 22, 2018\nParticipants:\n The People  Meeting Agenda:\n Complete transparency\n The idea of the round table meetings is direct communication with the Pirl community.\n  Summary:\nRegular start of meeting banter.\n15:00 Fawkes:\nThanks, the Pirl community.\n16:30 masterdubs:\nThanks, the community.\nAsks the community for question.\n17:30 Fawkes:\nIt was a rough year, although we did more than we had originally planned on doing.\nThe road map is not time specific. We did many things on the map that we didn\u0026rsquo;t plan.\nWe have a 2018 project summary that everybody must check out.\nWe had some major challenges. We keep on getting stronger as time goes on.\nRight now, we\u0026rsquo;re in the process of setting up Pirl as a company.\nThe company will have to provide financial statements.\nEverything will be accounted for and transparent.\nFor 2018 the major goal was to prepare the infrastructure.\nIt\u0026rsquo;s now done. Pirl is one of the most advanced Blockchain application out at this time.\nNow we have a stable ground to build DApps. 2019 will be about use cases.\n22:30 masterdubs:\nWe don\u0026rsquo;t like to talk about the crypto markets.\nAfter this meeting you will know what we\u0026rsquo;re thinking in terms of Pirl and the future.\nWe want mass adoption. We don\u0026rsquo;t control the market.\nWe develop for the people.\n23:30 Fawkes:\nThe next crypto cycle will be user\u0026rsquo;s.\nThe people who want privacy freedom of speech and security no single point of failure and no ddos attack.\nBring mass adoption. We’re not worried about prices.\n25:45 masterdubs:\nIt\u0026rsquo;s time for the first bomb!\nThis will be scaled.\nIt’s a web-based version.\n27:45 Fawkes:\nYou\u0026rsquo;re able to take a share links from the web view and view on PirlTube, you don\u0026rsquo;t have to be signed in.\nThere is a button where you can pop the screen out and move the video to any location you want.\nThe web view also works in a mobile browser.\nIn the future it will come in a mobile application.\nThere will be bugs to clear out, this is only this first version.\n30:30 masterdubs:\nReply\u0026rsquo;s to the 404.\nThe reason for it is 404 is you\u0026rsquo;re going to the root of the domain.\nThe domain isn\u0026rsquo;t re-directed yet. This is normal, we will fix it soon.\n30:45 Fawkes:\nThe limitations to the web version of PirlTube you cannot upload.\nYou can launch and share videos.\nThe desktop application is the only way to upload content now this will change.\nThe limit for video content is currently 1 gig per video upload.\nCurrently all the content is checked out by the Pirl team.\nThis will be further developed.\nWe don\u0026rsquo;t give out investment advices.\nWe develop!\n33:30 MinerAllen:\nWe will censor manually for starters.\nIf there is bad content, the community can report it.\n33:45 Fawkes:\nLater, we will be looking at AI solutions to help police censorship.\n34:45 masterdubs:\nEverybody can post content for free!\n35:00 Fawkes:\nThe infrastructure has massive capability\u0026rsquo;s.\n2 442 00 GB/m Bandwidth\n3256 GB RAM\n1628 CPU Cores\n16 280 GB storage space\n814 endpoints on 6 continents\nThis is what we want to scale, also we want to bring more use cases to all business or personal.\nThere is no video overlay in PirlTube.\nThere is a lot of possibilities with the GPU\u0026rsquo;s but that\u0026rsquo;s our secret.\n37:30 masterdubs:\nThere is talk of changing the algorithm in the future. For now it will stay the same.\nThis is not top priority.\nRight now, we\u0026rsquo;re focusing on more use and more services.\nOur block time is stable as well as our difficulty.\n38:30 Fakes:\nWe will be looking into another algorithm, it\u0026rsquo;s not out yet and it\u0026rsquo;s not our priority.\nOur infrastructure with the endpoints and no point of failure it’s in comparison to Microsoft Azure (58 endpoints).\nWere close to 900 endpoints.\nThe content that is shared doesn\u0026rsquo;t render on the actual endpoint. each endpoint has min monthly requirements.\nAs we get closer to mass adoption we will run more marketing campaigns.\nThe idea is not to crash the budget.\nWe will scale as we\u0026rsquo;re capable.\nPirlTube is a fee service where the person hosting can receive tips for their videos or whatever they post.\nWe have more ideas like pay to view content.\n43:15 masterdubs:\nOnce we release the web version of PirlTube then people can access it.\nThen people can share videos.\nThen we can post our roundtable meetings and more.\n43:45 Fawkes:\nThe new company will be good it will open many doors.\nAs for limitations, we already have a company that we answer to legally.\nWe\u0026rsquo;re already legally responsible for everything we\u0026rsquo;re doing.\nThe other company the blockchain company opens new opportunities for us.\nWe don\u0026rsquo;t talk about the markets.\nWe work all the time.\nWe work during our free time.\nOthers spent 16 hrs. a day.\nWe want to distinct ourselves from the market by providing actual use cases.\nWe don\u0026rsquo;t want to be funded by traders.\nFunded by users and investors, real usage.\nThe markets are all speculation.\nWe will be getting more MasterNodes.\nThis will open many markets.\nMaking us self-sufficient for funds for development team without the market.\nPirlTube is not a competition product.\nThe idea behind it is to make DApp’s with the most use case’s possible.\nFor example, PirlTube, encrypted data market place, single point of entry, messaging you could get all this with single point of entry.\nWe want our users to have easy access to all of this.\nIn 2019 you will be able to pay for goods and services on the Pirl network.\n49:00 masterdubs:\nI\u0026rsquo;m going on a vacation! For the next 2 weeks.\nOn the 29 th I have a meeting the commission of the country.\nI will tell more when I know more.\n49:30 Fawkes:\nWe have a lot of ideas for this country.\nWe can both benefit from each other.\nWe will let you know the country when we know for sure.\nHere are our MasterNode stats as it stands right now.\n2 442 00 GB/m Bandwidth\n3256 GB RAM\n1628 CPU Cores\n16 280 GB storage space\n814 endpoints on 6 continents\nThis is based on minimum requirements.\nIt\u0026rsquo;s opening a lot of doors for Pirl.\n51:00 masterdubs:\nAbout PirlTube I want to build something stable then I will develop on that.\n51:30 Fawkes:\nIn terms of social features we will have to develop something.\nwe don\u0026rsquo;t want a single pint of failure. We don\u0026rsquo;t want database records.\nWe will have to innovate this part.\n52:00 masterdubs:\nThe MasterNode network is very large.\nWhen I open Poseidon v 2 in that we released a new product.\nWe deployed around 800 smart contracts on the chain.\nSo, each node can contact its own smart contract.\nthe goal of the smart contract is to know the object that the node needs to store.\nSo, the smart contract will tell the node what to store and where.\nIt’s completely independent.\nWhen you put your content in the chain it’s in.\nIt will stay.\nYou can load files to IPFS.\nyou can see it where you want to see it.\nFor now, we are just testing, this will open many door\u0026rsquo;s for us.\n54:00 Fawkes:\nThis is pre-pre-alpha.\nPlease spend some time and test it out for us.\n54:30 masterdubs:\nThis is the content you will be able to load.\nWhat\u0026rsquo;s behind this?\nIn the future you will be able to select the country where you want your data stored.\nMeaning you can be as close as possible to the nodes you need access to.\nIts re directed to Pirl.live. Pirl.live is a load balancer that we made.\nWhen you don\u0026rsquo;t select the country.\nIt selects the closes node to the user if there are none available in that country it will default to the continent of the user.\nThe PirlTube web view is loaded on our IPFS.\nThe web application is on IPFS.\n56:00 masterdubs:\nHow the infrastructure works, each node gets a domain name generated for it that will fall back to Pirl.live that node will distribute the content.\nSo, each MasterNode becomes a gateway.\nTherefore, we have over 800 gateways.\nWe can dynamically scale up and down.\nIf you deploy your network statically you run into big problems.\nWe want to be professional, so people can use it like a real product.\nYou guys get to upload 100 mb to the PirNetwork and distribute it for free.\n58:45 Phatblinkie:\nJust want to make sure everybody that went to this web site knows it’s contained and self-hosted natively off the IPFS.\nYou could develop many other apps in the future.\n59:00 Fawkes:\nOur infrastructure is one of the most advanced in the entire blockchain ecosystem.\nA decentralized app with not only smart contracts running in the background it\u0026rsquo;s also hosted on a completely decentralized network.\nWith no single point of failure.\n1:00:00 Phatblinkie:\nThis is just like Amazon s3.\nMaybe you pay in Pirl for content rather than how Amazon s3 charges you in USD or CDN or whatever for accessing the block storage that you put on there.\n1:00:30 Fawkes:\nTake crypto kitties for example, they\u0026rsquo;re are hosed on a centralized server, anyone can DDOS them easy.\nThey are not decentralized.\nNow what we offer is the first real DApps with real life use cases with complete privacy.\n1:01:45 masterdubs:\nAn easy way to buy Pirl in the future will be through our exchange, Poseidon, Pirl App and so on.\nThe goals are to make it easy to use.\nWith Poseidon you have to possibility to enter your data and instantly deploy your website.\nThe fiat exchanges we need the company for that. It\u0026rsquo;s a priority goal.\nThere are better functions in Poseidon we upgraded the UI,\nenabled 2 factor authentications with text message or google,\nlogin,\nlog out,\npassword retrieval,\nexport your payments for accounting purposes and more.\n1:04:00 Phatblinkie:\nWe want the content and MasterNode network to be as easy as possible.\nThe old version had some build in features that had a lot of bugs that caused problems.\nThe new version has a lot better quality checks.\nchange ip where node is. an update and install again.\nAddition to that the ssh port can be customized.\nThere are also new node features on Poseidon as well.\n1:06:00 masterdubs:\nThe update times are fast.\nWe can update 800 one clicks in 30 min.\nIn Poseidon when you register a new node we will enable a domain for your nodes we will write a DNS for that and supply a certificate to secure the IPFS network.\nWe have a new function, we have become a platform rather than just store stuff.\nThe new service is called PirlCloud please note that it says Pirl but it’s in white :) oops.\nThis is hosted on IPFS. This will have all the functions of a decentralized cloud.\n1:09:21 Fawkes:\nFor now, it comes with content hosting and content delivery.\nLater it will come with way more functions.\nIn the future PirlStorage MasterNodes will be part of PirlCloud it will allow encrypted storage.\nThis is the final detail.\nWe will experience this next year.\n1:10:00 masterdubs:\nIt\u0026rsquo;s a new platform we listen to your needs.\nHere is the new Poseidon\nPlease note that the new Poseidon has two factor authentications.\nYou have two options; text messages or google token generator.\n1:11:45 Fawkes:\nYou can see a lot of details about the MasterNodes in the new Poseidon.\nPlease help decentralize the MasterNodes in other countries.\nWe will be able to enable payments and sell.\nWe have some blank spots on the map it would be a smart move to host your VPS in these countries.\n1:14:00 masterdubs:\nSometimes the IP is weird.\nYou can test the Poseidon.\nWe tried to make it faster, we think it\u0026rsquo;s way faster.\nIf you break anything, please let us know.\nYou don\u0026rsquo;t see the address yet as I was rushed to get the product out to you guys.\nThere will be many updates to come.\n\u0026ldquo;Pirl love days\u0026rdquo; is the number of days you have been hosting your MasterNode live.\n1:17:00 masterdubs:\nA little rundown of PirlPoseidon v 2\nYou have accounting tabs, wallets, rewards, MasterNode tab, you see all your nodes when you zoom on it you see all of your stats.\nYou can edit your node, delete it, add it.\nYou can reset your password. Next will come is notifications.\nYou will be able to delete but on IPFS nothing is really deleted if people are requesting it.\nKeep in mind that IPFS is immutable content.\nWe will replicate your file when you want to delete it we will request to the node, but it will take some time to delete it.\nIt’s up to 48 hrs. to get pushed to trash.\nIf you put something on the web.\nIt will be there forever! Be careful! Everything will be on PirlApp on the dashboard.\n1:22:00 Fawkes:\nWhen PirlStorage MasterNodes are out you will be able to encrypt your data in a way like google drive store completely private and encrypted as well as be able to share it.\nThis will be the other side of the PirlCloud that is coming.\nThe network is very powerful with all the endpoints and bandwidth.\nWe will approach more exchanges once the company is done,\nnow that the infrastructure is in place and all the documents are in order we will be ready to apply for more listings.\nWe will be ready for even Coinbase. We have a lot to bring to the table.\n1:25:00 masterdubs:\nWe built a new explore but a little bit simpler.\nWe will enable it very soon.\nSystemkoin opens a lot of possibility\u0026rsquo;s.\n1:27:00 Fawkes:\nThis technology really has a purpose.\nWe love crypto! If nobody else will do it, we will! We believe in it.\nCheck out he summary from 2018 exciting times ahead.\nWe have a great community. Anybody can join in and help. More innovations to come.\nShout out the community for everything!\nA draw for the community. The winner is @GDD PIRL USER .\nOne more surprise from masterdubs he has upgraded everybody in attendance 1 gig for free in PirlPosedion.\n2 442 00 GB/m Bandwidth\n3256 GB RAM\n1628 CPU Cores\n16 280 GB storage space\n814 endpoints on 6 continents\nThis is the last meeting for 2018.\nEnjoy the holidays.\nThe team is on holidays as well.\nSee you next year.\nOver and out,\nnumnah\n Author:\n@numnah\nContributor(s):\n@Dptelecom\n"
},
{
	"uri": "https://pirl.live/ipns/QmVKFJs81erni4KV6Hzt2xVwGtC2P1WtE9A4MxNThFVFVh/en/pirl-roundtable-meeting/2018-12-15/",
	"title": "Roundtable 2018-12-15",
	"tags": [],
	"description": "",
	"content": " \u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt; HEAD\n \u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt; local_version\nRound Table 15.12.2018 ﻿PIRL ROUNDTABLE MEETING SUMMARY\nDate: December 15, 2018\nParticipants:\n The People  Meeting Agenda:\n Complete transparency\n The idea of the round table meetings is direct communication with the Pirl community.\n  Summary:\n2:30 Fawkes, masterdubs: Ask community for questions?\n3:20 masterdubs: Next week is our last meeting of the year. We might have a surprise for everybody. Depends on some people.\n4:00 masterdubs: The company will not be a single point failure. The company will be obliged to develop more, pay employees, become accountable, follow laws. masterdubs fires a question back to community.\n5:00 Fawkes: Pirl is a blockchain as such, the PirlBlockchain can never be stopped it\u0026rsquo;s immutable, it\u0026rsquo;s unstoppable until there is one last miner or one last Pirl MasterNode we can\u0026rsquo;t be stopped. The PirlBlockchain is alive with or without a company. What the company will provide is more services outside of the crypto markets, more on the business side or personal side, in a more regulated/enterprise level. We want to bring blockchain use to traditional services, we want to provide the benefits of decentralization. We can\u0026rsquo;t do that without being a legal entity.\nYou need to be somebody to have a legal contract. That somebody happens to be a company.\nThere will be PirlServices and PirlBlockchain these are two separate things. PirlBlockchain is something everybody can use and PirlServices is what the company provides.\n7:30 Fawkes: It\u0026rsquo;s too early to give out details about the company\u0026rsquo;s structure. The company will not be publicly traded.\n9:00 masterdubs: We don\u0026rsquo;t want to release public keys on the blockchain. (I couldn\u0026rsquo;t make out the question)\n10:00 Fawkes: Version 2.0 PirlPoisedon release is not announced yet. There will be information coming out soon.\nIt\u0026rsquo;s a real thing. The finishing touches are being implemented. Most of suggestions are implemented into it.\n11:00 MK: If the blockchain itself paid the MasterNodes directly without any intermediate wallet, no keys would be necessary.\n11:00 masterdubs: That is correct but to code the algorithm you need to be 100 % sure and that\u0026rsquo;s very difficult.\n11:50 masterdubs: People were not happy I had to sell some Pirl to pay dev, dev and dev. They tracked the wallet of the dev. So, I sold some Pirl because I had to pay dev and the rest I paid from my pocket. I tried to pay all the dev, it’s hard because the bear market is real. I try to not sell very much Pirl. Therefore, the company will help so we can cash Pirl in during the bull market to help carry us through the bear markets when they happen. Then we will act like a company rather than a family.\n12:45 Fawkes: This is our life project, we believe in it. With one year of a bear market, we have put in a lot of work. We do it because we believe in it and we like it. This development isn\u0026rsquo;t going anywhere. When the markets go back, the development we have done, our market position will be better than ever. The next crypto cycle will be users over traders. With our infrastructure and our services, we will target the users. So, we keep developing we keep our use cases. Then we will be ready for the bulls. Even if you look at big projects they don\u0026rsquo;t have the development. For example, Ethereum doesn\u0026rsquo;t have a single release for the block chain in 2018. Pirl has three major blockchain releases. We want to make everything better.\nWhat is better marketing than a real product, something that you can benefit from?\nSometimes the best marketing is not to market at all.\n17:00 masterdubs: Creating documents and content about Pirl is a great way to market Pirl.\n17:45 Phatblainkie: It’s hard to market a coin based on it having on blockchain. We need something to have something to market. It\u0026rsquo;s coming. We want a more organic widely spread base. Not just copy and paste/ re tweet\u0026rsquo;s. Original content will get you a better ranking, thus, if you have more original based Pirl articles it\u0026rsquo;s way better than having a bunch of articles that are just copied and pasted. We need a product to go sell.\nIt\u0026rsquo;s difficult selling dreams, it’s much easier to sell products.\n19:30 Fawkes: What we\u0026rsquo;re planning on releasing next will not be marketing a coin, we will be marketing services, service\u0026rsquo;s we can sell.\n19:40 masterdubs: We\u0026rsquo;re marketing services with an idea behind it. It\u0026rsquo;s something that we believe in.\n20:00 Fawkes: One of the possible ways for people to interact with our product is with our infrastructure. This is huge. Right now, were sitting on one of the most advanced blockchain infrastructures. This is because it’s the first developed MasterNode network developed on the Ethereum capable network, smart contracts, ??? , and web 3.\nThe PirlContent MasterNode and PirlStorage MasterNode at this point are very unique.\n21:00 Miner Allen: What\u0026rsquo;s cool about Pirl, what\u0026rsquo;s going to happen is we will be moving away from blockchain marketing. We will be getting into real life marketing with normal people getting into Pirl.\n21:40 Fawkes: It\u0026rsquo;s one thing to be competing with 2000 shit coins. It\u0026rsquo;s way different when you show your product to business\u0026rsquo;s and users who have benefits of using it.\n22:00 masterdubs: Knows of large profile investors that have 25% of their portfolio in ICO\u0026rsquo;s. No good for investors as these ICO\u0026rsquo;s are now gone. POOF!\n22.45 Fawkes: The snail wins the race, so step by step. We what to be valued on what we are and what we can provide.\n23:30 masterdubs: We are unique. We have been sticking to our plan since the very beginning. No shitty marketing! We deliver what we say.\n24:45 Fawkes: Talks about how YouTube channels are talking about the increased 51% attack on crypto coins but how nobody is talking about PirlGuard. Thus, having their blockchain exposed. We will not pay crypto YouTubers.\nRant on YouTubers robbing people, and how we will save our money to create new product for Pirl.\nWe want to go to conferences to talk about the PirlGuard and other products in the future.\n26:30 masterdubs: Talks about how starting a company will that will have legal statements.\n28:00 Fawkes: Lots of talk about the markets. How we\u0026rsquo;re all here, at this roundtable meeting in a bear market. People here believe, they want to help and contribute.\nValue not inflated based on nothing and community not inflated by hyped crowed. This is the best we can have. The rest is a matter of time and development. We\u0026rsquo;re gather people who want to think and contribute.\nStreaming is not the next thing coming for PirlTube. There should be a nice PirlTube surprise soon. The streaming is Proof of Concept already developed. We had this running a long time ago. We have the hard part done. It\u0026rsquo;s just not priority number one.\n31:00 masterdubs: We want to get everything stable before we release anymore Dapps.\n31:30 Fawkes: PirlTube and streaming would be two different technology\u0026rsquo;s. We have the technology, the concept is proven, it just needs worked on.\nWe haven\u0026rsquo;t changed any VPS requirement\u0026rsquo;s and don\u0026rsquo;t plan on it soon. 4 gigs is fine.\n34:00 masterdubs: There are problems with any VPS provider, do your research.\n34:15 Fawkes: Maybe you could get rewarded for extra bandwidth used in the future.\n34:30 masterdubs: Maybe the community could make a list of VPS providers and their rates, location, and so on. We could put it into PirlDocs.\n35:30 Fawkes: It\u0026rsquo;s important to spread the VPS all around the world. It\u0026rsquo;s what makes the infrastructure unique. No single point of failure or ddos attacks. We don\u0026rsquo;t recommend any VPS providers. Do your own research.\n36:00 masterdubs: It\u0026rsquo;s recommend putting your VPS in a region that doesn\u0026rsquo;t have any nodes set up.\n37:00 A message to all miners to spread the hash. This is very important.\n38:00 masterdubs: We always have new people joining the discord and setting up new MasterNodes.\nmasterdubs attaches explorer link\n42:00 Fawkes: At this point were protected against double spend and 51% attack with PirlGuard. Changing the algorithm isn\u0026rsquo;t a priority.\n42:00 masterdubs: Asks community if there are users of Blockfolio. He Wants to know how the community would like the notifications pushed or just notifications. Everybody shows up for the last meeting. Big surprise! Maybe\u0026hellip;\nWe have a bridge for telegram.\n46:00 Fawkes: Dev are pushing all day everyday that\u0026rsquo;s why GitHub is very active.\nEverybody, please attend the next meeting. It\u0026rsquo;s the final meeting before the holidays. The community might have something to play with over the holiday.\n47:00 Meeting over!\nOver and out Numnah\n Author:\n@Numnah\nContributor(s):\n@Dptelecom\n"
},
{
	"uri": "https://pirl.live/ipns/QmVKFJs81erni4KV6Hzt2xVwGtC2P1WtE9A4MxNThFVFVh/en/pirl-roundtable-meeting/2018-12-08/",
	"title": "Roundtable 2018-12-08",
	"tags": [],
	"description": "",
	"content": " \u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt; HEAD\n \u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt; local_version\nRound Table 08.12.2018 ﻿PIRL ROUNDTABLE MEETING SUMMARY\nDate: December 8, 2018\nParticipants:\n The People  Meeting Agenda:\n Complete transparency\n The idea of the round table meetings is direct communication with the PIRL community.\n  Summary:\n2:00 masterdubs: Asks the community for questions. The typical start of meeting banter.\n3:00 masterdubs, Fawkes: Responds to the community on how helping other projects/coins implement PirlGuard is great for Pirl. Coins are interested in PirlGuard as a possible solution.\n4:50 Fawkes: Talks about PirlPay. The Pirl infrastructure is capable of many things including IOT and AI implications. Talks about updating the community on shopping plugins. Our company will be accessible and easy to manage with great infrastructure that can be expanded on. There will be a series of tweets coming soon. Example, Microsoft Azure has 58 end points. Pirl blockchain infrastructure has 780 points 12 times larger than Azure at this point. 2 100 000 GB monthly bandwidth, 3TB RAM, 1572 CPU Cores, 7000 GPU’s allows for a lot to happen. Data transfer plus blockchain. We can host data, images, videos, web sites the Pirl infrastructure has huge use. Early 2019 will be used for putting the infrastructure into use. Pirl will open for other markets. No more day traders, we want more users. We want more use services, we can provide the infrastructure to develop decentralized applications, immutable data. This is a huge resource we have available and we will use it!\n9:00 masterdubs: Plan for 2019 the company and PirlPay. 2019 will be great!\n10:00 Fawkes: 2018 was a busy year prepping the infrastructure. 2019 we will put the infrastructure to work. We want to have all the services worked on as a priority PirlPay, and a few other unknowns.\n10:30 masterdubs: Wants everything running proper before we move forward. We don’t want to fail.\n11:00 Fawkes: We’re entering a business serves area where we need to be perfect. We will try to deliver an experience close to a traditional one with all the benefits of decentralization. Azure has 58 endpoints we have 780 endpoints.\n11:30 masterdubs: We have already improved security, we will try to put out good stuff.\n12:30 Fawkes: 90 percent of suggestions for Poseidon are in it. Just give it time. Went on to talk about IOT, there is no direct Pirl-IOT documentation now, just that it is possible for development, we can provide a lot for it but no discussion now. We have the right infrastructure. Right now, the Pirl infrastructure is unique and with the storage MN it will be even more unique it will provide possibilities no other blockchain can provide as an infrastructure.\n15:00 masterdubs: On the topic of marketing we want usability we want to educate people, teach them how to use the product. An example is PirlGuard, people integrate it into their chain. This is great for Pirl.\n15:30 Fawkes: education and spreading the message will be the focus. Marketing will be more modular for Pirl. We will be entering different markets with different services. Our target market is different. The ways cryptocurrency’s are currently marketed isn’t good. Pirl wants to be untraditional in it’s marketing. We don’t want to keep everything that everyone else does. We are not sheep! We will educate and spread our msg. The marketing will be upped with PirlPay is up because we can target market real people. To use our product. We don’t just want one push marketing. We want long term. We have upped social media.\n18:30 Fawkes: If you want to buy Pirl you buy it for what they provide. Our next goal is you buy it because you want to store your data in a decentralized way private. Like google drive but the files are shattered into millions of pieces that can’t be traced to put back together. Encrypted data, webhosting, simple uses space, market place, PIRL Tube, no major censorship, no advertising. This is better than YouTube already, but this is not the purpose the purpose is to provide you with an environment where you can use all these features. One point immutable content, all in a unique infrastructure of 700mn or more soon. Right now, if it was a super computer it would have 2 100 000 GB monthly bandwidth, 3TB RAM, 1572 CPU Cores, 7000 GPU’s\n21:00 Talk of gaming\n22:00 masterdubs: Yes, we will go to blockchain conferences, for now I will focus on finishing our products to run proper.\n23:00 More talk of gaming.\n27:00 Fawkes: A new version of the PirlApp will be coming out soon. There will be more information coming out. Once we’re ready, you will know.\n29:00 masterdubs: PirlPay won’t compete with Visa. It’s not the same usage. PayPal doesn’t compete with Visa, because it’s too slow. PayPal the goal isn’t to be visa. Visa is different. The goal is usability then you can scale.\n29:45 Fawkes: PirlPays easy entry and payment and online shops to integrate as a payment. We are not internet money. We want to provide services and infrastructure easy entry to have the possibility for direct exchange. The goal is not to be the money you use.\n30:45 masterdubs: We don’t want to re-produce the current financial system in Pirl. We need to build something better. Something more usable and less money related. We must do it step by step. We try to improve things we use. Micropayments are possible but it’s not our focus, you only need a plugin. It will be on the online shop.\n32:30 Fawkes: We want to target the benefits of a complete desterilized infrastructure. With immutable content. Example, you don’t have a ddos connection on a website. If a site or app is hosted on our network, you will have many points to your connection. Even if you got ddos attacked on one they couldn’t get you on all, it’s very special. It’s a service that goes beyond crypto and beyond crypto markets. It has real business benefits. Everyone should check out the whitepaper and the docs. We want to reach other markets other than the crypto markets. Over time as these services come along more and more detail will come up. 2018 was the year of prep on the infrastructure. Now were close to with content and premium MN in place so now 2019 will be the year where you will hear more and more of the services we can provide and the capabilities of the network and what it can do.\n35:45 masterdubs: Talks about examples of how to use the services. Like how to create a token, which is already available in the Pirl docs. There will be more tutorials soon.\n36:00 Fawkes: Talks about how Pirl, we push things out when they’re ready. We provide everything in bulk when we meet the exact quality we have come to expect from our team. Before we never use to talk about the infrastructure, now we have it in place, now what you can expect us to talk about the infrastructure. Over time you see products pop up for example, PirlTube it’s in beta you will see more services and more documentation as we develop.\n40:00 masterdubs: Drops the Proof of Review POR. Talk about the ma and where all the MN are located now. Discussion on where your MN is located to increase rewards and increase decentralization.\n44:30 Fawkes: Talks about focusing on places that have tight censorship laws. Example Turkey, China, Middle East. Freedom of speech is a huge use case. Many social services can benefit from immutable content.\n46:00 Talk of Politics. Need to spread out the VPS providers.\n48:00 masterdubs: Talks of the relationship between where your VPS is located. Could mean higher reward.\n49:00 Fawkes: Talks of moon. Pay attention. Pay very close attention.\n52:00 masterdubs: Talks how PirlTube works with the rendering. It’s a matter of no single point of failure. We want decentralization. Upload times are fast.\n54:00 Talk of what’s better. Mac or Windows.\n58:00 Numnah blows the meeting.\nOver and out,\nNumnah\n Author:\n@Numnah\n@Dptelecom\nContributor(s):\n"
},
{
	"uri": "https://pirl.live/ipns/QmVKFJs81erni4KV6Hzt2xVwGtC2P1WtE9A4MxNThFVFVh/en/pirl-roundtable-meeting/2018-12-01/",
	"title": "Roundtable 2018-12-01",
	"tags": [],
	"description": "",
	"content": " \u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt; HEAD\n \u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt; local_version\nRound Table 01.12.2018 PIRL ROUNDTABLE MEETING SUMMARY\nDate: December 1, 2018\nParticipants: The People\nMeeting Agenda:\n• Complete transparency\n• The idea of the round table meetings is direct communication with the Pirl community.\nSummary:\n4:00 Fawkes: askes community for questions\nmasterdubs: Brief discussion on ICO’s being a scam and distrust in crypto. masterdubs about Pirls goal on educating the community.\nFawkes talks about crypto being all about market place, exchanges and traders. Which is not the intent of crypto. It’s supposed to be a technology that has benefits. Privacy, freedom of speech, the technology has many directions. Next phase in crypto will be we need users not traders.\nWe will keep on developing as many use cases as possible with the right infrastructure you can do anything!! Make use of the technology will be the next cycle in crypto. Crypto should be store of value how can you have that with volatility? Target market is the users\n11:00 masterdubs: The short-term goals for PIRL are to finish the company then introduce PirlPay. T he goal is to make it easy to transfer fiat into PIRL. Easy entry with benefits of use. Trading from the marketplace or exchange to direct fiat. All about ease of use.\nmasterdubs: Discussed credit card interaction with PIRL and how it’s not a short-term goal. The idea is no single point of failure.\n15:00\nFawkes: Talks about how the crypto cards work. Which are essentially pre-paid cards.\n18:00 Fawkes: Talks about concepts like SMS or email to convert to PIRL. It’s possible. All you need is the development. If you have PIRL pay. You can have direct connection from fiat to PIRL. Anyone can accept payments they can receive whatever payment they like. They can accept PIRL as a payment then on their end it would be fiat. Or vice versa.\nWith the proper internal exchange.\n20:00 masterdubs: PIRL pay will be rolled out once the company is all done. Plan is to build an exchange. But not a shit coin exchange. One to fiat.\n21:00 No ICO ever! Talk about how ICO’s crash the market and the damage it does to the ecosystem. Moral of the story almost all ICO’s fail and or will fail.\n25:00 Fawkes: Talks about contracts between people in the marketplace and how an escrow can help solve the problem. Talks about scams on eBay. Possible solution is escrow, as its basic. It collects money form the buyer. When the buyer says product the is good. The seller receives the payment.\nThis system can still be exploited. Seller reviews will help with trades. You will have a profile for reputation.\n29:00 masterdubs: Next big milestones are the company being formed and Pirl pay. Also, fine tuning everything else before moving forward. Approximately 3 weeks focusing on the roadmap.\n30:00 There will be a new version of Poseidon coming out SOON. More talk about the company license, structure and the waiting game.\n33:00 Fawkes: Talks about Bittrex and other possible exchanges. It will be easier to apply for exchanges once the company is started.\n34:00 Fawkes: Talks about the relationship between the blockchain and the company.\n36:00 Fawkes: We work in our basements for the love of Pirl!\n38:00 Fawkes: Talks about Dapps and the content MN network you can have data for your Dapp there.\nIpfs is an open network. Storage MN’s are private with encryptions and permissions. More on this topic later. encrypted storage. Like an encrypted database that can be used.\n40:00 Fawkes: Talks about storage MN’s being like google drive. You can keep things private or share them if you want. You can also host a website on the storage MN.\n42:00 Fawkes: Talks a little about storage MN encrypted private with controlled permissions.\n43:00 Fawkes: This technology you can do anything! Web 3 works different. The backbone is smart contracts. You have traditional infrastructure. When you have storage MN things become unlimited. When you have the right infrastructure, you are open for anything!\n45:00 There is proof showing that Pirl ipfs service can host content accessible by the browser PirlDocs on ipfs\n46:00 A video link was shared. Of rain in 4 k. You don’t have to wait for it to pre-load. Direct strait to play out. We can do anything! 4K rain on ipfs\n48:00 Fawkes: These meetings are for the people. We are here together. A community. One purpose. Bring more users! Not traders!\n49:00 Talk of DNS. More on this later.\n50:00 Some chat with all community members. Some trolling from dev about the secret sauce.\n54:00 Fawkes: ICO is dead were now onto STO. It will also die.\n55:00 masterdubs: There is possibility of a SoundCloud like site. Podcasts anything!\n58:00 masterdubs: Anybody who wants to build a app can! The new poised will solve a lot of problems.\n59:00 Problem solving. You must use CentOS when setting up your MN. New Poseidon will solve a lot of problems. Stay tuned! Remember to spread the hash rate to different pools and please don’t mine to exchanges.\nOver and out, Numnah\n Author:\n@Dptelecom\n@Numnah\nContributor(s):\n"
},
{
	"uri": "https://pirl.live/ipns/QmVKFJs81erni4KV6Hzt2xVwGtC2P1WtE9A4MxNThFVFVh/en/pirl-roundtable-meeting/2018-11-24/",
	"title": "Roundtable 2018-11-24",
	"tags": [],
	"description": "",
	"content": " \u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt; HEAD\n \u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt; local_version\nRound Table 24.11.2018 PIRL ROUNDTABLE MEETING SUMMARY\nDate: November 24, 2018\nParticipants: The People\nMeeting Agenda:\n• Complete transparency • The idea of the round table meetings is direct communication with the PIRL community.\nSummary:\n1:00 masterdubs/Fawkes: Hi everyone. Let’s start with any questions.\n2:30 Fawkes: We don’t know what happened to Duke. People are losing interest in crypto. Maybe too much R/L work. We don’t know. He might come back.\n3:30 masterdubs: Its ok we will move on and solve more problems.\n4:30 masterdubs: Right now, were fresh out of the 51 % attack. I’m going to be working on Poseidon. Let’s be patient, I will have a program later this week. This week was stressful with the fork, I need to recover.\n5:30 Fawkes: On the marketing side we’re on the move creating content. Our team is working hard. We have contacted some press releases. Everything is in motion. We are working on the complete picture for the month ahead. PIRL Tube is moving nicely.\nWe’re getting closer to the goal every day. While we were dealing with the 51% attack, the development of PIRL Tube didn’t stop. Almost everything the community asked for is put in place. So, you can expect a new version soon.\n7:30 masterdubs: We still had some good development this month. We’re happy. We put our fingerprint in the blockchain.\n8:00 Fawkes: We can spread the message about PIRL Guard. It benefits all of us. A big part of the marketing is done by the community. We want to spread the word about the project, and this protection system we have created for the community. It can be a way that people learn more about PIRL, it also can be a way that many people don’t lose their money over 51% attacks. With the data available in the web close to 50$ million vanished from the markets. The attack could have crushed billions in the market cap. 50 million in cash is way more in terms of market cap, it could be Billions. It’s very important PIRL Guard is open source and free. The work will help all crypto. This is the first core solution against a 51% attack.\n10:00 masterdubs: DNS isn’t top priority now. I’m not working on it. About “What to Mine” I’m hoping they will be back soon.\n10:45 Fawkes: We will send “What to Mine” a message to update them.\n11:30 Fawkes: Were looking for front end people who have skills in user experience. Maybe a Java script developer. The PIRL Guard is open source.\n12:30 masterdubs: You must mention PIRL if you use PirlGuard.\nFawkes: It’s the same as Ethereum code, were following the same license with PirlGuard. Even if it’s free you must mention the source.\n13:30 masterdubs: Shares a link** showing the PIRLTeam implementation in the code.\n14:30 Fawkes: A good engineer can implement this into any system.\n15:00 masterdubs: Shares a screen shot of an attack.\nLINK \nYou must mine a lot of blocks it’s almost impossible now 😊\nActually its way more as there is a penalty system in place as well so its way more than just mining blocks.\n16:15 Fawkes: I don’t even think the attack is possible.\n17:00 masterdubs: About the fork it went as planned with the PIRL Guard implementation. The block time to produce is between 10 and 13 seconds. It’s stable. The difficulty algorithm is very stable. The speed of the chain is back to normal. We got added for free on another exchange.\nInsert ** link\n18:45 Fawkes: What we know about this exchange is it’s been around for a while. We hope it’s legit. Do your own research! Never keep coins on an exchange. Don’t mine direct to an exchange. As for getting listed on Coinbase it will take time. It might be possible down the line. We will never pay to get listed. We want to get listed with quality product that has great use case not because we paid to be listed. There are exchanges that care about the product.\n20:20 Fawkes: Founding the company will give us legal status, which is more and more required when listing on exchanges. It will permit us to make our own exchange with direct deposit to fiat. With the company you will have the legal responsibility. We’re not here to run away were here to build a product. We want to build it legally, we want to bring decentralized products to everyone.\n21:00 masterdubs: It’s important we get a bank account. It’s important to pay people. We want to be legit!\n21:35 Fawkes: You can comply with laws, create official business partnership’s and entities.\n22:00 masterdubs: Now, the company is in the review process by the state. We will complete a business plan with folks from scratch. Extremely complex like the white paper, with some confidential information. We’re getting reviewed by the Government to give us a license to be legal, we hope this year. It’s not in the USA, it’s a little country that works with the blockchain. Smaller countries are easier to work with. We want to bring lots of things for example the PIRL Academy and so on. We will share over time. Europe doesn’t want to take risk. They are in the banking game. We share news when we have it. Now we wait. We hope to hear by the end of this year or early 2019.\n27:00 masterdubs: stats.pirl.io hasn’t been changed in a long time and isn’t completely accurate.\nOur network hash-rate is great and it’s coming back to normal. People like PIRL for what it is. Storage MN isn’t top priority now. We want the company released, then PirlPay and PirlExchange is very important for mass adoption.\nWe want to improve our tools before making more. The PIRL App will be our central hub but we need to continue to improver everything. It’s an improvement period. First PirlPay, PirlExchange, PirlTube out of beta, The MN is now out of beta.\n30:00 Fawkes: We also must fix PirlApp on the user interface and user experience. We want ease of use, good user interface and user experience.\n30:45 masterdubs: Once we have our own exchange we don’t have to worry about other exchanges like Cryptopia if they close. It’s dangerous for us to depend on them\n32:00 Fawkes: At this point thanks for your support.\n32:30 masterdubs: The content MN is released. 200 PIRL per day!\n33:30 masterdubs: Maybe we can make a bounty for a person to create a calculator. Just a one pager to attach to POISEDON. It’s an opportunity to get some PIRL. Some coins haven’t been replying.\nProvides a\ndocument \nfor document tier 3 verified. Proof of Review.\n36:00 Fawkes: We passed all the tests. People are aware of how much we have developed and what we have done in this time.\n37:00 masterdubs: kills meeting with the review.\n38:30 masterdubs: Poseidon we will remove the dynamic explore we will replace dev explorer for the dynamic stuff. We will keep wallet transaction. This will be an improvement and speed things up a little bit. No advice on shared MN. It’s hard to be secure when dealing with them. We don’t want to give advice on 3rd party services.\nThanks community, Thanks team.\n42:00 masterdubs: We will not pay for random products like GIN. Poseidon can do the stuff.\n43:00 Fawkes: We want to be safe!\nMeeting is finished.\nOver and out,\nNumnah\n Author:\n@Numnah\n@Dptelecom\nContributor(s):\n"
},
{
	"uri": "https://pirl.live/ipns/QmVKFJs81erni4KV6Hzt2xVwGtC2P1WtE9A4MxNThFVFVh/en/pirl-roundtable-meeting/2018-11-17/",
	"title": "Roundtable 2018-11-17",
	"tags": [],
	"description": "",
	"content": " \u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt; HEAD\n \u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt; local_version\nRound Table 17.11.2018 After the successful fork, all exchanges will be ready. They are waiting for the call. Cryptopia is a little bit different, but it should not be a problem. We are almost ready for the fork at the moment. We need to cross the fingers and push the button. Nodes are running, and marlin has been updated.\nWe had little problems with our network a few days back, but everything is working right now and runs as it should.\nIf you have a one-click installation on your masternodes, your updates will be cared out automatically. If you need our help with something, ping us in discord. Everything needs to be updated before the fork, or you will not be able to receive the rewards. This situation is 20 000 blocks away at the moment.\nWe thanks to everyone who has participated in our contend masternode testing. It was awesome to see all those people who wanted to help.\nOur next priorities are to continue our work with marlin and to put the PirlTube out of beta. Then our next target is PirlPay and our fiat gateway.\nBLock-time can be maybe increase in next few days, but we will stabilize after that the process on the go so don\u0026rsquo;t be afraid, everything will be as planed.\nZelCore is like Exodus, and they develop a multi-asset wallet w/ a DEX built inside of it. This idea is interesting, but we don\u0026rsquo;t have time for that right now. We will take a look at this topic later when all Pirl matters get settled. Good marketing and all the rest is going to come organically with development and the product realizing.\nWe are thinking about signing for BlockFolio and some other crypto trackers. · Cryptocompare OK · Blockfolio Signup needed · Delta OK · Cryptagon Wait/ signup required · Cointracker Signup required · Cointracking OK · Altpocket OK\nQuestion from Murphy: I\u0026rsquo;m a little confused about Pirl\u0026rsquo;s place in the market (in the future). The marketing material makes sense, in a small-scale way, but I\u0026rsquo;m trying to figure if/how Pirl will be used in business. The reason I ask is that I\u0026rsquo;ve been studying Hyper Ledger a bit and impressed by the business cases it solves. I sort of feel as though Pirl has aspirations beyond a simple marketplace. (a blockchain technology company). Answer by Fawkes and Dubs: Hyperledger is the solution of the Linux Foundation. Pirl is building an infrastructure which can be used for building applications. We want to create a place of creation for our users and bring solutions for future needs. We are always open to further development.\nHere we propose few notes that can explain a difference in between Ethereum and Pirl. Showcase scenarios:\n1/ Company “A” wants to build a decentralized application for its 500 hundred personnel across the globe. This includes creating an immutable(impossible to manipulate) dossier of each employee. Everything is stored in a file that can only be updated with new information and can only be accessed by the authorized personnel. This data cannot be erased from the records, and it\u0026rsquo;s not vulnerable to a single point of failure. Options: a/ Using Ethereum The decentralized application can be built using standard technology smart contracts (backend) + frontend. The interactions will be all recorded by the blockchain, but the data cannot be stored on it due to its size that cannot fit in the blocks. Company “A” will have to use either a centralized server which will centralize the application or 3rd party decentralized storage solution which will require additional coding and adjustments. b/Using Pirl The decentralized application can be built using the standard technology with smart contracts(backend) + frontend. The interactions will be all recorded by the blockchain, and the data will be stored on the same platform through its enterprise-class globally distributed storage masternode network. Simple to use interfaces to upload, read and write data in a completely safe cryptographically encrypted environment will add ease to use to the entire process. Providing one stop shop for everything that Company “A” needs.\nThis is just a fraction of our future solution. I think you will be all amazed by what we are doing and developing at the moment.\nPriority for the next week is to take some rest and then succeed in our HardFork.\nCommunication with SystemCoin is really bad. We don\u0026rsquo;t know if we can trust them anymore. Their reaction times are very long. I think it is essential to have good communication with your customers and partners. That\u0026rsquo;s what this all about. However, we will be keeping them updated. On the other hand, STEX exchange looks pretty good, and they have a rapid and reactional support team in a few languages.\nSocal has a meeting with another exchange we can be listed. https://beaxy.com/ We have good chances to get listed there right after the fork and when everything else will be set to normal.\nWe are missing 80 votes for a second place on DEX voting right now.\nThank you all for your attention and for a nice cardinality of roundtable attendees and listeners:).\nHave a nice weekend Pirlians!\nSincerely Mickey\n Author:\nMickey Maler\nContributor(s):\nDptelecom\n"
},
{
	"uri": "https://pirl.live/ipns/QmVKFJs81erni4KV6Hzt2xVwGtC2P1WtE9A4MxNThFVFVh/en/pirl-roundtable-meeting/2018-11-10/",
	"title": "Roundtable 2018-11-10",
	"tags": [],
	"description": "",
	"content": " \u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt; HEAD\n \u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt; local_version\nRound Table 10.11.2018 Hello everybody, welcome to another episode of RoundTable. We have a few announcements to be made this week. The first of them is today, you can read him in our announcements channel. Monday or Tuesday will be our releasing days. We will be announcing and producing our documents and news to you, our community, in these two days of the week.\nTuesday, the node will be ready for you to download and use. Our Fork will be in the next ten days from now, so please, got ready, do your updates and wait for the big things to get happened:).\nPlease, keep in mind, the Testnet pool does not pay real Pirl.\nContent Masternode rewards: This is one of our highest priority right after we will be done with our 51% testing.\nOur update will bring many securities enhancement and other improvements.\nIf anybody wants to improve the PirlPool software, we can share the code and let you play with it, develop it and make it better. You are welcome to contact us.\nThe hulk security update node will be brought to light on Tuesday, November 13th a mandatory update for all the Masternode and pool operators. After the node is made available everyone will have to be done with the node update by November 17th. The fork will take place at block 2442442 estimated to occur on November 20th based on current block time. Exchanges shall reopen shortly after successful fork and node update. Cryptopia will be opened after our Fork. We are in contact with all exchanges, and we are doing our best to make trading available again as soon as possible. We have also written confirmation from Cryptopia.\nOne-Click Masternodes DO NOT require any action! They will be updated automatically by Poseidon. The owners of a Manual setup Masternode need to upgrade their Masternode by installing the new binaries. We recommend that you install the new binaries as soon as possible.\nOur PirlTube has a new version, and we did a lot of fixes and updates. We are happy about how is testing and bug hunting going. We are far from the first beta version. There is still much room for this app to grow but we are happy how it works and looks. PirlTube is not our main product, but we are proud of it. Our main products are our entire ecosystem which will be providing the experience of decentralization for masses. We are for keep improving our ecosystem, security and making conform for our user and our community members.\nOur primary goal is about making Pirl keep contributing to the blockchain technology and building a solid product. Our first shot was bringing multi-tired Masternode network using VPS to the blockchain, and we want to keep going.\nPlease, everybody is allowed to go to our suggestion channel and leave our your recommendation and wishes there. We read it every day.\nAbout our Pools. You will need to update your nodes. Things will be working like they were used to do. Here is the Testnet pool link:https://github.com/phatblinkie/official-pirl-testnet-pool Please, don\u0026rsquo;t mine into exchange wallet. It\u0026rsquo;s a bad idea. Block time is about 13,000. We are happy with this number. Your calculation will be exact and precise. The monetary policy is based on block numbers, not time itself.\nUse these wallets please for mining into: https://docs.pirl.io/en/wallets/\nRead our Docs; there is a lot of manuals and know-how how to do stuff. Really much information there and also a possibility for you to contribute with your manuals, instructions. We are more than happy to reward such a helping behavior.\nHave a nice week. Sincerely Mickey\n Author:\nMickey Maler\nContributor(s):\nDptelecom\n"
},
{
	"uri": "https://pirl.live/ipns/QmVKFJs81erni4KV6Hzt2xVwGtC2P1WtE9A4MxNThFVFVh/en/pirl-roundtable-meeting/2018-11-03/",
	"title": "Roundtable 2018-11-03",
	"tags": [],
	"description": "",
	"content": " \u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt; HEAD\n \u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt; local_version\nRound Table 03.11.2018 This roundtable was very informational. Testing, Coding We will be ready with our internal testing by the start of next week. We will also open the TestNet Pool, and you will be allowed to mine on it and test it with us. Everybody is welcome to join us and contribute. We also finish our coding, and we are pleased that everything works as we want and we are now ready to get it to TestNet and after one week of testing on TestNet we will be able to try it on the main network and move forward.\nWe are proud of our team, and their work since Pirl shows to the world how the crypto project should be handled. Pirl will be more secure and more valuable coin in the future. We made another vital contribution to the blockchain technology. Hulk implementation will make the difference.\nCryptopia will implement our fix when everything is adequately tested. We can provide you with a date Cryptopia reopens their wallets since this is their own business. We keep positive communication in this investigation, and both parties do its maximum to solve this as soon as possible. Our case is not only to fix this problem but to provide a solution and prevention for the future.\nThe fix will also adjust algorithm difficulty. We spoke about it at our previous meeting.\nYou can also be awaiting a few announcements next week. Our primary focus is to do our work and report it afterward, but we want to keep you as much updated as we can.\nWe have first people signed in for our upcoming PUBG Tournament. We have a new version of PirlApp and PirlTube. A lot of improvements and bugs has been sorted out.\nContent masternodes will be sorted out after we will solve security problems first. We are sorry for the delay, but our focus is toward Pirl\u0026rsquo;s future for now. Everything will be sorted out afterward.\nPlease be advised that there are scammers impersonating team members trying to convince you into a scam OTC deal. Pirl Team would never make such an offer to anyone. Don\u0026rsquo;t catch the bait and stay safe.\nWe will officially announce our new team members to the world via Twitter. Stay tuned guys.\nProgPow is history that caused us this little trouble and also put aside regular people who wanted to mine on their PCs. So we will change this algorithm to a new one who will better represent our ideology about mining for everyone. We will go back to our decentralized roots. We don\u0026rsquo;t want to do a change; we want to implement a solution. Read our blog for more information if you are interested. Also, It will be an open source code since we want to do this as a contribution to the world. Now its time for people to come to us and Copy/paste our code :). It will be a \u0026ldquo;Proof of Chain.\u0026rdquo;\nMickey\u0026rsquo;s erotic calendars were only an internal joke. Don\u0026rsquo;t make any purchases guys, thank you.\nWe will announce articles about attacks aftermaths and explain what exactly happened with all of this 51 stuff soon.\nHave a nice week. Sincerely Mickey\n Author:\nMickey Maler\nContributor(s):\nDptelecom\n"
},
{
	"uri": "https://pirl.live/ipns/QmVKFJs81erni4KV6Hzt2xVwGtC2P1WtE9A4MxNThFVFVh/en/pirl-roundtable-meeting/2018-10-27/",
	"title": "Roundtable 2018-10-27",
	"tags": [],
	"description": "",
	"content": " \u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt; HEAD\n \u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt; local_version\nRound Table 27.10.2018 Status on Cryptopia: We are waiting for them to share something with us. It should be done during the next week. We don\u0026rsquo;t control them, they are a third party for us, and we will do our best to finish this soon. Nobody will lose their coins. They are now under their audit and maintenance.\nHoard voting: We have successfully done a Hoard voting for DEX listing, and now we are waiting for Hoard to announce the winners of this round. Its really good looking project and we hope they will deliver something good in the future. Good for us to be there. DEX should be open by the end of Q2 2019. We showed the power of this community, and we made a killing in those voting.\nMarketing: We have new members on our team, and we are preparing an excellent marketing show. We will use the powers of our members and our internal funds for doing the best for the PIRL. MinerAllen and Wracul is our new empowerment. We also schedule regular marketing meetings each week.\nPirl company registration: We work on legal stuff right now and set down all the paperwork which needs to be done before going further. We also want to implement our Fiatgateway for crypto and bring the mass adoption to the people, to bring honesty into this world and make everything easy and fully transparent. So a lot of work to be done but we are on the right tracks now.\nPoR founder joined the meeting: Founder of PoR (proof of review) introduced his project and told us about possible cooperation in between this revolutionary consensus establish Algorithm and Pirl. Proof of Review Builds trust among developers, miners, and investors. PoR will be an industry standard in the future since the audits are critical feature to have in this crypto sphere.\nPUBG Tournament registration form is out, and you are welcome to join and enjoy some fun with us.\nHave a nice week. Sincerely Mickey\n Author:\nMickey Maler\nContributor(s):\nDptelecom\n"
},
{
	"uri": "https://pirl.live/ipns/QmVKFJs81erni4KV6Hzt2xVwGtC2P1WtE9A4MxNThFVFVh/en/pirl-roundtable-meeting/2018-10-20/",
	"title": "Roundtable 2018-10-20",
	"tags": [],
	"description": "",
	"content": " \u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt; HEAD\n \u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt; local_version\nRound Table 20.10.2018 Masterdubs said that this was a really long and nutrient week for Pirl. Pirl developer team worked hard to find an elegant solution to fix current 51% attack and prevent them from happening again in the future. More about this fix will be said when the work will be done, and all possible test will show results as expected.\nFawkes and Masterdubs gave their tank to all community for fantastic support.\nFawkes gives valuable information about Pirl current state. Socal, Masterdubs, and Fawkes then answer the question about Biga. Right now, Pirl and Biga stop their marketing efforts right now but we are still in contact. Its hard to do proper marketing push in this market and if it not hard, it is definitively expensive. Biga did good stuff for us, and we appreciated their effort. Right now we are trying to come out with our marketing plan and maybe to onboard new members who can help us with it. Next team marketing meeting will be 23.10.2018 where all information and following marketing steps will be discussed.\nMickey said his thanks to the team and community. He also asked every member for creating a Steemit, Medium, reddit, and Twitter account and help Pirl to reach the masses more easily. Every clap and every vote counts. He also commented current DEX voting and ask the community for keep on moving in the right direction.\nSocal then mentioned that he is also in communication with another CEO and that he will do his best to get Pirl listed on another exchange. There will also be a PUBG Charity tournament on 11.11.2018. Everybody is welcome to join this event. Starting fee is 0, and there will be a lot of PIRL for you to win. Rewards for every first, second and third place along with charity donation. The total number of entrants will determine the total number of rounds and more people will join the more rounds we will enjoy. So prepare yourself, get in that extra practice, as this is a chance to win PIRL and help a charity for playing a GAME. Mickey did an article about this event which will hit your Discord mailboxes soon.\nDeveloper George said a few words about their current work and his statement about his satisfaction with a solution they come with. This solution will protect PIRL against another double spend attacks. Team cant share more information about this solution where masternodes act as a firewalls, but he told that attacker will have to have a much more funds and very little, almost 0 chance for success. Mastedubs than add that the attacker will have attack three chains at the same time, which will be very hard and expensive to do. More info when the fix will be officially released.\nFawkes thanks everybody for their contribution and warm everybody: not to go to the beach cause its freezing there, and you can get cold, haha :)\nHave a nice week. Sincerely Mickey\n Author:\nMickey Maler\nContributor(s):\nDptelecom\n"
},
{
	"uri": "https://pirl.live/ipns/QmVKFJs81erni4KV6Hzt2xVwGtC2P1WtE9A4MxNThFVFVh/en/pirl-roundtable-meeting/2018-10-13/",
	"title": "Roundtable 2018-10-13",
	"tags": [],
	"description": "",
	"content": " \u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt; HEAD\n \u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt; local_version\nRound Table 13.10.2018 Hello everybody, this week was really long for PIRL, and we have a lot of things which are running on the background. The company registration is running smoothly, we are doing some paperwork and so on, completing the business plan, filling ideas on how to prevent a money laundering.\nWe will have a few Announcements for you soon, so stay tuned.\nExchanges. We will be trying to get listing on exchanges as our work will be advancing. Right now we are working on PirlTube. We don\u0026rsquo;t want to dream big here(but it\u0026rsquo;s important, right?) but we are happy about Binance approach and their listing fees. Its ongoing. Binance listing is not free, so its kind a long run for us.\nCurrent price. Well, we are developing, coding, working hard. It is not our fault that market situation is still held in bears claws and the price of Pirl is jumping up and down. This is a reflection of the market we are in at the moment. We use this pause in the market for marching forward with our goals. The most important goal for us is Pirl itself and our product. Price will follow if we will be successful.\nMickey has become an official writer for GoodAudience on Medium platform, and that means a subscription and exposure over this great company to 250 000 readers every month with all his content. Mickey also thanked everybody who contributes in the last month with writing our KB which grows like mushrooms after a heavy summer rain.\nCEO Julien told us something about his every day life= 4 hours of sleep VS 18 hours of working/coding/hulking. Since this is his life and we can tell you; he doesn\u0026rsquo;t care about a current price at the moment that much. He cares about a goal to make this project a real deal- solid unit, well coded digital splendor and gateway for every day use and mass adoption.\nEverybody is welcome to code something usable for PirlApp. The only thing it needs to be accepted is a decentralized concept, code, and documentation and we will be happy to add it into the PirlApp.\nPirlApp is rolling without local sync with blockchain data. It\u0026rsquo;s primarily using RPS. Masterdubs has some secret solution with non-centralized elements but we are still working on it, and when it will be ready, we will add and let you know about it.\nIPV6 in our product is a soundtrack of the future for us at the moment, but we will implement it when it will be ready for this world in general.\nFawkes wrote \u0026ldquo;Good night\u0026rdquo; to Masterdubs, and his response was: \u0026ldquo;Good morning.\u0026rdquo; :) Fawkes Belgium dogs howl in the background.\nContent masternodes will be out of the beta testing phase soon. Rewards will be distributed from an official release. No rewards will be allocated for beta testing. Masterdubs said that he is working on a new concept of the masternode (working on the side chain) current algorithm is not that good for transactions, so his goal is to make it swifter and useable with the help of that new side chain. New ideas are pouring in. He is planning to use a masternode network for that purpose. This will be an impressive step forward for the project. Infrastructure will be updated. Weak up-code-improve-repeat!\nIf you know some talented people, bring them in. Send us some emails we will be pleased to meet them and invite them for cooperation if our requirements will be met. Application form is available for you and your friends on our discord channel\nMickey has got motivation speech about Warren Buffet ideology and T-shirts of Vitalik Buterin.\nPathblikie wanted to tell us something, but his microphone was broken. So we are looking next time when he will be armored with his new gear!\nPirlTube is developing at a good peace. Every day we are improving something else. You load new content, and we are happy that you are so enthusiastic about this project.\nPirlInstagram is up, and this is excellent news. Your support is what makes us work better and try harder with reaching our goals.\nWe will have a StarCraft tournament around 9 of November. So, come to join us. Ask Socal for more details if you are interested and we will be happy to have you there. Dubs said that he was good at Counterstrike 15 years back. Socal is a hard worker in PIRL backstage.\nSincerely, Mickey\n Author: Mickey Maler\nContributor(s):\nDptelecom\n"
},
{
	"uri": "https://pirl.live/ipns/QmVKFJs81erni4KV6Hzt2xVwGtC2P1WtE9A4MxNThFVFVh/en/pirl-roundtable-meeting/2018-10-06/",
	"title": "Roundtable 2018-10-06",
	"tags": [],
	"description": "",
	"content": " \u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt; HEAD\n \u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt; local_version\nRound Table 06.10.2018 All non-question related content has been proved by Masterdubs and Fawkes Beginning: Fawkes said his opinion about potential competition which is attending to do something similar to pirl. They are welcome to do it.\nWe have mentioned multiple time that we will be developing the pirltube and thas a part of our ecosystem. All the futures development. People will be able to thanks for content and reward good content. There will be a price for someone who will want to watch a particular video. They will pay for example 15 Pirl, and then they can watch it.\nPirltube will have decentralized streaming in the future versions. But now, pirltube will be released without this features.\nAnnouncement: no special announcement for this day but we can say that content masternode runs well, and maybe we will be able to put it out of the beta testing phase by the end of next week. The official announcement will be planed for a beginning of the next week, and then we will be sharing all the information about how this will work.\nQ: Why the content masternode don\u0026rsquo;t pay out any rewards to their owners? You gotta stake 10k pirls to set one up + the VPS fees MasterDubs: Because we have always worked like since the beginning of pirl, we have put masternode in beta, Beta, and we don\u0026rsquo;t pay for beta because we wont to be sure that everything is running smoothly. People will get paid when the product will be out of beta testing. Be active in beta testing is everybody free will and decision. It\u0026rsquo;s a personal choice. We thank very much to everyone who participates in our testing. Thank you.\nPhatblinkie | CryptoPools. If your a brand new user, maybe someone who just heard about pirltube. Then you download and open it. There is no way for them to actually register without being involved enough in crypto actually to buy pirl, and then be able to send some to the address on the pirltube app, to be able to register to be able to get an account even to use the app. I feel this is a problem could the initial registration be paid from the dev fund?\nFawkes: We will do a \u0026ldquo;how to use Pirltube guide\u0026rdquo;I near future. Now we are trying to finish the product. Also, people will be able to buy crypto directly from the pirlApp.\nQ: What is happening to those funds in the meanwhile? We agree that partition of that will go to premium masternode holders and a portion of that will be dedicated for community issues solving, pirl docs creation. We will have voting in this manner. And as we said earlier content masternodes will be changing.\nAlso, we are letting you know, that we did some changes to our team. We removed a few people who haven\u0026rsquo;t much time for the project, and we understand this very well. We also opened a few new positions. We have now TestObject in the team now. He is hired as a writer. We want to open more positions and everybody who is willing to contribute his time to the project is heartily welcome. We want to exchange active people with required qualities for people who don\u0026rsquo;t have much time for the project anymore.\nWe are actively looking for the ProgPow developer at the moment.\nQ: Will we have a log for the content nodes about the usage? Yeah, You definitively will have that.\nQ: How much was it utilized? We have some ideas already, but we are still working on the integration. Can say more about it when we will be done.\nQ:daxmd Now that the MNs are \u0026ldquo;stable\u0026rdquo; and PirlTube is usable, what is next for this project? ETA to storage MN, etc. A: We need to improve and finish a lot of things. As we speak in our previous session, the storage masternode is recreating from the scratch so it will not be done till the end of this year. Then we will follow our goals in the roadmap. The marketplace for example and another thing.\nQ: What has BIGA done so far to promote Pirl? Has the partnership been worth it so far? A: Only the partnership has been established so far. I think it is quite clear what biga is doing. They did some push with their tweets and retweets. We have some influencers. We will share their videos. They are trying to d complete marketing via their twitter and net of influencers. We will do this step by step since we have better control over our marketing expenses. When we are running in the right direction, we will enforce our marketing focus. Talking about Biga and the feedback. As you know, the constructive critiques are always welcome. Let them know about your opinions.\nQ: packetflow: What about the space needed by content and storage nodes. Videos require a lot of space. The requirement says about ~20GB per node. With about 600 nodes we have ~12TB. What if the usage on pirltube does ramp up extreme quickly? A: This will be highlighted in the nearby announcement. We want to reward based on the space used; people who are providing some services, so that people will add more and more to shared storage. We can go higher with VPS requirements but the problem we got ist that vps is changing our requirement for 4 Giga, but a lot of people got sad from that fact since they don\u0026rsquo;t have 4 Giga.\nWhat we need not is to have more creative contributors who can help us with technical documentation. Please, everybody is welcome. We will be more than happy to reward quality content. If you need information or you already have something, please, feel free to contact dptelecom. Need to say that we got some improvements in our technical doc this week. We are happy to say that. We will also add video guides to our docs in the future since we think it is good to have.\nPirltube for Linux is not what we are focusing right now. We will try to improve the windows and the Mac version first. Then we will take our steps to Linux, so you have to wait just a little bit longer for it.\nI am also glad that a lot of videos has been uploaded on Pirltube so far and we are glad that everything is as we expected. Results of Pirltubes tests was really good. Please, take note that there is no more admin proof check available on PirlTube, so your videos are automatically approved. We changed away how the thing worked a little bit. If you find some bad content, you can sing it for a ban of course. We will also add the Terms of youse for our applications briefly.\nBtw, PIRL logo is publicly shareable content so don\u0026rsquo;t hesitate to use it if you want or need it. It\u0026rsquo;s ok in our books. You have our blessings :)\nQ: optimistic Corn: Any plans to add 4K support later? A: 4K is good, so yeah, we will be improving in this manner to become the better and better, but 4k is sometimes a wasting of bandwidth, to be honest. But don\u0026rsquo;t worry guys, one step after another:) Our focus is for 1090 resolution which is perfect and sharp.\nOur designer Max has got some really cool designs for our T-shirts. Pirltube logo motive, pirlstorage logo motive, all you ask :)\nTeam healthy thanked dptelecome who did a really excellent job for the team, and he is very active and productive member these days. He is always in contact with the community and nonstop working. Thank you very much, buddy! Welcome to the team.\nPoseidon makes good results. dptelecome is great\u0026hellip;so, let\u0026rsquo;s celebrate! :)) See you soon, guys. We are happy that you have been with us today. Somebody please a youtube version of this session to our PirlTube\u0026hellip;we will reward you for that ;) Farewell, MasterDubs and Fawkes.\nSincerely, Mickey\n Author(s):\nMickey\nContributor():\ndptelecom\n"
},
{
	"uri": "https://pirl.live/ipns/QmVKFJs81erni4KV6Hzt2xVwGtC2P1WtE9A4MxNThFVFVh/en/pirl-roundtable-meeting/2018-09-29/",
	"title": "Roundtable 2018-09-29",
	"tags": [],
	"description": "",
	"content": " \u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt; HEAD\n \u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt; local_version\nTL;DR PirlTube is released today for testing! You can use PirlApp to access it once it finishes compiling! Oh wait, there it is! PirlApp and PirlTube are out https://drive.google.com/drive/folders/13CUHTDr3bB0zBeWb0ebHEJ0H8TY8evR4\n This link will expire after the beta testing. For all current releases see the official http://www.pirl.io\n 2018/09/29 - PirlTube and PirlApp Fawkes says that the Pirl team is running final tests and checking everything for the new releases. He says Dubs and Is are currently working on finalizing and building PirlApp, which will be released later today!\ndaxm: 1-click install is really pushed as \u0026quot;the way\u0026quot;. Will there be a time that is the ONLY way to install a PIRL MN?  Fawkes: OneClick will not be the only way to install masternodes. The Pirl team is trying to make everything as decentralized as possible and having an independent servers goes toward that.\nHe also mentions how he\u0026rsquo;s happy to see the round table meeting grow since its inception.\nDon: what was the problem that all MNs had to change the tokens?  Fawkes: Unfortunately we will need masterdubs to answer this question later.\nMasterdubs jumps in!\nDubs: That was a misstep with the 2 masternode types. It was not expected. Sorry, shit happens and MN owners have been compensated for the unfortunate outage.\nMacMiner: any plans to bring the PIRL App to IOS and Android and if so any date you can give us?  Fawkes: First the desktop app will be finished and polished and later PirlApp will be put on as many platforms as possible.\nTest.Object. 001: I would like to do an interview with Masterdub if there could be a possibility and publish it as an article. Hello mr. Masterdub!  Masterdubs: We will do it after I free up with current projects which are taking all of my time.\ndaxm: For future (non-beta) releases, how will it be conveyed to the MN owners that they need to update? (Not everyone can camp in Discord and read all the Pinned messages.) Just wondering how we all will keep up-to-date.  Masterdubs: SMS notifications will be implemented and other ways as well to notify MN owners of any outages.\nFawkes jokes that the sooner the meeting ends we will be able to start focusing on finalizing the release!\nDon: can we get a rough overview of the new MNs planned prices for storage space and technical implementation just an overview of what is planned. It can also change something but that we know the direction where it go  Fawkes: If you want to ensure a good operation of your Masternode, it\u0026rsquo;s good to upgrade to over 4GB RAM. Masterdubs: The more storage you have the better. The more storage you have, the more bandwidth you\u0026rsquo;ll be paid for possibly.\nDubs mentions that we want MNs to be beefy in order to feed the needs of the network.\nThe discussion continues about OVH and how their crummy practices are not OK. They promise 4GB of RAM but provide less than that, which makes V5 of the masternode software unable to run. Community action is discussed to address this shortcoming.\ndaxm: I have a \u0026quot;different\u0026quot; question: What are the dots supposed to represent on https://poseidon.pirl.io/? I ask because my MN location is certainly not showing up (if that is what is being presented).  Dubs: The issue is scaling. Once scaled the issue will be resolved and all nodes will be listed.\nPrimateCrypto: Can we discuss Content MN \u0026amp; PirlTube costs rewards? How much of the total 3 Pirl block reward will content MNs get? How much for content? Will PirlTube creators be paying to upload videos in addition to the small gas fees? Will there be any fees for watching videos?  The block rewards will be split with 2 going to premium .5 going to content and .5 going to storage (to be released). After that we will distribute advertisement. Every part of ecosystem gets its share but most of the revenue will go to the publisher. Also, the owners of masternodes will be rewarded too.\nFawkes: Also, in the next update, we will have possibility for content creators to contribute to \u0026ldquo;pay to watch\u0026rdquo;. This will be good for guys who are able to create guides, lessons and online teaching and such. So people will pay to watch those videos and we will create over time some way how to reward these creators.\nNewbieDriver: I would like to know which audio and video codec will be used for PirlTube?  Dubs: You will have your respond when you will see running PirlTube.\nPrimateCrypto: What will be a maximal size of uploaded video?  Dubs: The size will be set for 1 Gb for now.\ninmortem: Will PT allow private videos as YouTube does?  Fawkes: Yes, this is really standard stuff. If you post any copy-right material this is entirely your problem but platform will be forced to delete such content. We will use simple reports to specialized team who will be solving such issues. more thing about private video will be add in next versions, but basically everything will go trough some kind of moderation, even if it is a private video. There will be no options for private video in first version. Next thing witch will not be in the first version but will be definitively in next version is a life stream. And to be honest, decentralized live-streaming is really something new.\nDubs: Yes, there will be an very easy options to report a bad video.\nDon: Will it be easy to copy channels from YT to PT over YT API?  Dubs: Yeah, we will be able to copy paste from YouTube channel into PirlTube channel. You will be able to import when the product will be out of beta testing phase.\ninmortem: Will PT prevent offline downloading of content in anyway? For example to block YouTube downloaders?  Fawkes: right now there is no possibility to download video from the application and also there is no possibility to use something like youtube downloader.\ndaxm: Do we have Docs on how to configure/modify Marlin? (I'm looking at the PirlDocs menu right now and I don't see anything there.)  Fawkes: No, not yet. It were rough 4 months for us. it will be preconfigured at this stage. we will build documentation as we follow. We are running behind documentations. That\u0026rsquo;s we rely on PrimateCrypto who is helping us with documentations. Everyone is welcome to do it. We will not do it officially. Commands for Marlin are pretty much the same as for RpFs. We will have some customization about preserving integrity. Basically every help is welcome and will be rewarded. We are com based project so we want to have community engagement and involve more people into the project. We cab do the documentation by ourselves but we want to focused on next tasks. But more and more stuff is incoming. We will have marketplace, mobile version of Poseidon ,the PIRL storage, the updates for PirlTube, new version of Poseidon and much more hard work and more time consuming task are in front of us.\nWe have a lot of new stuff. Now we only need to work hard and deliver this to you :)\nmk: any general estimate of when to expect storage nodes?  Fawkes: All storage nodes events are planed for next year. Storage nodes are implementation of Casandra but we need to set them from the scratch. It will be something like Google drive but decentralized. There will be possibility to store private files and makes public folders and share them and so on.\nTest.Object. 001 something like STORJ?  Dubs: We are not really aware of how STORJ works so I cant give you any straight answer for that.\ninmortem: Will comments / discussion on a video be stored on Content Node. Who moderates comments / discussion? Can it be turned off...  Fawkes: We Don\u0026rsquo;t have comments or discussions in the first version of PirlTube. We want to be independent on the servers so that no failure can occur.\nmk: do you have any awesome videos preloaded on PirlTube that we can see?  Fawkes: Guys, you will be the ones who will be uploading our first videos. Or Fat rabbit can upload a videos for us. Who wants FatRabbit to upload videos for us write #FaRrabbit\n30 People write #FatRabbit :)\nBye bye guys.\n Author(s):\nPrimateCrypto\nContributor(s):\nTest.Object. 001\ndptelecom\n"
},
{
	"uri": "https://pirl.live/ipns/QmVKFJs81erni4KV6Hzt2xVwGtC2P1WtE9A4MxNThFVFVh/en/pirl-roundtable-meeting/2018-09-22/",
	"title": "Roundtable 2018-09-22",
	"tags": [],
	"description": "",
	"content": " \u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt; HEAD\n \u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt; local_version\nTL;DR The PIRL Marlin content masternode binaries are out for testing!\n2018/09/22 - Content Masternodes are out for testing! This time masterdubs (PIRL founder) announced 1 day before the meeting that the community should expect something exciting in a tweet as well as in day-to-day interactions on Discord.\nThe meeting was started by masterdubs (dubs for short) with a quick comment that the community was expecting an announcement about something which came to be known as Marlin. Marlin is the next iteration of the masternode products released by the PIRL team.\n Marlins in nature are known as fast swimmers. As such, by the name Marlin, dubs aims to capture the same effect within the content masternode replication arena.\n Dubs says that questions are welcome\u0026hellip; but not about Marlin! The chatroom explodes with activity. He also mentions that he will sleep for a week after the successful release of Marlin.\n The community can attest that dubs is one of the hardest working devs, always active, at any all odd hours. Many irons in the fire keeping with mind awake with excitement.\n After another moment of activity in the chatroom, some questions thrown out, dubs mentions that maybe today will be the day people will be able to run Marin. Marlin is out, everything is ready for real world testing, he announces!\ndaxm: Docs on how to install Marlin?  Dubs: Marlin will be automatically pushed using Poseidon (automation = better!) and he also confirms that soon documentation will be released on how to use Marlin.\nmk: Can premium masternodes run marlin without additional stake?    mk is a respected and knowledgeable developer who took an interest in the PIRL community project.\n  Dubs: I want to be really clear, all premium masternodes will be required to run all 3 (premium, content \u0026amp; storage) binaries for redundancy purposes.\nHe makes is clear that the masternodes are expected to perform service for the network and as such, requiring ample resources.\nmk: What does a 10K stake get us? that is smaller node without geth?  Dubs: No, it [Marlin] will run geth and it will talk to to the geth node with a contract.\nPhatblinkie: Can subdomains work?  Dubs: Yes \u0026amp; also the goal is to put TLS on it.\nmk: so am I correct - it makes no sense to split the 20k masternode to 2 10k nodes?  Dubs: No, premium will always be more because it will receive part of the PIRL Marketplace fees and part of the Content and Storage nodes rewards, as needed to augment the network (note: reason why premium is required to run all 3 binaries, see above).\ndaxm: Will each MN \u0026quot;function\u0026quot; require its own cert or one cert for the whole MN?  Dubs: Only 1 cert for all functions.\nmk: some of us are running multiple nodes per a single masternode token, due to (poseidon issue?) ....  Dubs: The problem is the Poseidon server cluster which is running high on memory. I\u0026rsquo;m working on adding more capacity to it in the next few days. I will talk to you more about it in private.\nGeneral Mayhem: When pirltube?  Dubs: In a week or two. Once enough beta testers run Marlin, we will be able to run PirlTube on the new masternodes.\nmk: Will be be able to run multiple MNs for redundancy with the new Marlin masternodes?  Dubs: Yes, that will not change.\nDubs also mentions that the PIRL team will grow once the Marlin masternode is out and PirlTube is in use.\nblck: Is there data redundancy if one node is out?  Dubs: Yes blck. I want to put Marlin is a sidechain to completely decentralize it. At first we will test the database, then content replication.\nDubs says he wants to create a community based marketing team. If anyone is interested, write a proposal and submit it to him directly.\nblck: the data on the content masternode is encrypted?  Dubs: No, I don\u0026rsquo;t see any reason. If someone deletes data maliciously, the other replicas will have it.\nWracul: Q: regarding the PirlTube. Someone mentioned that you can only access it though PirlApp.  Dubs: Yes, only PirlApp at first\ndaxm: Did you see/hear about FloudFlare offering an IPFS gateway? Will that affect/interface with Pirl Content MN? ```` Dubs: No, Pirl Marlin is a private IPFS network only to be used within the PIRL ecosystem.  clabmw24: how will you pay for the content masternodes? block rewards and pirltube users?\nDubs: I will temporarily keep the rewards inactive until we're sure Marlin is testing well and then adjust everything and start the rewards.  mk: I\u0026rsquo;d like to integrate the new contract for Marlin into the web wallet asap.\nDubs: Yep no problem. Dubs also mentions that the responsibility for writing the new content masternode is on the community. There is already a bounty available for it on this very platform! Just see the Getting Started section. knowledgeable PIRL community members welcome with open arms.  blck: will you be able to limit max bandwidth used?\nDubs: No we won't limit it He also mentioned that the setup for Marlin will be similar to the current setup. It will be mainly handled by OneClick and Poseidon or the user will simply run the additional Marlin binary in addition to the premium binary in a manual setup scenario. At this point Dubs announces he has a link for everyone. https://storage.gra1.cloud.ovh.net/v1/AUTH_8f059abdcba74107a430604cf1c257bb/masternodes/content/pirl-content-v1-beta https://storage.gra1.cloud.ovh.net/v1/AUTH_8f059abdcba74107a430604cf1c257bb/masternodes/marlin/marlin https://storage.gra1.cloud.ovh.net/v1/AUTH_8f059abdcba74107a430604cf1c257bb/masternodes/premium/pirl-premium-v4-beta To run simply... `marlin init` followed by `marlin daemon` Premium MNs will run the premium binary and marlin binary while content MNs will will the content binary and marlin binary.  Wracul: It\u0026rsquo;s about 1 week to PirlApp. What more will be released as part of it?\n Dubs: The goal of PirlApp is to publish an SDK allowing everyone to post apps on it. He also mentioned that the soon to be released PirlTube will not allow pornography or nudity but PIRL may release a separate product for this market. He again urges everyone who thinks he or she can help with any part of the project to contact him directly and express interest. This includes PirlTube moderators, marketing people, ProgPoW integrators and all others who want to work on a piece of PIRL. Dubs says that he wants to only fork once and implement ProgPoW at the same time. Any development help to make this happen is appreciated from the community.  Phatblinkie: Have you had any other side conversations with the ProgPoW devs? ``` Dubs: Yes. We don\u0026rsquo;t want to implement as-is but improve parts it for our unique needs.\n Author(s):\nPrimateCrypto\nContributor(s):\ndptelecom\n"
},
{
	"uri": "https://pirl.live/ipns/QmVKFJs81erni4KV6Hzt2xVwGtC2P1WtE9A4MxNThFVFVh/en/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://pirl.live/ipns/QmVKFJs81erni4KV6Hzt2xVwGtC2P1WtE9A4MxNThFVFVh/en/",
	"title": "Pirl Docs",
	"tags": [],
	"description": "",
	"content": " Pirl Docs Welcome to the Pirl Documentation portal! The content you see here is the result of numerous volunteer members from the Pirl Community.\nWhat Is Pirl? Pirl is a community-centric blockchain platform, utilizing a globally distributed, multi-tiered masternodes network. The goal is to spur an evolution of the crypto space through dedicated research and ongoing innovation. Pirl further distinguishes itself from the competition by refusing to compromise its security or reputation in the interest of short term speculation.\nContents PirlWebsite FAQ 1.) Getting Started 2.) PirlCloud 3.) Mining 4.) Wallets 5.) Press releases 6.) Pirl Roundtable Meeting 7.) Links 8.) Development 9.) Downloads 10.) Services 11.) Newsletter signup 12.) Technical Documentation 13.) Bounty \u0026amp; Contributions Author(s):\n@Dptelecom\nContributor(s):\n"
},
{
	"uri": "https://pirl.live/ipns/QmVKFJs81erni4KV6Hzt2xVwGtC2P1WtE9A4MxNThFVFVh/en/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://pirl.live/ipns/QmVKFJs81erni4KV6Hzt2xVwGtC2P1WtE9A4MxNThFVFVh/en/mailing/thanks/",
	"title": "",
	"tags": [],
	"description": "",
	"content": " \u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt; HEAD\n \u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt; local_version\nAuthor(s):\n@dptelecom\nContributor():\n"
}]